import java.lang.ProcessBuilder
import mil.darpa.immortals.config.ImmortalsConfig
import mil.darpa.immortals.config.DeploymentEnvironmentConfiguration
import groovy.json.JsonOutput
import groovy.json.JsonBuilder

import java.nio.file.Files

buildscript {
    repositories {
        jcenter()
        maven {
            url gradle.IMMORTALS_REPO
        }
        maven {
            url "https://maven.google.com"
        }
        maven {
            url 'https://repo.gradle.org/gradle/libs-releases'
        }
    }
    dependencies {
        classpath 'mil.darpa.immortals:ImmortalsGradle:+'
        classpath 'mil.darpa.immortals:ImmortalsConfig:+'
        classpath 'com.android.tools.build:gradle:2.3.3'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url gradle.IMMORTALS_REPO
        }
        maven {
            url "https://maven.google.com"
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'mil.darpa.immortals'

group = 'mil.darpa.immortals'
version = '2.0-LOCAL'

android {
    compileSdkVersion 26
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "mil.darpa.immortals.thirdpartylibanalysisandroidapp"
        minSdkVersion 21
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

    sourceSets {
        test {
            java {
                srcDirs = ['src/test/java']
            }
        }
        androidTest {
            java {
                srcDirs = ['src/androidTest/java']
            }
        }
        main {
            java {
                srcDirs = ['src/main/java']
            }
        }
    }

}


afterEvaluate {
    connectedDebugAndroidTest {
        // First build the helper server
        dependsOn(":AndroidHelperServer:jar")

        Process helperProcess

        // Before the test starts
        doFirst {
            // Determine the android emulator to use for the test
            DeploymentEnvironmentConfiguration.AndroidEnivronmentConfiguration aec = null
            DeploymentEnvironmentConfiguration dec = ImmortalsConfig.instance.deploymentEnvironment

            Iterator<DeploymentEnvironmentConfiguration.AndroidEnivronmentConfiguration> iter = dec.androidEnvironments.iterator()
            while (aec == null && iter.hasNext()) {
                DeploymentEnvironmentConfiguration.AndroidEnivronmentConfiguration conf = iter.next()
                DeploymentEnvironmentConfiguration.AndroidEmulatorRequirement req = conf.environmentDetails

                if (req.androidVersion == 21 && req.uploadBandwidthLimitKilobitsPerSecond == 800 &&
                        req.externallyAccessibleUrls.contains("dropbox.com:443") && req.externallyAccessibleUrls.contains("dropbox.com:80")) {
                    aec = conf
                    // push the test file to the device
                    exec {
                        workingDir = project.rootDir
                        commandLine = ['adb', 'connect', aec.adbUrl]
                    }
                }
            }

            if (aec == null) {
                throw new GradleException("No emulator has been found in the configuration that matches the necessary requirements!")
            }

            // push the test file to the device
            exec {
                workingDir = project.rootDir
                commandLine = ['adb', '-s', aec.adbIdentifier, 'push', project.rootDir.toPath().resolve('moby_dick_x7.txt').toString(), '/sdcard/file.txt']
            }

            // Copy the deployment configuration to a file and push it to the device
            String configString = new JsonBuilder(dec).toPrettyString()
            java.nio.file.Path configPath = project.buildDir.toPath().resolve("tmp/deployment_config.json")
            Files.write(configPath, configString.bytes)
            exec {
                workingDir = project.rootDir
                commandLine = ['adb', '-s', aec.adbIdentifier, 'push', configPath.toString(), '/sdcard/deployment_config.json']
            }

            ProcessBuilder pb = new ProcessBuilder("adb", '-s', aec.adbIdentifier, "shell", "svc", "data", "enable")
            helperProcess = pb.start()
            helperProcess.waitFor()
            pb = new ProcessBuilder("adb", '-s', aec.adbIdentifier, "shell", "svc", "wifi", "enable")
            helperProcess = pb.start()
            helperProcess.waitFor()

            // TODO: Add error if issues happenhere
            // start the helper server, giving it a second to settle
            pb = new ProcessBuilder('java', '-jar', project.rootDir.toPath().resolve('AndroidHelperServer/build/libs/AndroidHelperServer.jar').toString())
            helperProcess = pb.start()
            Thread.sleep(1000)
        }

        doLast {
            // When the test has finished, destroy the helper server
            helperProcess.destroy()
        }
    }
}

dependencies {
    compile 'com.dropbox.core:dropbox-core-sdk:3.0.3'
    compile 'mil.darpa.immortals:core:+'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:support-annotations:27.1.1'
    compile 'org.slf4j:slf4j-api:1.7.21'
    testCompile 'junit:junit:4.12'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.squareup.retrofit2:retrofit:2.1.0'
    androidTestCompile 'com.android.support.test:runner:1.0.2'
    compile 'com.squareup.okhttp3:okhttp:3.5.0'
    androidTestCompile 'com.squareup.okhttp3:okhttp:3.5.0'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.4'
}


afterEvaluate {
    if (project.getGradle().startParameter.taskRequests.size() > 0 &&
            project.getGradle().startParameter.taskRequests.get(0).args.contains("clean") &&
            project.getGradle().startParameter.taskRequests.get(0).args.contains("test")) {
        test.finalizedBy(connectedAndroidTest)
    }
}
