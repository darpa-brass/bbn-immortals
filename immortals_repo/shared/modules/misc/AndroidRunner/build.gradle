buildscript {
    apply from: "../../../common.gradle"

    buildscript.repositories {
        jcenter()
    }
    buildscript.dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
    }
}

apply from: "../../../common.gradle"
apply from: 'dependencies.gradle'


apply plugin: 'com.android.application'

apply plugin: ImmortalsJavaPublishCleanupPlugin

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "${rootGroup}.AndroidRunner"
        minSdkVersion 21
        targetSdkVersion 21
        versionCode 1
        versionName defaultSoftwarePublishVersion
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions.abortOnError = false;


    preBuild.doLast {
        tasks.getByName('build').doLast {
            copy {
                from('build/outputs/apk') {
                    include '*.apk'
                }
                into('./')
            }
        }
    }

    clean {
        delete fileTree(dir: './', includes: ['build', '*.apk'])
    }
}

repositories {
    jcenter()
}

dependencies {
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'com.google.code.gson:gson:2.5'
    compile project(':core')
    compile 'com.android.support:support-v4:21.0.3'
}

publish.dependsOn('jarReleaseClasses')

// TODO: This should really reference the similar method in the root build.gradle...
class ImmortalsJavaPublishCleanupPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.clean.doLast {
            String rootPublishDir = project.localRepoPath + ((String) project.rootGroup).replaceAll('\\.', '/') + '/'
            String publishDir = rootPublishDir + project.getPath().substring(1).replace(':', '/') + '-skeleton' + '/'

            String[] artifacts = [
                    'maven-metadata.xml',
                    'maven-metadata.xml.md5',
                    'maven-metadata.xml.sha1',
                    project.defaultSoftwarePublishVersion + '/' + project.name + '-skeleton'  + '-' + project.defaultSoftwarePublishVersion + '.jar',
                    project.defaultSoftwarePublishVersion + '/' + project.name + '-skeleton'  + '-' + project.defaultSoftwarePublishVersion + '.jar.md5',
                    project.defaultSoftwarePublishVersion + '/' + project.name + '-skeleton'  + '-' + project.defaultSoftwarePublishVersion + '.jar.sha1',
                    project.defaultSoftwarePublishVersion + '/' + project.name + '-skeleton'  + '-' + project.defaultSoftwarePublishVersion + '.pom',
                    project.defaultSoftwarePublishVersion + '/' + project.name + '-skeleton'  + '-' + project.defaultSoftwarePublishVersion + '.pom.md5',
                    project.defaultSoftwarePublishVersion + '/' + project.name + '-skeleton'  + '-' + project.defaultSoftwarePublishVersion + '.pom.sha1',
            ]

            for (String artifact : artifacts) {
                File f = new File(publishDir + artifact)
                if (f.exists()) {
                    f.delete()
                }
            }

            FileTree ft = project.fileTree(dir: publishDir)

            for (File f : ft.getFiles()) {
                if (f.isDirectory() && project.fileTree(dir: f.getAbsolutePath()).isEmpty()) {
                    new File(f.getAbsolutePath()).deleteDir()
                } else {
                    println('The publish directory for "' + f.getPath() + '" is not empty! Please update the cleaning scripts!')
                }
            }
        }
    }
}