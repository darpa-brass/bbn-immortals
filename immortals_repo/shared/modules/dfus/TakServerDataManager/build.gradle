apply plugin: mil.darpa.immortals.JavaModule

import mil.darpa.immortals.config.ImmortalsConfig

import java.nio.file.Paths

apply plugin: 'mil.darpa.immortals'

sourceSets {
    validation {
        java {
            srcDirs = ['src/validation/java']
        }
    }
}

jar {
    manifest {
        attributes "Implementation-Title": "TakServerDataManager",
                "Implementation-Version": ImmortalsConfig.instance.build.das.publishVersion,
                "Main-Class": "mil.darpa.immortals.TakServerDataManager.DatabaseManager"
    }
}



task('fatJar', type: Jar) {
    manifest {
        attributes "Implementation-Title": "TakServerDataManager",
                "Implementation-Version": ImmortalsConfig.instance.build.das.publishVersion,
                "Main-Class": "mil.darpa.immortals.TakServerDataManager.DatabaseManager"
    }

    baseName = project.name + '-all'

    from {
        configurations.compile.filter { !it.name.endsWith("android.jar") }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}



task('validate', type: Test) {
    group = 'Verification'
    description = 'Executes all the validation tests'
    testClassesDir = sourceSets.validation.output.classesDir
    classpath = sourceSets.validation.runtimeClasspath
    reports.junitXml.setDestination(Paths.get(project.buildDir.absolutePath).resolve('test-results/test').toString())
}

dependencies {
    compile project(':shared:modules:datatypes:CotData')
    compile project(':shared:modules:datatypes:Coordinates')
    compile 'commons-codec:commons-codec:1.2'
    compile('org.postgresql:postgresql:9.4.1208')
}

dependencies {
    validationCompile(sourceSets.main.output)
    validationCompile(configurations.compile)
    validationCompile(configurations.runtime)
    validationCompile('junit:junit:4.12')
}

immortalize.dependsOn(compileValidationJava)


//def publish_extension = project.getExtensions().getByName('publishing')
//if (publish_extension != null) {
//    def cont = publish_extension.getProperties().get('publications')
//    if (cont != null && cont instanceof PublicationContainer) {
//        cont.findAll {it ->
//            if (it instanceof MavenPublication) {
//                println(it.groupId)
//                println(it.artifactId)
//                println(it.version)
//            }
//        }
//    }
//}
