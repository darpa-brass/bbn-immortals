<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="mil.darpa.immortals.core.das.knowledgebuilders.generic.StringVariableAssignmentResolverTest" tests="5" skipped="0" failures="0" errors="0" timestamp="2018-06-01T18:06:56" hostname="dhcp89-77-152.bbn.com" time="0.018">
  <properties/>
  <testcase name="testVariableInitializer" classname="mil.darpa.immortals.core.das.knowledgebuilders.generic.StringVariableAssignmentResolverTest" time="0.011"/>
  <testcase name="testFieldInitializer" classname="mil.darpa.immortals.core.das.knowledgebuilders.generic.StringVariableAssignmentResolverTest" time="0.003"/>
  <testcase name="testAssignLiteral" classname="mil.darpa.immortals.core.das.knowledgebuilders.generic.StringVariableAssignmentResolverTest" time="0.001"/>
  <testcase name="testAssignSimpleExpression" classname="mil.darpa.immortals.core.das.knowledgebuilders.generic.StringVariableAssignmentResolverTest" time="0.001"/>
  <testcase name="testAssignSimpleExpression2" classname="mil.darpa.immortals.core.das.knowledgebuilders.generic.StringVariableAssignmentResolverTest" time="0.001"/>
  <system-out><![CDATA[---
root(Type=CompilationUnit): 
    packageDeclaration(Type=PackageDeclaration): 
        name(Type=Name): 
            identifier: "generic"
            qualifier(Type=Name): 
                identifier: "knowledgebuilders"
                qualifier(Type=Name): 
                    identifier: "das"
                    qualifier(Type=Name): 
                        identifier: "core"
                        qualifier(Type=Name): 
                            identifier: "immortals"
                            qualifier(Type=Name): 
                                identifier: "darpa"
                                qualifier(Type=Name): 
                                    identifier: "mil"
    imports: 
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ParseResult"
                qualifier(Type=Name): 
                    identifier: "javaparser"
                    qualifier(Type=Name): 
                        identifier: "github"
                        qualifier(Type=Name): 
                            identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ParserConfiguration"
                qualifier(Type=Name): 
                    identifier: "javaparser"
                    qualifier(Type=Name): 
                        identifier: "github"
                        qualifier(Type=Name): 
                            identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "CompilationUnit"
                qualifier(Type=Name): 
                    identifier: "ast"
                    qualifier(Type=Name): 
                        identifier: "javaparser"
                        qualifier(Type=Name): 
                            identifier: "github"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "MethodDeclaration"
                qualifier(Type=Name): 
                    identifier: "body"
                    qualifier(Type=Name): 
                        identifier: "ast"
                        qualifier(Type=Name): 
                            identifier: "javaparser"
                            qualifier(Type=Name): 
                                identifier: "github"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Expression"
                qualifier(Type=Name): 
                    identifier: "expr"
                    qualifier(Type=Name): 
                        identifier: "ast"
                        qualifier(Type=Name): 
                            identifier: "javaparser"
                            qualifier(Type=Name): 
                                identifier: "github"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "MethodCallExpr"
                qualifier(Type=Name): 
                    identifier: "expr"
                    qualifier(Type=Name): 
                        identifier: "ast"
                        qualifier(Type=Name): 
                            identifier: "javaparser"
                            qualifier(Type=Name): 
                                identifier: "github"
                                qualifier(Type=Name): 
                                    identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "YamlPrinter"
                qualifier(Type=Name): 
                    identifier: "printer"
                    qualifier(Type=Name): 
                        identifier: "javaparser"
                        qualifier(Type=Name): 
                            identifier: "github"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "JavaSymbolSolver"
                qualifier(Type=Name): 
                    identifier: "symbolsolver"
                    qualifier(Type=Name): 
                        identifier: "javaparser"
                        qualifier(Type=Name): 
                            identifier: "github"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "CombinedTypeSolver"
                qualifier(Type=Name): 
                    identifier: "typesolvers"
                    qualifier(Type=Name): 
                        identifier: "resolution"
                        qualifier(Type=Name): 
                            identifier: "symbolsolver"
                            qualifier(Type=Name): 
                                identifier: "javaparser"
                                qualifier(Type=Name): 
                                    identifier: "github"
                                    qualifier(Type=Name): 
                                        identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "JavaParserTypeSolver"
                qualifier(Type=Name): 
                    identifier: "typesolvers"
                    qualifier(Type=Name): 
                        identifier: "resolution"
                        qualifier(Type=Name): 
                            identifier: "symbolsolver"
                            qualifier(Type=Name): 
                                identifier: "javaparser"
                                qualifier(Type=Name): 
                                    identifier: "github"
                                    qualifier(Type=Name): 
                                        identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ReflectionTypeSolver"
                qualifier(Type=Name): 
                    identifier: "typesolvers"
                    qualifier(Type=Name): 
                        identifier: "resolution"
                        qualifier(Type=Name): 
                            identifier: "symbolsolver"
                            qualifier(Type=Name): 
                                identifier: "javaparser"
                                qualifier(Type=Name): 
                                    identifier: "github"
                                    qualifier(Type=Name): 
                                        identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "SourceRoot"
                qualifier(Type=Name): 
                    identifier: "utils"
                    qualifier(Type=Name): 
                        identifier: "javaparser"
                        qualifier(Type=Name): 
                            identifier: "github"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ImmortalsConfig"
                qualifier(Type=Name): 
                    identifier: "config"
                    qualifier(Type=Name): 
                        identifier: "immortals"
                        qualifier(Type=Name): 
                            identifier: "darpa"
                            qualifier(Type=Name): 
                                identifier: "mil"
        - import(Type=ImportDeclaration): 
            isAsterisk: "true"
            isStatic: "false"
            name(Type=Name): 
                identifier: "junit"
                qualifier(Type=Name): 
                    identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "File"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "List"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
    types: 
        - type(Type=ClassOrInterfaceDeclaration): 
            isInterface: "false"
            name(Type=SimpleName): 
                identifier: "StringVariableAssignmentResolverTest"
            members: 
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=NullLiteralExpr): 
                            name(Type=SimpleName): 
                                identifier: "cu"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "CompilationUnit"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "File"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "FILE_TO_ANALYZE"
                                            name(Type=SimpleName): 
                                                identifier: "sourcePath"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "File"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "CombinedTypeSolver"
                                                arguments: 
                                                    - argument(Type=ObjectCreationExpr): 
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "ReflectionTypeSolver"
                                                    - argument(Type=ObjectCreationExpr): 
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "JavaParserTypeSolver"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "sourcePath"
                                            name(Type=SimpleName): 
                                                identifier: "typeSolver"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "CombinedTypeSolver"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "setSymbolResolver"
                                                scope(Type=ObjectCreationExpr): 
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "ParserConfiguration"
                                                arguments: 
                                                    - argument(Type=ObjectCreationExpr): 
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "JavaSymbolSolver"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "typeSolver"
                                            name(Type=SimpleName): 
                                                identifier: "parserConfiguration"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ParserConfiguration"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "SourceRoot"
                                                arguments: 
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "toPath"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "sourcePath"
                                            name(Type=SimpleName): 
                                                identifier: "sourceRoot"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "SourceRoot"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "setParserConfiguration"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "sourceRoot"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "parserConfiguration"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "tryToParse"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "sourceRoot"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: ""
                                            name(Type=SimpleName): 
                                                identifier: "parseResults"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "List"
                                                typeArguments: 
                                                    - typeArgument(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "ParseResult"
                                                        typeArguments: 
                                                            - typeArgument(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "CompilationUnit"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "cu"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "get"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "findFirst"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "map"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "filter"
                                                    scope(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "stream"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "parseResults"
                                                    arguments: 
                                                        - argument(Type=MethodReferenceExpr): 
                                                            identifier: "isSuccessful"
                                                            scope(Type=TypeExpr): 
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "ParseResult"
                                                arguments: 
                                                    - argument(Type=LambdaExpr): 
                                                        isEnclosingParameters: "false"
                                                        body(Type=ExpressionStmt): 
                                                            expression(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "get"
                                                                scope(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getResult"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "r"
                                                        parameters: 
                                                            - parameter(Type=Parameter): 
                                                                isVarArgs: "false"
                                                                name(Type=SimpleName): 
                                                                    identifier: "r"
                                                                type(Type=UnknownType): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "println"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "out"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "System"
                                    arguments: 
                                        - argument(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "output"
                                            scope(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "YamlPrinter"
                                                arguments: 
                                                    - argument(Type=BooleanLiteralExpr): 
                                                        value: "true"
                                            arguments: 
                                                - argument(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findRootNode"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "cu"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "setUpBeforeClass"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "Exception"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "BeforeClass"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "tearDownAfterClass"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "Exception"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "AfterClass"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "setUp"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "Exception"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Before"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "tearDown"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "Exception"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "After"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=StringLiteralExpr): 
                                                value: "TEST1"
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "println"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "out"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "System"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "analysisTarget1"
                    annotations: 
                        - annotation(Type=SingleMemberAnnotationExpr): 
                            memberValue(Type=StringLiteralExpr): 
                                value: "unused"
                            name(Type=Name): 
                                identifier: "SuppressWarnings"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=StringLiteralExpr): 
                                value: "TEST2"
                            name(Type=SimpleName): 
                                identifier: "myvar"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "println"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "out"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "System"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=StringLiteralExpr): 
                                                value: "TESTXYZ"
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "analysisTarget2"
                    annotations: 
                        - annotation(Type=SingleMemberAnnotationExpr): 
                            memberValue(Type=StringLiteralExpr): 
                                value: "unused"
                            name(Type=Name): 
                                identifier: "SuppressWarnings"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=NullLiteralExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "myvar"
                                    value(Type=StringLiteralExpr): 
                                        value: "TEST3"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "println"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "out"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "System"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "analysisTarget3"
                    annotations: 
                        - annotation(Type=SingleMemberAnnotationExpr): 
                            memberValue(Type=StringLiteralExpr): 
                                value: "unused"
                            name(Type=Name): 
                                identifier: "SuppressWarnings"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=NullLiteralExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "myvar"
                                    value(Type=BinaryExpr): 
                                        operator: "PLUS"
                                        left(Type=StringLiteralExpr): 
                                            value: "TEST"
                                        right(Type=StringLiteralExpr): 
                                            value: "4"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "println"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "out"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "System"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "analysisTarget4"
                    annotations: 
                        - annotation(Type=SingleMemberAnnotationExpr): 
                            memberValue(Type=StringLiteralExpr): 
                                value: "unused"
                            name(Type=Name): 
                                identifier: "SuppressWarnings"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=NullLiteralExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "myvar"
                                    value(Type=StringLiteralExpr): 
                                        value: "TESTabc"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "myvar"
                                    value(Type=StringLiteralExpr): 
                                        value: "TEST5"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "println"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "out"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "System"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "analysisTarget5"
                    annotations: 
                        - annotation(Type=SingleMemberAnnotationExpr): 
                            memberValue(Type=StringLiteralExpr): 
                                value: "unused"
                            name(Type=Name): 
                                identifier: "SuppressWarnings"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=NullLiteralExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "String"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "myvar"
                                    value(Type=StringLiteralExpr): 
                                        value: "TEST"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "myvar"
                                    value(Type=BinaryExpr): 
                                        operator: "PLUS"
                                        left(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                        right(Type=StringLiteralExpr): 
                                            value: "6"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "println"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "out"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "System"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "analysisTarget6"
                    annotations: 
                        - annotation(Type=SingleMemberAnnotationExpr): 
                            memberValue(Type=StringLiteralExpr): 
                                value: "unused"
                            name(Type=Name): 
                                identifier: "SuppressWarnings"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "cu"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodDeclaration"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "toString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "analysisTarget1"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "targetMethod"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodDeclaration"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "targetMethod"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodCallExpr"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "asString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "println"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "methodCall"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodCallExpr"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getArgument"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "methodCall"
                                                arguments: 
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Expression"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "StringVariableValueVisitor"
                                            name(Type=SimpleName): 
                                                identifier: "sc"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "StringVariableValueVisitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getStaticAssignment"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "sc"
                                                arguments: 
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getNameAsString"
                                                        scope(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "asNameExpr"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "myvar"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodCall"
                                            name(Type=SimpleName): 
                                                identifier: "assignment"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "SimpleStringAssignment"
                            - statement(Type=AssertStmt): 
                                check(Type=EnclosedExpr): 
                                    inner(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "equals"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "toString"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValue"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "assignment"
                                        arguments: 
                                            - argument(Type=StringLiteralExpr): 
                                                value: "TEST1"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "testVariableInitializer"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Test"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "cu"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodDeclaration"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "toString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "analysisTarget2"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "targetMethod"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodDeclaration"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "targetMethod"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodCallExpr"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "asString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "println"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "methodCall"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodCallExpr"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getArgument"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "methodCall"
                                                arguments: 
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Expression"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "StringVariableValueVisitor"
                                            name(Type=SimpleName): 
                                                identifier: "sc"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "StringVariableValueVisitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getStaticAssignment"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "sc"
                                                arguments: 
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getNameAsString"
                                                        scope(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "asNameExpr"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "myvar"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodCall"
                                            name(Type=SimpleName): 
                                                identifier: "assignment"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "SimpleStringAssignment"
                            - statement(Type=AssertStmt): 
                                check(Type=EnclosedExpr): 
                                    inner(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "equals"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "toString"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValue"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "assignment"
                                        arguments: 
                                            - argument(Type=StringLiteralExpr): 
                                                value: "TEST2"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "testFieldInitializer"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Test"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "cu"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodDeclaration"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "toString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "analysisTarget3"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "targetMethod"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodDeclaration"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "targetMethod"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodCallExpr"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "asString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "println"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "methodCall"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodCallExpr"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getArgument"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "methodCall"
                                                arguments: 
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Expression"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "StringVariableValueVisitor"
                                            name(Type=SimpleName): 
                                                identifier: "sc"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "StringVariableValueVisitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getStaticAssignment"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "sc"
                                                arguments: 
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getNameAsString"
                                                        scope(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "asNameExpr"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "myvar"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodCall"
                                            name(Type=SimpleName): 
                                                identifier: "assignment"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "SimpleStringAssignment"
                            - statement(Type=AssertStmt): 
                                check(Type=EnclosedExpr): 
                                    inner(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "equals"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "toString"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValue"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "assignment"
                                        arguments: 
                                            - argument(Type=StringLiteralExpr): 
                                                value: "TEST3"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "testAssignLiteral"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Test"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "cu"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodDeclaration"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "toString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "analysisTarget4"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "targetMethod"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodDeclaration"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "targetMethod"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodCallExpr"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "asString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "println"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "methodCall"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodCallExpr"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getArgument"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "methodCall"
                                                arguments: 
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Expression"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "StringVariableValueVisitor"
                                            name(Type=SimpleName): 
                                                identifier: "sc"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "StringVariableValueVisitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getStaticAssignment"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "sc"
                                                arguments: 
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getNameAsString"
                                                        scope(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "asNameExpr"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "myvar"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodCall"
                                            name(Type=SimpleName): 
                                                identifier: "assignment"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "SimpleStringAssignment"
                            - statement(Type=AssertStmt): 
                                check(Type=EnclosedExpr): 
                                    inner(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "equals"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "toString"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValue"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "assignment"
                                        arguments: 
                                            - argument(Type=StringLiteralExpr): 
                                                value: "TEST4"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "testAssignSimpleExpression"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Test"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "cu"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodDeclaration"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "toString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "analysisTarget5"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "targetMethod"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodDeclaration"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "targetMethod"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodCallExpr"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "asString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "println"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "methodCall"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodCallExpr"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getArgument"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "methodCall"
                                                arguments: 
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Expression"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "StringVariableValueVisitor"
                                            name(Type=SimpleName): 
                                                identifier: "sc"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "StringVariableValueVisitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getStaticAssignment"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "sc"
                                                arguments: 
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getNameAsString"
                                                        scope(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "asNameExpr"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "myvar"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodCall"
                                            name(Type=SimpleName): 
                                                identifier: "assignment"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "SimpleStringAssignment"
                            - statement(Type=AssertStmt): 
                                check(Type=EnclosedExpr): 
                                    inner(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "equals"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "toString"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValue"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "assignment"
                                        arguments: 
                                            - argument(Type=StringLiteralExpr): 
                                                value: "TEST5"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "testAssignSimpleExpression2"
                    annotations: 
                        - annotation(Type=MarkerAnnotationExpr): 
                            name(Type=Name): 
                                identifier: "Test"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "cu"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodDeclaration"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "toString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "analysisTarget6"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "targetMethod"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodDeclaration"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "findFirst"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "targetMethod"
                                                    arguments: 
                                                        - argument(Type=ClassExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "MethodCallExpr"
                                                        - argument(Type=LambdaExpr): 
                                                            isEnclosingParameters: "false"
                                                            body(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "equals"
                                                                    scope(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "asString"
                                                                        scope(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getName"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "t"
                                                                    arguments: 
                                                                        - argument(Type=StringLiteralExpr): 
                                                                            value: "println"
                                                            parameters: 
                                                                - parameter(Type=Parameter): 
                                                                    isVarArgs: "false"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "t"
                                                                    type(Type=UnknownType): 
                                            name(Type=SimpleName): 
                                                identifier: "methodCall"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodCallExpr"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getArgument"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "methodCall"
                                                arguments: 
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                            name(Type=SimpleName): 
                                                identifier: "myvar"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Expression"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "StringVariableValueVisitor"
                                            name(Type=SimpleName): 
                                                identifier: "sc"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "StringVariableValueVisitor"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getStaticAssignment"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "sc"
                                                arguments: 
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getNameAsString"
                                                        scope(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "asNameExpr"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "myvar"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodCall"
                                            name(Type=SimpleName): 
                                                identifier: "assignment"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "SimpleStringAssignment"
                            - statement(Type=AssertStmt): 
                                check(Type=EnclosedExpr): 
                                    inner(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "equals"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "toString"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValue"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "assignment"
                                        arguments: 
                                            - argument(Type=StringLiteralExpr): 
                                                value: "TEST6"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "testAssignSimpleExpression3"
                - member(Type=FieldDeclaration): 
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=MethodCallExpr): 
                                name(Type=SimpleName): 
                                    identifier: "toString"
                                scope(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "resolve"
                                    scope(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getImmortalsRoot"
                                        scope(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "globals"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getInstance"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "ImmortalsConfig"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "das/das-service/src/test/java/mil/darpa/immortals/core/das/knowledgebuilders/generic"
                            name(Type=SimpleName): 
                                identifier: "FILE_TO_ANALYZE"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
...
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
