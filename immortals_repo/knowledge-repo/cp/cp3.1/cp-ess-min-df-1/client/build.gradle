buildscript {
    repositories {
        mavenCentral()
		mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${SPRING_VERSION}")
		classpath("com.securboration:immortals-project-to-triples:r2.0.0")
    }
}

apply plugin: 'com.securboration.p2t'

ext{
	pluginOutput="C:/ImmortalsPhase3/knowledge-repo/out"//a directory to dump analysis results into
	callTraces="C:/ImmortalsPhase3/knowledge-repo/cp/cp3.1/cp-ess-min/analysisResults/client"
	localRepo="C:/ImmortalsPhase3/shared/IMMORTALS_REPO" //a directory to mine for DFUs
	fusekiEndpoint="http://localhost:3030/ds"
	xsdTranslationEndpoint="http://localhost:9999/xsdsts"
	domainKnowledge="C:/ImmortalsPhase3/knowledge-repo/cp/cp3.1/cp-ess-min/etc/arch.ttl"
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	compile project(":schema-code:client")
	compile("com.securboration:immortals-adsl-generate:r2.0.0")
	compile("net.sf.saxon:Saxon-HE:9.9.1-1")
}

jar {

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	manifest { 
		//attributes "Main-Class": "com.securboration.main.TestTranslationDfu"
		attributes "Main-Class": "com.securboration.main.Main"
	}
	
	into("/wsdl"){
		from("${projectDir}/../schema/client"){
			//include everything
		}
	}
	
	into("/"){
		from("${projectDir}/../schema-code/client/build/classes/jaxb"){
			//include everything
		}
		
		from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
		
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
	}
	
	baseName 'immortals-cp3.1-client'
	version =  '1.0.0'
}


