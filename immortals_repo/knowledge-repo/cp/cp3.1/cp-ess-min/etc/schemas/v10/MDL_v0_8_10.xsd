<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="xs3p.xsl"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
            xmlns="http://inetprogram.org/projects/MDL" 
            xmlns:mdl="http://inetprogram.org/projects/MDL" 
            xmlns:tmats="https://wsmrc2vger.wsmr.army.mil/rcc/manuals/106-11" 
            targetNamespace="http://inetprogram.org/projects/MDL" 
            elementFormDefault="qualified" attributeFormDefault="unqualified">

  <xsd:import namespace="https://wsmrc2vger.wsmr.army.mil/rcc/manuals/106-11" 
              schemaLocation="Tmats_01-2011.xsd"/>

  <xsd:element name="MDLRoot" type="MDLRootType">

    <xsd:key name="MeasurementKey">
      <xsd:selector xpath=".//mdl:Measurements/mdl:Measurement"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="MeasurementKeyRef" refer="mdl:MeasurementKey">
      <xsd:selector xpath=".//mdl:MeasurementRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:unique name="uniqueDeviceInventoryID">
      <xsd:selector xpath=".//mdl:Device"/>
      <xsd:field xpath="mdl:InventoryID"/>
    </xsd:unique>

    <xsd:unique name="uniqueDerivedUnitSymbol">
      <xsd:selector xpath=".//mdl:Units/mdl:DerivedUnit"/>
      <xsd:field xpath="mdl:Symbol"/>
    </xsd:unique>

    <xsd:unique name="uniqueDerivedUnitName">
      <xsd:selector xpath=".//mdl:Units/mdl:DerivedUnit"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:key name="DerivedUnitKey">
      <xsd:selector xpath=".//mdl:DerivedUnit"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="DerivedUnitKeyRef" refer="mdl:DerivedUnitKey">
      <xsd:selector xpath=".//mdl:UnitsRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="DataStreamKey">
      <xsd:selector xpath=".//mdl:DataStream"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="DataStreamKeyRef" refer="mdl:DataStreamKey">
      <xsd:selector xpath=".//mdl:DataStreamRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="DataOperationKey">
      <xsd:selector xpath=".//mdl:DataOperation"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="DataOperationKeyRef" refer="mdl:DataOperationKey">
      <xsd:selector xpath=".//mdl:DataOperationRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:unique name="uniqueNetworkName">
      <xsd:selector xpath=".//mdl:Network"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:key name="NetworkNodeKey">
      <xsd:selector xpath=".//mdl:NetworkNode"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="NetworkNodeKeyRef" refer="mdl:NetworkNodeKey">
      <xsd:selector xpath=".//mdl:NetworkNodeRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:unique name="uniqueNetworkNodeInventoryID">
      <xsd:selector xpath=".//mdl:NetworkNode"/>
      <xsd:field xpath="mdl:InventoryID"/>
    </xsd:unique>

    <xsd:key name="TmNSManageableAppKey">
      <xsd:selector xpath=".//mdl:TmNSManageableApp"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="TmNSManageableAppKeyRef" refer="mdl:TmNSManageableAppKey">
      <xsd:selector xpath=".//mdl:ManageableAppRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="SSTChannelKey">
      <xsd:selector xpath=".//mdl:Channel"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="SSTChannelKeyRef" refer="mdl:SSTChannelKey">
      <xsd:selector xpath=".//mdl:SSTChannelRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="PortMappingKey">
      <xsd:selector xpath=".//mdl:PortMapping"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="PortMappingKeyRef" refer="mdl:PortMappingKey">
      <xsd:selector xpath=".//mdl:PortMappingRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="PortKey">
      <xsd:selector xpath=".//mdl:Port"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="PortKeyRef" refer="mdl:PortKey">
      <xsd:selector xpath=".//mdl:PortRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="PhysicalNetworkPortKey">
      <xsd:selector xpath=".//mdl:PhysicalNetworkPort"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="PhysicalNetworkPortKeyRef" refer="mdl:PhysicalNetworkPortKey">
      <xsd:selector xpath=".//mdl:PhysicalNetworkPortRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="PackageDefinitionKey">
      <xsd:selector xpath=".//mdl:PackageDefinition"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="PackageDefinitionKeyRef" refer="mdl:PackageDefinitionKey">
      <xsd:selector xpath=".//mdl:PackageDefinitionRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="MessageDefinitionKey">
      <xsd:selector xpath=".//mdl:MessageDefinition"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="MessageDefinitionKeyRef" refer="mdl:MessageDefinitionKey">
      <xsd:selector xpath=".//mdl:MessageDefinitionRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="DataAttributesKey">
      <xsd:selector xpath=".//mdl:DataAttributes"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="DataAttributesKeyRef" refer="mdl:DataAttributesKey">
      <xsd:selector xpath=".//mdl:DataAttributesRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="DataStreamMessageKey">
      <xsd:selector xpath=".//mdl:ARINC429Message | .//mdl:GenericDataStreamMessage | .//mdl:MILSTD1553Message "/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="DataStreamMessageKeyRef" refer="mdl:DataStreamMessageKey">
      <xsd:selector xpath=".//mdl:DataStreamMessageRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="DSCPTableEntryKey">
      <xsd:selector xpath=".//mdl:DSCPTableEntry"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="DSCPTableEntryKeyRef" refer="mdl:DSCPTableEntryKey">
      <xsd:selector xpath=".//mdl:DSCPTableEntryRef | .//mdl:VoiceDSCPTableEntryRef | .//mdl:ControlDSCPTableEntryRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:unique name="uniqueDSCPValue">
      <xsd:selector xpath=".//mdl:DSCPTableEntry"/>
      <xsd:field xpath="mdl:DSCPValue"/>
    </xsd:unique>

    <xsd:unique name="uniqueSupportedMulticastAddress">
      <xsd:selector xpath=".//mdl:SupportedMCA"/>
      <xsd:field xpath="mdl:MulticastAddress"/>
    </xsd:unique>

    <xsd:key name="EventKey">
      <xsd:selector xpath=".//mdl:MessageDefinition | .//mdl:PackageDefinition | .//mdl:Measurements/mdl:Measurement | .//mdl:ReferencedTime"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="EventKeyRef" refer="mdl:EventKey">
      <xsd:selector xpath=".//mdl:EventRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="TimeReferenceKey">
      <xsd:selector xpath=".//mdl:TimeReference"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="TimeReferenceKeyRef" refer="mdl:TimeReferenceKey">
      <xsd:selector xpath=".//mdl:TimeReferenceRef"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="AssociationSourceKey">
      <xsd:selector xpath=".//mdl:TimeReference | .//mdl:TimestampDefinition"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="AssociationSourceRef" refer="mdl:AssociationSourceKey">
      <xsd:selector xpath=".//mdl:AssociationSource"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:key name="AssociationDestinationKey">
      <xsd:selector xpath=".//mdl:NetworkNode | .//mdl:MessageDefinition | .//mdl:PackageDefinition | .//mdl:Measurements/mdl:Measurement"/>
      <xsd:field xpath="@ID"/>
    </xsd:key>
    <xsd:keyref name="AssociationDestinationKeyRef" refer="mdl:AssociationDestinationKey">
      <xsd:selector xpath=".//mdl:AssociationDestination"/>
      <xsd:field xpath="@IDREF"/>
    </xsd:keyref>

    <xsd:unique name="uniqueTestMissionName">
      <xsd:selector xpath=".//mdl:TestMissions/mdl:TestMission"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:unique name="uniqueMeasurementDomainName">
      <xsd:selector xpath=".//mdl:MeasurementDomains/mdl:MeasurementDomain"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:unique name="uniqueMissionSLPName">
      <xsd:selector xpath=".//mdl:MissionQoS/mdl:MissionSLP"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:unique name="uniqueServiceLevelProfileName">
      <xsd:selector xpath=".//mdl:ServiceLevelProfile"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

    <xsd:unique name="uniqueAntennaName">
      <xsd:annotation>
        <xsd:documentation>
          This constraint enforces the rule that an Antenna Name be unique within an MDL file.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:selector xpath=".//mdl:Antenna"/>
      <xsd:field xpath="mdl:Name"/>
    </xsd:unique>

  </xsd:element>

  <xsd:complexType name="MDLRootType">
    <xsd:annotation>
      <xsd:documentation>
        The MDLRoot element is the root element of any MDL Instance Document.
        </xsd:documentation><xsd:documentation>
        All elements in the schema contain optional ReadOnly (type xsd:boolean) and Owner (type xsd:token) 
        elements. The ReadOnly element indicates whether or not its containing element and all its subelements 
        can be modified.  A value of "true" indicates that these elements can not be modified.  Conversely, a 
        value of "false" indicates that these elements can be modified.  The default value of the ReadOnly 
        element is "false".
        </xsd:documentation><xsd:documentation>
        The Owner element, of type xsd:token, is an identifier for the owner or administrator of the containing 
        element in an MDL Instance Document.  The rights and access controls associated with the identified owner 
        will determine the ability of MDL Instance Document editors to modify the containing element and all its 
        subelements. The xsd:token type is derived from xsd:string.  The XML processor will remove line feeds, 
        carriage returns, tabs, leading and trailing spaces, and multiple spaces from xsd:token types.
        </xsd:documentation><xsd:documentation>
        The MDLRoot element contains optional DatabaseID and Checksum elements, both of type xsd:string.  
        The DatabaseID can be used to keep track of which database was used to generate the MDL instance
        document.  The Checksum element contains a single checksum of all elements within the MDLRoot top-level 
        element that follow the Checksum element.  The MDL standard does not currently impose constraints on the
        specific checksum algorithm used.
        </xsd:documentation><xsd:documentation>
        The ConfigurationVersion element, of type xsd:string, describes the unique version number of the MDL instance 
        document.
        </xsd:documentation><xsd:documentation>
        The TestMission element contains the configuration associated with a particular test including the name, 
        description, date time, a list of the participating networks, and the mission-level quality of service 
        configuration.
        </xsd:documentation><xsd:documentation>
        The Units element is a container for all derived units used in describing measurements, data rates, time, etc.
        </xsd:documentation><xsd:documentation>
        The MeasurementDomains element contains a list of MeasurementDomain elements, each of which describes a 
        self-contained set of Measurements, Packages, Messages, and DataStreams.
        </xsd:documentation><xsd:documentation>
        The NetworkDomains element contains a list of Networks and their interconnections that may be included in a 
        TestMission description.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DatabaseID" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Checksum" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ConfigurationVersion" type="xsd:string" minOccurs="0"/>
      <xsd:element name="TestMissions" type="TestMissionsType" minOccurs="0"/>
      <xsd:element name="Units" type="UnitsType" minOccurs="0"/>
      <xsd:element name="MeasurementDomains" type="MeasurementDomainsType" minOccurs="0"/>
      <xsd:element name="NetworkDomains" type="NetworkDomainsType" minOccurs="0"/>
      <xsd:element name="DSCPTable" type="DSCPTableType" minOccurs="0"/>
      <xsd:element name="SupportedMCAs" type="SupportedMCAsType" minOccurs="0"/>
      <xsd:element name="TimeAttributes" type="TimeAttributesType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TestMissionsType">
    <xsd:annotation>
      <xsd:documentation>
        The TestMissions element is the top-level container for an unbounded list of TestMission elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:string" minOccurs="0"/>
      <xsd:element name="TestMission" type="TestMissionType" maxOccurs="unbounded">
        
        <xsd:unique name="uniqueSSTAssociationNameInTestMission">
          <xsd:selector xpath=".//mdl:SSTAssoc"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>

        <xsd:unique name="uniqueRadioAssociationNameInTestMission">
          <xsd:selector xpath=".//mdl:RadioAssoc"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>

        <xsd:unique name="uniqueRFNMAssociationNameInTestMission">
          <xsd:selector xpath=".//mdl:RFNMAssoc"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>

      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TestMissionType">
    <xsd:annotation>
      <xsd:documentation>
        The TestMission element describes things that are specific to a test.  This varies dramatically from range to
        range.  MDL allows range policy to use TestMission to meet their needs. Precise use of TestMission will not be
        standardized until commonality among ranges is established.  Every TestMission element shall contain a Name
        element, of type xsd:token, that shall be unique within an MDL instance document.  The XML processor will remove
        line feeds, carriage returns, tabs, leading and trailing spaces, and multiple spaces from all elements of type
        xsd:token.
      </xsd:documentation><xsd:documentation>
        The TmNSCompleteness element, of type xsd:boolean, describes whether or not the containing 
        TestMission element is a complete description of a test mission.
      </xsd:documentation><xsd:documentation>
        The TmNSCompletenessDescription element, of type xsd:string, describes the degree of coverage of the 
        containing TestMission element.  The measure of coverage is with respect to the completeness 
        of the description of a TestMission in an MDL Instance Document.  The criteria against which 
        completeness is measured are context-dependent. 
      </xsd:documentation><xsd:documentation>
        The NetworkReferences element contains a list of NetworkRef elements that indicate which Networks are 
        participating in the TestMission.
      </xsd:documentation><xsd:documentation>
        The StartDateTime and StopDateTime elements, of type xsd:dateTime, may be used to describe the start and end 
        dates and times for the test.
      </xsd:documentation><xsd:documentation>
        The MissionQoS element is used to describe the mission-level quality of service parameters associated with 
        the TestMission.
      </xsd:documentation><xsd:documentation>
        The AssetAssociations element is used to describe the logical associations between ground and test article radio 
        and SST elements for a particular test mission.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TmNSCompleteness" type="xsd:boolean"/>
      <xsd:element name="TmNSCompletenessDescription" type="xsd:string"/>
      <xsd:element name="NetworkReferences" type="NetworkReferencesType"/>
      <xsd:element name="StartDateTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="StopDateTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="MissionQoS" type="MissionQoSType" minOccurs="0"/>
      <xsd:element name="AssetAssociations" type="AssetAssociationsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
      
  <xsd:complexType name="MissionQoSType">
    <xsd:annotation>
      <xsd:documentation>
        The MissionQoS element contains mission-level Quality of Service descriptions for a particular test mission.  
        The MissionQoS element contains a list of zero or more MissionSLP elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="MissionSLP" type="MissionSLPType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MissionSLPType">
    <xsd:annotation>
      <xsd:documentation>
        The MissionSLP element (or Mission Service Level Profile) describes the high-level, mission-specific data
        delivery requirements and constraints that will be provided by the Radio Access Network for a given test
        mission.  There may be more than one MissionSLP element defined per test mission, depending on the needs of the
        test.  For example, a test mission defining a relay platform will contain a MissionSLP element to define the
        data delivery needs for the relay itself and a MissionSLP element to define the data delivery needs of the data
        being relayed.
      </xsd:documentation><xsd:documentation>
      Every MissionSLP element shall contain a Name element that shall be unique within the MDLRoot element.  The Name
      element is used to uniquely identify a MissionSLP. This identifier should be unique across all Ranges that
      reference the MissionSLP.  For example, the MissionSLP Name of a test mission that will be handed off from one
      range to another should be unique with respect to any other MissionSLP Names in use by either range.
      </xsd:documentation><xsd:documentation>
      The Description element is used as a human-readable description of the MissionSLP.
      </xsd:documentation><xsd:documentation>
      The StartDateTime and StopDateTime elements specify a time window over which the test is configured to take
      place and over which services will be provided. Parameters affecting data delivery characteristics may be
      adjusted (by either the Radio Access Network or the test management) over this time window.
      </xsd:documentation><xsd:documentation>
      The Priority element specifies a value for the overall numerical priority ranking that applies to this test, as
      compared to other ongoing tests competing for network resources.  This is the 'collective' priority of
      everything defined in this MissionSLP with respect any other MissionSLP defined for this or any other test.
      </xsd:documentation><xsd:documentation>
      The MinimumCapacity element specifies the minimum amount of dedicated network capacity (measured in bits per
      second) to be held in reserve at all times for this test mission. As network usage varies, capacity allocated to
      but unused by one test can be shared with other tests in a flexible manner. MinimumCapacity indicates the amount
      of capacity that shall not be shared with other tests and is always immediately available. MinimumCapacity can
      be specified independently for both the uplink and downlink.
      </xsd:documentation><xsd:documentation>
      The CapacityAllocation element specifies the nominal portion of the overall network capacity (measured in bits
      per second) to be allocated for all data associated with this test under steady state conditions. 
      CapacityAllocation can be specified independently for both the uplink and downlink. Excess capacity allocated 
      for but unused by a test at any given time can be reallocated by Link Management to satisfy excess demand of 
      other tests. Likewise, an instantaneous need for capacity beyond this nominal allocation, e.g., due to 
      unforeseen traffic bursts, can be satisfied using any available excess capacity from other tests. The value for
      CapacityAllocation shall equal or exceed the value for MinimumCapacity. CapacityAllocation can be specified
      independently for both the uplink and downlink.
      </xsd:documentation><xsd:documentation>
      The ServiceLevelProfiles element is a container that holds ServiceLevelProfile information that defines a
      hierarchy of Radio Bearers for this MissionSLP.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string"/>
      <xsd:element name="StartDateTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="StopDateTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="Priority" type="xsd:unsignedLong"/>
      <xsd:element name="MinimumCapacity" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="CapacityAllocation" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="ServiceLevelProfiles" type="ServiceLevelProfilesType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MissionSLPRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a MissionSLPRefType must refer to the ID attribute of a MissionSLPType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="ServiceLevelProfilesType">
    <xsd:annotation>
      <xsd:documentation>
        The ServiceLevelProfiles contains a list of one or more ServiceLevelProfile elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ServiceLevelProfile" type="ServiceLevelProfileType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ServiceLevelProfileType">
    <xsd:annotation>
      <xsd:documentation>
        The ServiceLevelProfile element represents the collection of parameters that define the specific services to be
        provided by each Radio bearer in the Radio Access Network (see Radio Bearer definition below). A
        ServiceLevelProfile is primarily an RF Network Management construct used for configuration and coordination of
        low-level network services and data delivery functionality.
      </xsd:documentation><xsd:documentation>
      A Radio bearer represents the collection of services provided by the Radio Access Network to transfer data
      between the vehicle network and the ground network. A service is the collection of all means and facilities
      provided by the network to allow communication across the network.  Radio bearers are used to organize the
      establishment and management of data transfers across the RAN segment so that appropriate QoS requirements can
      be supported.
      </xsd:documentation><xsd:documentation>
      The Name element is used to uniquely identify a ServiceLevelProfile.  The Name element shall be unique within
      the MDLRoot element and should be locally unique within a Range and globally unique across all Ranges.
      </xsd:documentation><xsd:documentation>
      The Description element is a human-readable textual description of the bearer this ServiceLevelProfile
      describes, intended for display.
      </xsd:documentation><xsd:documentation>
      The TrafficID element is used as a flexible means of identifying and associating specific network packets with
      the bearer described by this ServiceLevelProfile. This will typically be some field or fields within the packet
      headers, including (but not limited to) IP source/destination address and port values, DiffServ codepoints, and
      MPLS (Multiprotocol Label Switching) tags.  The syntax used by TrafficID is currently TBD but is anticipated to
      follow a convention similar to libpcap packet filtering rules.
      </xsd:documentation><xsd:documentation>
      The StartDateTime and StopDateTime elements specify a time window over which the services defined by this
      ServiceLevelProfile will be provided.
      </xsd:documentation><xsd:documentation>
      The SourceRadioRef and DestinationRadioRef elements, of type mdl:ManageableAppRef, specify the Radio Link that
      is to be used for the service specified by this ServiceLevelProfile.
      </xsd:documentation><xsd:documentation>
      The IngressEgressPoints element defines the points at which test data enters and leaves the Radio Access Network
      from both the uplink and downlink perspectives. There may be any number of such points, depending upon the
      complexity of the test and the nature of the services. Ingress and Egress points may be described by
      combinations of physical interface designations as well as associated MAC and/or IP addressing information.  The
      intention of IngressEgressPoints is to define the scope of the ServiceLevelProfile - the ServiceLevelProfile has
      meaning between the ingress point and the egress point.
      </xsd:documentation><xsd:documentation>
      The CommittedInformationRate element (or CIR), of type mdl:ValueUnitsType, specifies the traffic rate
      (measured in bits per second) which the RF Network will accommodate over the specified period of time. In some
      services, the RF Network will accept excess traffic and attempt to deliver it if excess capacity is
      available. In other services, the RF Network will mark and reject traffic in excess of this rate. The packets
      marked as excess could be dropped by downstream network elements (based on its respective drop criteria) if they
      experience congestion at their output ports.
      </xsd:documentation><xsd:documentation>
      The PeakInformationRate element (or PIR), of type mdl:ValueUnitsType, specifies a value (measured in bits
      per second) that can be used by itself or in conjunction with CIR, to indicate a traffic rate above the level of
      the CIR which can be generated by the application (user) for some agreed upon burst period or for some percent
      of the time the user is entitled to the CIR. This information may be used by the queue mechanisms or Link
      Management packet schedulers to optimize performance.
      </xsd:documentation><xsd:documentation>
      The CommittedBurstSize element (or CBS), of type mdl:ValueUnitsType, indicates the largest burst size
      (measured in bytes) that should be expected as output from the source application. This information may be used
      by the queue mechanisms or Link Management packet scheduler in conjunction with CIR or PIR to optimize
      performance.
      </xsd:documentation><xsd:documentation>
      The AllowableTraffic element, of type mdl:ValueUnitsType, specifies a limit to the amount of traffic
      (measured in bytes) the user can send during Radio bearer duration. Traffic above this amount can be rejected by
      the RF Network.
      </xsd:documentation><xsd:documentation>
      Parameters and constraints associated with Quality of Service are defined by one or more of the following
      elements: AveragePacketDelay, Jitter, Priority, DropCriteria.
      </xsd:documentation><xsd:documentation>
      The AveragePacketDelay element, of type mdl:ValueUnitsType, specifies the latency (measured in seconds) of
      the packet traversing the Radio Access Network.
      </xsd:documentation><xsd:documentation>
      The Jitter element, of type mdl:ValueUnitsType, specifies the allowed variation of packet delay (measured in
      seconds) measured over some period of time.
      </xsd:documentation><xsd:documentation>
      The Priority element is a numerical specification of the importance of the packets serviced by this bearer in
      relation to that of others defined in this ServiceLevelProfile hierarchy.
      </xsd:documentation><xsd:documentation>
      The DropCriteria element is a description of the manner in which packets associated with this bearer should be
      discarded from the queues when allocated capacity has been reached. Algorithms like Random Early Discard (RED)
      or Weighted RED, among others, and their associated parameters, are used to control the dropping/discarding of
      the packets.
      </xsd:documentation><xsd:documentation>
      The ServiceLevelProfiles element is a container that holds additional ServiceLevelProfile information associated
      with this 'parent' ServiceLevelProfile and may be used to describe a hierarchy of service level profiles.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string"/>
      <xsd:element name="TrafficID" type="TrafficIDType"/>
      <xsd:element name="Priority" type="xsd:unsignedLong"/>
      <xsd:element name="StartDateTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="StopDateTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="SourceRadioRef" type="ManageableAppRefType"/>
      <xsd:element name="DestinationRadioRef" type="ManageableAppRefType"/>
      <xsd:element name="IngressEgressPoints" type="xsd:string" minOccurs="0"/> <!--TBD define this-->
      <xsd:element name="ARQEnabled" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="ARQBlockTime" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="CommittedInformationRate" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="PeakInformationRate" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="CommittedBurstSize" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="AllowableTraffic" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="AveragePacketDelay" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="Jitter" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="DropCriteria" type="xsd:string" minOccurs="0"/> <!--TBD define this-->
      <xsd:element name="ServiceLevelProfiles" type="ServiceLevelProfilesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="SLPRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a SLPRef must refer to the ID attribute of a ServiceLevelProfileType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TrafficIDType">
    <xsd:annotation>
      <xsd:documentation>
        The TrafficID element describes the attributes which will be used to uniquely identify the data
        traffic associated with a particular ServiceLevelProfile.  The DSCPTableEntryRef refers to the DSCPTableEntry 
        that describes the DSCP markings of the IP packets.  The Other element may be used to describe traffic 
        identification techniques in a non-standard form.  The formatting of the Other element is not specified by the 
        standard and may be removed pending future decisions.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DSCPTableEntryRef" type="DSCPTableEntryRefType"/>
      <xsd:element name="Other" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AssetAssociationsType">
    <xsd:annotation>
      <xsd:documentation>
        The AssetAssociations element is used to describe the logical associations between ground and test article radio 
        and SST elements for a particular test mission.
      </xsd:documentation><xsd:documentation>
        The SSTAssoc element, of type AssetAssociationType, represents a logical association between an SST receiver and 
        transmitter.
      </xsd:documentation><xsd:documentation>
        The RadioAssoc element, of type AssetAssociationType, represents a logical association of TmNSRadio components, 
        whether on the ground or on the test article.
      </xsd:documentation><xsd:documentation>
        The RFNMAssoc element, of type AssetAssociationType, represents a logical association of ground and test article 
        based RFNM components in the radio access network.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="SSTAssoc" type="SSTAssociationType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="RadioAssoc" type="AssetAssociationType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="RFNMAssoc" type="AssetAssociationType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AssetAssociationType">
    <xsd:annotation>
      <xsd:documentation>
        The AssetAssociation element is used to describe a logical association between ground and test article radio 
        and SST elements for a particular test mission.
      </xsd:documentation><xsd:documentation>
        The Name element, of type xsd:token, is a human-readable name for the AssetAssociation.  The Name element shall be 
        unique within a TestMission.
      </xsd:documentation><xsd:documentation>
        The Description element, of type xsd:string, is a text description of the association.
      </xsd:documentation><xsd:documentation>
        The Active element, of type xsd:boolean, describes whether or not the association is active.
      </xsd:documentation><xsd:documentation>
        The ManageableAppRef elements, of tyep ManageableAppRefType, contain references to the associated elements.  An 
        AssetAssociation contains two or more ManageAppRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Active" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="ManageableAppRef" type="ManageableAppRefType" minOccurs="2" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SSTAssociationType">
    <xsd:annotation>
      <xsd:documentation>
        The SSTAssociation element is used to describe a logical association between ground and test article SST elements 
        for a particular test mission.
      </xsd:documentation><xsd:documentation>
        The Name element, of type xsd:token, is a human-readable name for the SSTAssociation.  The Name element shall be 
        unique within a TestMission.
      </xsd:documentation><xsd:documentation>
        The Description element, of type xsd:string, is a text description of the association.
      </xsd:documentation><xsd:documentation>
        The Active element, of type xsd:boolean, describes whether or not the association is active.
      </xsd:documentation><xsd:documentation>
        The SSTChannelRef elements, of type SSTChannelRefType, contain references to the Channel elements within TmNSSSTRx
        and TmNSSSTTx elements.  An SSTAssociation contains two or more SSTChannelRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Active" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="SSTChannelRef" type="SSTChannelRefType" minOccurs="2" maxOccurs="2"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="UnitsType">
    <xsd:annotation>
      <xsd:documentation>
        The Units element is the top-level container for an unbounded list of DerivedUnits.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DerivedUnit" type="DerivedUnitType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="UnitsRefType">
    <xsd:annotation>
      <xsd:documentation>
        The UnitsRef element contains an IDREF attribute that shall refer to the ID attribute of a DerivedUnit.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="UnitsChoiceType">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:UnitsChoiceType is used in the InputUnits and OutputUnits elements to allow the element to contain
        either a UnitsRef element or an SIUnits element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:choice>
      <xsd:element name="UnitsRef" type="UnitsRefType"/>
      <xsd:element name="SIUnits" type="SIUnitsEnum"/>
    </xsd:choice>
  </xsd:complexType>

  <xsd:simpleType name="SIUnitsEnum">
    <xsd:annotation>
      <xsd:documentation>
        The SIUnits element is an enumeration that can be set to the following list of standard SI units.  
        The value "Unitless" should be used for a fractional term that has no units.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Ampere"/>
      <xsd:enumeration value="Becquerel"/>
      <xsd:enumeration value="Bit"/>
      <xsd:enumeration value="Byte"/>
      <xsd:enumeration value="BitPerSecond"/>
      <xsd:enumeration value="Candela"/>
      <xsd:enumeration value="Coulomb"/>
      <xsd:enumeration value="CoulombPerCubicMeter"/>
      <xsd:enumeration value="CoulombPerSquareMeter"/>
      <xsd:enumeration value="CoulomPerKilogram"/>
      <xsd:enumeration value="Counts"/>
      <xsd:enumeration value="CubicMeter"/>
      <xsd:enumeration value="dB"/>
      <xsd:enumeration value="dBm"/>
      <xsd:enumeration value="Farad"/>
      <xsd:enumeration value="FaradPerMeter"/>
      <xsd:enumeration value="Gray"/>
      <xsd:enumeration value="GrayPerSecond"/>
      <xsd:enumeration value="Henry"/>
      <xsd:enumeration value="HenryPerMeter"/>
      <xsd:enumeration value="Hertz"/>
      <xsd:enumeration value="Joule"/>
      <xsd:enumeration value="JoulePerCubicMeter"/>
      <xsd:enumeration value="JoulePerKelvin"/>
      <xsd:enumeration value="JoulePerKilogram"/>
      <xsd:enumeration value="JoulePerKilogramKelvin"/>
      <xsd:enumeration value="JoulePerMole"/>
      <xsd:enumeration value="JoulePerMoleKelvin"/>
      <xsd:enumeration value="Katal"/>
      <xsd:enumeration value="KatalPerCubicMeter"/>
      <xsd:enumeration value="Kelvin"/>
      <xsd:enumeration value="Kilogram"/>
      <xsd:enumeration value="Lumen"/>
      <xsd:enumeration value="Lux"/>
      <xsd:enumeration value="Meter"/>
      <xsd:enumeration value="MeterPerSecond"/>
      <xsd:enumeration value="MeterPerSecondSquared"/>
      <xsd:enumeration value="Mole"/>
      <xsd:enumeration value="Newton"/>
      <xsd:enumeration value="NewtonMeter"/>
      <xsd:enumeration value="Ohm"/>
      <xsd:enumeration value="Pascal"/>
      <xsd:enumeration value="Radian"/>
      <xsd:enumeration value="RadianPerSecond"/>
      <xsd:enumeration value="RadianPerSecondSquared"/>
      <xsd:enumeration value="Second"/>
      <xsd:enumeration value="Siemens"/>
      <xsd:enumeration value="Sievert"/>
      <xsd:enumeration value="SquareMeter"/>
      <xsd:enumeration value="Steradian"/>
      <xsd:enumeration value="Tesla"/>
      <xsd:enumeration value="Unitless"/>
      <xsd:enumeration value="Volt"/>
      <xsd:enumeration value="VoltPerMeter"/>
      <xsd:enumeration value="Watt"/>
      <xsd:enumeration value="WattPerMeterKelvin"/>
      <xsd:enumeration value="WattPerSquareMeter"/>
      <xsd:enumeration value="WattPerSquareMeterSteradian"/>
      <xsd:enumeration value="WattPerSteradian"/>
      <xsd:enumeration value="Weber"/>
      <xsd:enumeration value="Word16"/>
      <xsd:enumeration value="Word32"/>
      <xsd:enumeration value="Word64"/>
      
      <xsd:enumeration value="Knots"/>
      <xsd:enumeration value="Degree"/>
      <xsd:enumeration value="DegreePerSecond"/>
      <xsd:enumeration value="Feet"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="DerivedUnitType">
    <xsd:annotation>
      <xsd:documentation>
        The DerivedUnit element describes a unit of measure in terms of fractional expressions consisting 
        of standard units of measure.  Each DerivedUnit element description can contain a name, symbol and 
        additional details of the meaning of the unit of measure.  The terms of the numerator and 
        denominator of a DerivedUnit element can be assigned units from the International System of Units 
        (SIUnits) or other previously defined DerivedUnit elements. 
      </xsd:documentation><xsd:documentation>

        The Symbol element, of type xsd:token, describes a textual symbol associated with the unit of 
        measure defined by the containing DerivedUnit element.  Common examples include "J" for Joule and 
        "N" for Newton.  The Symbol is a required element and must be unique across all DerivedUnit Symbols in 
        the MDLRoot element. The Name is a required element and must be unique across all DerivedUnit Names in the 
        MDLRoot element. The XML processor will remove line feeds, carriage returns, tabs, leading and trailing 
        spaces, and multiple spaces from all elements of type xsd:token.
      </xsd:documentation><xsd:documentation>

        DerivedUnit elements shall not be created to redefine or replace existing SIUnits definitions.
        DerivedUnit elements should use as few SIUnits as possible to achieve the required result.  For example, 
        if units of degrees per second squared is required, the derived unit should be based on the RadianPerSecondSquared 
        SIUnit rather than using the Radian SIUnit and the Second SIUnit
      </xsd:documentation><xsd:documentation>

        The AddedConstant element, of type xsd:double, describes a constant value to be added to the 
        fraction described by the UnitsNumerator and UnitsDenominator elements.
      </xsd:documentation><xsd:documentation>

        The UnitsNumerator and UnitsDenominator elements are of type mdl:UnitsTermType.  The described DerivedUnit 
        is evaluated as the result of dividing the product of all UnitsNumerator units by the product of all 
        UnitsDenominator units.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="Symbol" type="xsd:token"/>
      <xsd:element name="UnitsNumerator" type="UnitsTermType" maxOccurs="unbounded"/>
      <xsd:element name="UnitsDenominator" type="UnitsTermType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="AddedConstant" type="xsd:double" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="UnitsTermType">
    <xsd:annotation>
      <xsd:documentation>
        The UnitsTermType is a container for a scalar multiplier (NumericalConstant) and an SIUnits or a 
        UnitsRef to a previously created DerivedUnit.  As an example, millimeters (mm) can be represented 
        by the numerical constant 0.001 multiplied by the SI unit meter.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="NumericalConstant" type="xsd:double"/>
      <xsd:choice>
        <xsd:element name="UnitsRef" type="UnitsRefType"/>
        <xsd:element name="SIUnits" type="SIUnitsEnum"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementDomainsType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementDomains element contains a list of zero or more MeasurementDomain elements
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="MeasurementDomain" type="MeasurementDomainType" maxOccurs="unbounded">

        <xsd:key name="PCMMeasurementKey">
          <xsd:selector xpath=".//tmats:PCMMeasurements/tmats:MeasurementList/tmats:Measurement"/>
          <xsd:field xpath="@Name"/>
        </xsd:key>
        <xsd:keyref name="PCMMeasurementKeyRef" refer="mdl:PCMMeasurementKey">
          <xsd:selector xpath=".//mdl:PCMMeasurementRef"/>
          <xsd:field xpath="@NameRef"/>
        </xsd:keyref>

        <xsd:unique name="uniquePackageDefinitionID">
          <xsd:selector xpath=".//mdl:Packages/mdl:PackageDefinition"/>
          <xsd:field xpath="mdl:PackageDefinitionID"/>
        </xsd:unique>

        <xsd:unique name="uniqueMessageDefinitionID">
          <xsd:selector xpath=".//mdl:Messages/mdl:MessageDefinition"/>
          <xsd:field xpath="mdl:MessageDefinitionID"/>
        </xsd:unique>

        <xsd:unique name="uniqueMeasurementID">
          <xsd:selector xpath=".//mdl:Measurements/mdl:Measurement"/>
          <xsd:field xpath="mdl:MeasurementID"/>
        </xsd:unique>

        <xsd:unique name="uniqueMeasurementName">
          <xsd:selector xpath=".//mdl:Measurements/mdl:Measurement"/>
          <xsd:field xpath="mdl:Name"/>
        </xsd:unique>

        <xsd:key name="PackageStructureKey">
          <xsd:selector xpath=".//mdl:PackageStructure"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PackageStructureKeyRef" refer="mdl:PackageStructureKey">
          <xsd:selector xpath=".//mdl:PackageStructureRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="PackageDataFieldSetKey">
          <xsd:selector xpath=".//mdl:PackageDataFieldSet"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PackageDataFieldSetKeyRef" refer="mdl:PackageDataFieldSetKey">
          <xsd:selector xpath=".//mdl:PackageDataFieldSetRef | .//OffsetFromPackageDataFieldSet"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="PackageDataFieldKey">
          <xsd:selector xpath=".//mdl:PackageDataField"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PackageDataFieldKeyRef" refer="mdl:PackageDataFieldKey">
          <xsd:selector xpath=".//mdl:PackageDataFieldRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="PackageDefinitionInMeasDomainKey">
          <xsd:selector xpath=".//mdl:PackageDefinition"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PackageDefinitionInMeasDomainKeyRef" refer="mdl:PackageDefinitionInMeasDomainKey">
          <xsd:selector xpath=".//mdl:PackageDefinitionRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="DataAttributesInMeasDomainKey">
          <xsd:selector xpath=".//mdl:DataAttributes"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="DataAttributesInMeasDomainKeyRef" refer="mdl:DataAttributesInMeasDomainKey">
          <xsd:selector xpath=".//mdl:DataAttributesRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="MeasurementInMeasDomainKey">
          <xsd:selector xpath=".//mdl:Measurements/mdl:Measurement"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="MeasurementInMeasDomainKeyRef" refer="mdl:MeasurementInMeasDomainKey">
          <xsd:selector xpath=".//mdl:MeasurementRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="FieldLocationKey">
          <xsd:selector xpath=".//mdl:FieldLocation"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="FieldLocationKeyRef" refer="mdl:FieldLocationKey">
          <xsd:selector xpath=".//mdl:FieldLocationRef | .//OffsetFromLocation"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="MethodKey">
          <xsd:selector xpath=".//mdl:Method"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="MethodKeyRef" refer="mdl:MethodKey">
          <xsd:selector xpath=".//mdl:MethodRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="DataStreamMessageInDomainKey">
          <xsd:selector xpath=".//mdl:ARINC429Message | .//mdl:GenericDataStreamMessage | .//mdl:MILSTD1553Message "/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="DataStreamMessageInDomainKeyRef" refer="mdl:DataStreamMessageInDomainKey">
          <xsd:selector xpath=".//mdl:DataStreamMessageRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementDomainType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementDomain element contains the descriptions of Measurements, Packages, Messages, DataStreams and 
        associated DataOperations to be used in a TmNS system.  Each MeasurementDomain shall be completely 
        self-contained, meaning, for example, that a Message shall contain only Packages from the same MeasurementDomain 
        and a Package shall contain only Measurements from the same MeasurementDomain.  Every MeasurementDomain shall 
        contain a Name element that shall be unique within an MDL instance document.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="Measurements" type="MeasurementsType" minOccurs="0"/>
      <xsd:element name="Packages" type="PackagesType" minOccurs="0"/>
      <xsd:element name="Messages" type="MessagesType" minOccurs="0"/>
      <xsd:element name="DataStreams" type="DataStreamsType" minOccurs="0"/>
      <xsd:element name="DataOperations" type="DataOperationsType" minOccurs="0"/>
      <xsd:element name="DataAttributesDescriptions" type="DataAttributesDescriptionsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementsType">
    <xsd:annotation>
      <xsd:documentation>
        The Measurements element in a MeasurementDomain element is a container for zero or more Measurement elements.
      </xsd:documentation><xsd:documentation>
        A Measurement element provides a description of the realization of a measurement type for a
        configuration of a Test Article.  The Measurement element acts as a starting point to begin describing
        the steps and their resulting intermediate forms of a measurement that will result in the publishing of
        measurement data on the network.  Specific elements and attributes are included to describe both the analog
        and digital properties of the Measurement element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Measurement" type="MeasurementType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementType">
    <xsd:annotation>
      <xsd:documentation>
        The Measurement element provides a description of a measurement type present in the configuration of 
        a Test Article.  Measurements are related to physical phenomena that occur on a Test Article.  The 
        Measurement element is a general description of the properties of a measurement type that will 
        potentially be realized as measurement data that is contained in TmNSDataMessages.       
      </xsd:documentation><xsd:documentation>
        The properties of a Measurement element describe both the design requirements and the resulting 
        implementation details (on the "as-built" system) of a described measurement type.  Specific elements 
        and attributes are included to describe both the analog and digital properties of the Measurement elements.  
      </xsd:documentation><xsd:documentation>
        The Name element of the Measurement describes the mnemonic for the Measurement element.  The value of the 
        Name element of the Measurement shall be unique within a scope that is user-specified.  Because the scope 
        is user-specified, there is no constraint in the MDL schema to enforce uniqueness.  The XML processor will 
        remove line feeds, carriage returns, tabs, leading and trailing spaces, and multiple spaces from the Name 
        element.
      </xsd:documentation><xsd:documentation>
        The MeasurementID is a unique 32-bit value per the iNET standards.  The scope of uniqueness is the 
        MeasurementDomain.
      </xsd:documentation><xsd:documentation>
        The MeasurementType element indicates the type of measurement being described and can be set to one of the
        following values: "Analog", "Discrete", "DigitalBus", "Computed"
      </xsd:documentation><xsd:documentation>
        The MeasurementActive element indicates if a Measurement is to be acquired in the configuration specified 
        by the MDL Instance Document.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="MeasurementID" type="ThirtyTwoBit"/>
      <xsd:element name="MeasurementType" type="MeasurementTypeEnum"/>
      <xsd:element name="MeasurementActive" type="xsd:boolean"/>
      <xsd:element name="DeliveryClass" type="DeliveryClassEnum"/>
      <xsd:element name="Requirements" type="RequirementsType" minOccurs="0"/>
      <xsd:element name="Implementation" type="ImplementationType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MeasurementRefType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementRef element contains an IDREF attribute, of type xsd:IDREF, that shall reference the ID 
        attribute of a Measurement element. 
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="RequirementsType">
    <xsd:annotation>
      <xsd:documentation>
        The Requirements element describes the design requirements of a measurement type on a Test Article.  
        These descriptions do not reflect the implemented, or "as-built", system.  The Requirements element 
        contains the same elements and attributes as the DataAttributes element, but the Requirements element 
        is extended with the MeasurementSource element and the MeasurementSink element.
      </xsd:documentation><xsd:documentation>
        The MeasurementSource element describes both the NetworkNode that publishes the measurement data of the 
        described Measurement element on the network and the location from which the described measurement is taken.
        The PCMMeasurementRef is used for TMATS-described PCM stream measurements to indicate the source of the bus 
        measurement. 
      </xsd:documentation><xsd:documentation>
        The UnitsRef and SIUnits elements describe the units of measure for the Measurement.
      </xsd:documentation><xsd:documentation>
        The UnitsConversions element, of type UnitsConversionsType, describes the operations that must be perfomed to 
        convert a counts value into Instrumentation or Engineering Units.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="DataAttributesRef" type="DataAttributesRefType" minOccurs="0"/>
      <xsd:element name="PCMMeasurementRef" type="PCMMeasurementRefType" minOccurs="0"/>
      <xsd:element name="MeasurementSource" type="MeasurementSourceType" minOccurs="0"/>
      <xsd:element name="MeasurementSink" type="MeasurementSinkType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:choice minOccurs="0">
        <xsd:element name="UnitsRef" type="UnitsRefType"/>
        <xsd:element name="SIUnits" type="SIUnitsEnum"/>
      </xsd:choice>
      <xsd:element name="UnitsConversions" type="UnitsConversionsType" minOccurs="0"/>
      <xsd:element name="Uncertainty" type="UncertaintyType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="AnalogAttributes" type="AnalogAttributesType" minOccurs="0"/>
      <xsd:element name="DigitalAttributes" type="DigitalAttributesType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ImplementationType">
    <xsd:annotation>
      <xsd:documentation>
        The Implementation element describes the data properties of the measurement for the "as-built" system in a 
        configuration on a Test Article.  The Implementation element contains the same elements and attributes as the 
        DataAttributes element, but the Implementation element is extended with the MeasurementSource element and the 
        MeasurementSink element.  The PCMMeasurementRef is used for TMATS-described PCM stream measurements to indicate 
        the source of the bus measurement. 
      </xsd:documentation><xsd:documentation>
        The UnitsRef and SIUnits elements describe the units of measure for the Measurement.
      </xsd:documentation><xsd:documentation>
        The UnitsConversions element, of type UnitsConversionsType, describes the operations that must be perfomed to 
        convert a counts value into Instrumentation or Engineering Units.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="DataAttributesRef" type="DataAttributesRefType" minOccurs="0"/>
      <xsd:element name="PCMMeasurementRef" type="PCMMeasurementRefType" minOccurs="0"/>
      <xsd:element name="MeasurementSource" type="MeasurementSourceType"/>
      <xsd:element name="MeasurementSink" type="MeasurementSinkType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:choice minOccurs="0">
        <xsd:element name="UnitsRef" type="UnitsRefType"/>
        <xsd:element name="SIUnits" type="SIUnitsEnum"/>
      </xsd:choice>
      <xsd:element name="UnitsConversions" type="UnitsConversionsType" minOccurs="0"/>
      <xsd:element name="Uncertainty" type="UncertaintyType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="AnalogAttributes" type="AnalogAttributesType" minOccurs="0"/>
      <xsd:element name="DigitalAttributes" type="DigitalAttributesType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackagesType">
    <xsd:annotation>
      <xsd:documentation>
        The Packages element in a MeasurementDomain element is a container for zero or more PackageDefinition
        elements and zero or more PackageStructure elements.        
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="PackageDefinition" type="PackageDefinitionType" minOccurs="0" maxOccurs="unbounded">
        <xsd:unique name="uniquePCMMinorFrameIndex">
          <xsd:selector xpath="mdl:PCMMinorFrame"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="PackageStructure" type="PackageStructureType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageDefinitionType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageDefinition element describes a Package type, which is identified by the PackageDefinitionID (PDID). 
        The value of the PackageDefinitionID shall be unique among all PackageDefinitionIDs within a MeasurementDomain.
        The StandardPackageHeader element, of type xsd:boolean, indicates whether or not this Package type includes 
        the standard package header (see the Test Article Standard).
        The referenced PackageStructure element provides the description of the PackageStructure for this Package type.
        TBD TimingRelationships or TimingRelationshipRef, or ...
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PackageDefinitionID" type="ThirtyTwoBit"/>
      <xsd:element name="StandardPackageHeader" type="xsd:boolean"/>
      <xsd:element name="PackageHeaderDefinition" type="PackageHeaderDefinitionType" minOccurs="0"/>
      <xsd:choice>
        <xsd:sequence>
          <xsd:element name="PackageStructureRef" type="PackageStructureRefType"/>
          <xsd:element name="DataMap" type="DataMapType" minOccurs="0"/>
        </xsd:sequence>
        <xsd:sequence>
          <xsd:element name="DataStreamRef" type="DataStreamRefType"/>
          <xsd:choice minOccurs="0">
            <xsd:element name="DataStreamMessageRef" type="DataStreamMessageRefType" maxOccurs="unbounded"/>
            <xsd:element name="PCMMinorFrame" type="PCMMinorFrameType" maxOccurs="unbounded"/>
          </xsd:choice>
        </xsd:sequence>
      </xsd:choice>
      <xsd:element name="AggregateRate" type="AggregateRateType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TimingRelationships" type="TimingRelationshipsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageDefinitionRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a PackageDefinitionRef must refer to the ID attribute of a PackageDefinition within the 
        same MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageHeaderDefinitionType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageHeaderDefinition element describes the set of data fields that make up a
        package header and the data that gets mapped to these data fields.  The PackageHeaderDefinition element is
        not required when the defined Package includes the standard package header.  When the standard
        package header is not used, the PackageHeaderDefinition element can be used to describe the makeup of the
        package header and the sources of the data that populates the package fields of the package header.
      </xsd:documentation><xsd:documentation>
        The DataMap element describes the mapping of digital data to the package fields defined by the 
        PackageHeaderStructure element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="PackageHeaderStructure" type="PackageHeaderStructureType" minOccurs="0"/>
      <xsd:element name="DataMap" type="DataMapType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageHeaderStructureType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageHeaderStructure element describes the set of package fields that make up the package header and 
        can carry data.  The fields do not need to cover all bits in a package header, and the fields may overlap.
      </xsd:documentation><xsd:documentation>
        The PDIDFieldDescription element is derived from the PackageField element; therefore, it contains a
        FieldLocation element and a FieldEncoding element.  The PDIDFieldDescription element describes the
        PackageField in a package header that shall contain the PDID (i.e. the PackageDefinitionID field from the
        Test Article Standard).  The PDIDFieldDescription element shall not be used when using the standard
        package header.
      </xsd:documentation><xsd:documentation>
        The StatusFlagFields element describes the set of package fields within a package header that contain the
        StatusFlags field (see the Test Article Standard).  Although the StatusFlags field is considered a single field
        in the standard package header, the StatusFlagFields element can describe each individual status flag in both its
        structure and content.  The StatusFlagFields element can be used when using the standard package header to
        provide specific descriptions for each individual flag for this Package type.
      </xsd:documentation><xsd:documentation>
        The NonTmNSPackageHeaderFieldDescription element is derived from the mdl:FieldDescriptionsType element; therefore,
        it contains a FieldLocation element and a FieldEncoding element.  The NonTmNSPackageHeaderFieldDescription
        element describes a PackageField in a package header that is not defined by the standard package header (see the
        Test Article Standard).  The NonTmNSPackageHeaderFieldDescription element shall not be used when using the
        standard package header.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="PDIDFieldDescription" type="PackageDataFieldType" minOccurs="0"/>
      <xsd:element name="PackageLengthField" type="PackageLengthFieldType" minOccurs="0"/>
      <xsd:element name="StatusFlagFields" type="FieldDescriptionsType" minOccurs="0"/>
      <xsd:element name="PackageTimeDeltaFieldDescription" type="PackageTimeDeltaFieldDescriptionType" minOccurs="0"/>
      <xsd:element name="NonTmNSPackageHeaderFields" type="FieldDescriptionsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataMapType">
    <xsd:annotation>
      <xsd:documentation>
        The DataMap element describes the mapping of digital data (e.g., measurement data) to defined fields that can 
        carry the data (e.g., package fields).  The individual mappings of digital data into fields is described by the 
        contained DataWordToFieldMap elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DataWordToFieldMap" type="DataWordToFieldMapType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataWordToFieldMapType">
    <xsd:annotation>
      <xsd:documentation>
        The DataWordToFieldMap element describes how digital data is broken down or aggregated into data words and
        mapped into fields (e.g., package fields).  Each DataWordToFieldMap element contains exactly one DataWord element
        and either a PackageDataFieldRef element or a PackageDataFieldSetRef element.
      </xsd:documentation><xsd:documentation>
        The FillValue element, of type mdl:FlexibleLong, describes a constant value string that will be used to fill
        unused space in a field (defined by a PackageDataFieldRef element or a PackageDataFieldSetRef element).  The
        unused space appears when a DataWord element is smaller in size than the field it is mapped to in the described
        DataWordToFieldMap element.  The value string of the FillValue element shall appear only an integer number of
        times.  Any remainder space that cannot contain the entire FillValue element's value string will be
        indeterminate.
      </xsd:documentation><xsd:documentation>
        The TimeOrderEnum element describes the temporal ordering of instances of digital data (e.g., measurement data)
        within a field (defined by a PackageDataFieldRef element or a PackageDataFieldSetRef element).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DataWord" type="DataWordType"/>
      <xsd:choice>
        <xsd:element name="PackageDataFieldRef" type="PackageDataFieldRefType"/>
        <xsd:element name="PackageDataFieldSetRef" type="PackageDataFieldSetRefType"/>
      </xsd:choice>
      <xsd:element name="FillValue" type="FlexibleLong" minOccurs="0"/>
      <xsd:element name="TimeOrder" type="TimeOrderEnum"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataWordType">
    <xsd:annotation>
      <xsd:documentation>
        The DataWord element describes how values from Syllable elements are masked and packed into a DataWord element
        that is carried in PackageDataField elements and/or PackageDataFieldSet elements.  The DataWord element
        describes a set of contiguous bits that contain data.  The specification of the mappings in the
        DataWordToFieldMap element results in a full description of how data (e.g., measurement data) is carried in a set
        of fields (e.g., a PackagePayload).
      </xsd:documentation><xsd:documentation>
        The DataWordWidth element describes the width or length of the DataWord element.  The DataWordWidth element is
        an mdl:FlexibleLong value/units pair.  The units for this element shall be in units of digital data lengths such
        as bits or bytes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="DataWordWidth" type="FlexValueUnitsType"/>
      <xsd:element name="Syllable" type="SyllableType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SyllableType">
    <xsd:annotation>
      <xsd:documentation>
        The Syllable element describes a set of bits that are put into a DataWord element.  The Syllable element also
        describes the placement of bits within the DataWord element.  The data that is contained in a Syllable element
        comes from either a MeasurementRef element or a ConstantValue element.  If the containing DataWord
        element contains only a single Syllable element, and the DataWord element and the Syllable element are of the
        same length, then no other elements are needed for the description of the Syllable element.  Otherwise, a
        subset of the data described by the Syllable element can be selected using the DataWordOffset, SyllableWidth,
        SyllableStartBit, and SyllableMask elements.
      </xsd:documentation><xsd:documentation>
        The Measurement element that is referenced by the MeasurementRef element provides an interface 
        through which input data (e.g., measurement data) is transferred to be placed into a Syllable element.
      </xsd:documentation><xsd:documentation>
        The TMATS/PCM-related Measurement element that is referenced by the PCMMeasurementRef element provides an 
        interface through which input data is transferred to be placed into a Syllable element.
      </xsd:documentation><xsd:documentation>
        The ConstantValue element, of type mdl:FlexibleLong, describes a constant value assigned to the containing 
        Syllable element.  
      </xsd:documentation><xsd:documentation>
        The SyllableMask element, of type mdl:MaskType, describes a bit mask that is applied to the bits described by
        the Syllable element before the bits are placed within the containing DataWord element.  This mask is applied
        with a bitwise AND operation.
      </xsd:documentation><xsd:documentation>
        The SyllableWidth element describes the width or length of the Syllable element's bits that are to be placed
        within the containing DataWord element.  The SyllableWidth element is an mdl:FlexibleLong value/units pair.  The
        units for this element shall be in units of digital data lengths such as bits or bytes.  The value of the
        SyllableWidth element shall not exceed the size of the containing DataWord element.
      </xsd:documentation><xsd:documentation>
        The SyllableStartBit element, of type xsd:positiveInteger, describes the starting bit location of the selected
        bits obtained from the Syllable element.  These selected bits are then placed in the containing DataWord
        element.  Beginning with the indicated start bit where the Least Significant Bit (LSB) is bit location one, the
        selected bits are the contiguous string of bits with a total length that matches the value of the SyllableWidth
        element.
      </xsd:documentation><xsd:documentation>
        The DataWordOffset element, of type xsd:positiveInteger, describes the offset from the start of the containing
        DataWord element for the selected bits of the Syllable element.  A value of "0" indicates that the selected bits
        of the Syllable element are inserted starting at the LSB of the DataWord element.  If the DataWordOffset element
        is not present, then the value of the offset is assumed to be "0".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:choice>
        <xsd:element name="MeasurementRef" type="MeasurementRefType"/>
        <xsd:element name="ConstantValue" type="FlexibleLong"/>
      </xsd:choice>
      <xsd:element name="SyllableMask" type="MaskType" minOccurs="0"/>
      <xsd:element name="SyllableWidth" type="FlexValueUnitsType" minOccurs="0"/>
      <xsd:element name="SyllableStartBit" type="xsd:positiveInteger" minOccurs="0"/>
      <xsd:element name="DataWordOffset" type="xsd:nonNegativeInteger" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageInstanceType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageInstance elements describe which Packages may be contained in the TmNSDataMessagePayload of this
        TmNSDataMessage type.  Each PackageInstance element contains one required PackageDefinitionRef element and one
        optional Index attribute, of type xsd:positiveInteger.  The PackageDefinitionRef element refers to a 
        PackageDefinition element that can be contained in the TmNSDataMessagePayload.
      </xsd:documentation><xsd:documentation>
        The Index attribute may be included if the order of Packages in the TmNSDataMessagePayload is known.  The value
        of the Index attribute shall be unique within the scope of a MessageDefinition element.  The MDL language does
        not require a particular convention for the values of the Index attribute; the recommended convention is to
        begin with a value of "1" and increment by one.  If the value of the PackageOrder element for this
        TmNSDataMessage type is "fixed", then each PackageInstance element shall have an Index value specified.  The
        implication is that the TmNSDataMessagePayload shall have Packages that occur in the sequence specified by the
        value of the Index attribute.  If the value of the FixedNumberOfPackages element is "false", the sequence of
        Packages may repeat any number of times in a TmNSDataMessagePayload.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="PackageDefinitionRef" type="PackageDefinitionRefType"/>
    </xsd:sequence>
    <xsd:attribute name="Index" type="xsd:positiveInteger"/>
  </xsd:complexType>

  <xsd:complexType name="FieldLocationType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldLocation element describes the location and width of a field (e.g., a PackageField).  In the case that
        this field is repeated (the value of the FieldRepetitions element is greater than 1), this element describes the
        offset for the first location of the described field.
      </xsd:documentation><xsd:documentation>
        The FieldWidth element describes the width or size of a field.  The FieldWidth element is an mdl:FlexibleLong
        value/units pair.  The units for this element shall be in units of digital data lengths such as bits or bytes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="FieldOffset" type="FieldOffsetType"/>
      <xsd:element name="FieldWidth" type="FlexValueUnitsType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="FieldLocationRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a FieldLocationRef must refer to the ID attribute of a FieldLocation in the same 
        MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="FieldEncodingType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldEncoding element describes the encoding of digital data contained within the described field 
        (e.g. a PackageField).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Endianness" type="EndiannessEnum"/>
      <xsd:element name="DigitalEncoding" type="DigitalEncodingEnum"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageDataFieldType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageDataField element describes a location in a Package that can carry data, (i.e., a PackageField).  The
        PackageDataField element is an extension of the more general PackageField element.  The abstract PackageField
        element's content mirrors that of the PackageDataField element minus the FieldRepetitions element and the
        FieldOffsetIncrement element; therefore, it contains a FieldLocation element and a FieldEncoding element.  The
        PackageField element does not appear as a schema element; instead, the PackageDataField element and other
        related PackageField elements (e.g., the defined fields within the package header description) are derived from
        the PackageField element.
      </xsd:documentation><xsd:documentation>
        The FieldRepetitions element, of type xsd:integer, describes the number of repetitions for this PackageField.
        If the value of this element is equal to 1, the PackageDataField element being described occurs only once in the
        containing PackageStructure element.  If the value of this element is greater than 1, the corresponding
        PackageDataField element has multiple locations, each offset by the number of bits indicated by the value of the
        FieldOffsetIncrement element from the previous location.  If the value of this element is equal to 0, the
        PackageDataField element repeats indefinitely.
      </xsd:documentation><xsd:documentation>
        The FieldOffsetIncrement element specifies the number of digital data units to increment from one location of
        this PackageDataField element to a subsequent location.  The FieldOffsetIncrement element is an mdl:FlexibleLong
        value/units pair.  The units for this element shall be in units of digital data lengths such as bits or bytes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="FieldLocation" type="FieldLocationType"/>
      <xsd:element name="FieldEncoding" type="FieldEncodingType"/>
      <xsd:element name="FieldRepetitions" type="xsd:positiveInteger"/>
      <xsd:element name="FieldOffsetIncrement" type="FlexValueUnitsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageDataFieldRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a PackageDataFieldRef must refer to the ID attribute of a PackageDataField within
        the same MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageDataFieldSetType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageDataFieldSet element describes a set of PackageDataField elements.  When mapping to a
        PackageDataFieldSet element using a DataWordToFieldMap Element it is implied that the left-most bits of the
        DataWord element go into the left-most bits of the PackageDataFieldSet element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PackageDataField" type="PackageDataFieldType" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageDataFieldSetRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a PackageDataFieldSetRef must refer to the ID attribute of a PackageDataFieldSet 
        within the same MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="FieldOffsetType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldOffset element describes the placement of a field with respect to other known positions within a set of
        fields (e.g., a PackageStructure).  The FieldOffset element indicates the location of the first bit of a field.
        Along with the OffsetValue element, the FieldOffset element shall contain only the OffsetFromLocation element or
        the OffsetFromPackageDataFieldSet element.
      </xsd:documentation><xsd:documentation>
        The OffsetValue element contains the value of the offset for the field.  The FieldOffset element is an
        mdl:FlexibleLong value/units pair.  The units for this element shall be in units of digital data lengths such as
        bits or bytes.  If neither the OffsetFromLocation element nor the OffsetFromPackageDataFieldSet element is
        present, the offset indicated by the OffsetValue element is relative to the first bit of the set of fields
        (e.g., a Package).
      </xsd:documentation><xsd:documentation>
        The OffsetFromLocation element contains an IDREF attribute, of type xsd:IDREF, that can be used to reference the
        ID attribute of another FieldLocation element.  If this element is present, the offset indicated by the
        OffsetValue element is relative to the first bit of the referenced FieldLocation element.
      </xsd:documentation><xsd:documentation>
        The OffsetFromPackageDataFieldSet element contains an IDREF attribute, of type xsd:IDREF, that shall reference
        the ID attribute of a PackageDataFieldSet element.  If this element is present, the offset indicated by the
        OffsetValue element is relative to the last bit of the referenced PackageDataFieldSet element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="OffsetValue" type="FlexValueUnitsType"/>
      <xsd:element name="OffsetFromLocation" type="FieldLocationRefType" minOccurs="0"/>
      <xsd:element name="OffsetFromPackageDataFieldSet" type="PackageDataFieldSetRefType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageStructureType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageStructure element describes a PackageStructure, which is a set of package fields that make up the
        Package and can carry data.  The package fields do not need to cover all bits in a Package, and may overlap.  The
        PackageStructure elements are contained in the Packages container element in a MeasurementDomain.  They
        are defined at the MeasurementDomain scope and referenced within PackageDefinitions.  A PackageStructure
        may be used by multiple MessageDefinitions and PackageDefinitions in a MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PackageDataField" type="PackageDataFieldType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PackageDataFieldSet" type="PackageDataFieldSetType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageStructureRefType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageStructureRef element contains an IDREF attribute, of type xsd:IDREF, that shall reference the ID
        attribute of a PackageStructure element within the same MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageLengthFieldType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageLengthField element describes the length of a Package and the PackageField that contains the
        PackageLength field (see the Test Article Standard).  The PackageLengthField element shall not be used when
        using the standard package header.
      </xsd:documentation><xsd:documentation>
        If the Package has a fixed length, the FixedPackageLength indicates the length of the Package.  The Package
        length includes the size of the package header.  The FixedPackageLength element is an mdl:FlexibleLong
        value/units pair.  The units for this element shall be in units of digital data lengths such as bits or bytes.  
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="FixedPackageLength" type="FlexValueUnitsType" minOccurs="0"/>
      <xsd:element name="PackageLengthFieldDescription" type="PackageLengthFieldDescriptionType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PackageLengthFieldDescriptionType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageLengthFieldDescription element describes the PackageField within a package header that contains the
        Package length (i.e., the PackageLength field from the Test Article Standard).
        The FieldLocation element describes the location and width of a PackageField within a Package.
        The FieldEncoding element describes the encoding and format of the digital values contained within a PackageField.  
        The UnitsRef and SIUnits elements describe the units of measure for describing the field.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:choice minOccurs="0">
        <xsd:element name="UnitsRef" type="UnitsRefType"/>
        <xsd:element name="SIUnits" type="SIUnitsEnum"/>
      </xsd:choice>
      <xsd:element name="FieldLocation" type="FieldLocationType"/>
      <xsd:element name="FieldEncoding" type="FieldEncodingType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PackageTimeDeltaFieldDescriptionType">
    <xsd:annotation>
      <xsd:documentation>
        The PackageTimeDeltaFieldDescription element describes the PackageField in a package header that shall contain
        the PackageTimeDelta field (see the Test Article Standard).  The PackageTimeDeltaFieldDescription element shall
        not be used when using the standard package header.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TimestampDefinition" type="TimestampDefinitionType" minOccurs="0"/>
      <xsd:element name="FieldLocation" type="FieldLocationType"/>
      <xsd:element name="FieldEncoding" type="FieldEncodingType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="FieldDescriptionsType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldDescriptions element is a container for zero or more FieldDescription elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="FieldDescription" type="FieldDescriptionType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FieldDescriptionType">
    <xsd:annotation>
      <xsd:documentation>
        The FieldDescription element is derived from the PackageField element; therefore, it contains a FieldLocation
        element and a FieldEncoding element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="FieldLocation" type="FieldLocationType"/>
      <xsd:element name="FieldEncoding" type="FieldEncodingType"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MessagesType">
    <xsd:annotation>
      <xsd:documentation>
        The Messages element in a MeasurementDomain element is a container for zero or more MessageDefinition 
        elements.  
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="MessageDefinition" type="MessageDefinitionType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MessageDefinitionType">
    <xsd:annotation>
      <xsd:documentation>
        A MessageDefinition element describes a TmNSDataMessage type.  Please refer to the descriptions of the
        MaximumMessageLength element, the MaximumMessageLatency element, and the FixedMessageLength element for an
        explanation of the finalization constraints placed on the defined TmNSDataMessage type.  The following lists the
        elements and attributes of the MessageDefinition elements.
      </xsd:documentation><xsd:documentation>
        The MessageDefinitionID element, of type mdl:ThirtyTwoBit, indicates the MessageDefinitionID (MDID) of this
        TmNSDataMessage type.  The MessageDefinitionID shall be unique among all MessageDefinitionIDs within a 
        MeasurementDomain.
      </xsd:documentation><xsd:documentation>
        The MessageVersion element, of type xsd:string, describes the version of the TmNSDataMessage standard (see the
        Test Article Standard) that the MessageDefinition element follows.
      </xsd:documentation><xsd:documentation>
        The DSCPTableEntryRef element contains an IDREF attribute of type xsd:IDREF that references the ID attribute of
        a DSCPTableEntry element.  The DSCPValue in the DSCPTableEntry indicates the Diffserv Code Point markings that
        shall be applied IP header of the message.
      </xsd:documentation><xsd:documentation>
        The DestinationAddress element, of type mdl:IPAddress, may be used to describe the multicast or unicast address 
        to which the message is published.
        The DestinationPort element, of type xsd:unsignedShort(in the range [0,65535]) describes the destination port
        address of the transport.  This element is optional.  If not provided, the default port as specified by the Test
        Article Standard will be used.
      </xsd:documentation><xsd:documentation>
        The MaximumMessageLength element indicates the maximum length of this TmNSDataMessage type.  The implied meaning
        is that when a TmNSDataMessage of this type reaches that length, or an additional Package would cause the length
        of the TmNSDataMessage to exceed this length, the TmNSDataMessage will be finalized with the current
        TmNSDataMessagePayload.  The MaximumMessageLength element may be used in conjunction with the
        MaximumMessageLatency element; however, the MaximumMessageLength element shall not be present if the
        FixedMessageLength element is contained in the described MessageDefinition element.  The MaximumMessageLength
        element is an mdl:FlexibleLong value/units pair.  The units for this element shall be in units of digital data
        lengths such as bytes or kilobytes.
      </xsd:documentation><xsd:documentation>
        The MaximumMessageLatency element indicates the maximum amount of time that a NetworkNode shall wait before
        sending a TmNSDataMessage of this type.  The implication is that when this timeout occurs, starting from the
        last sent time for a TmNSDataMessage of this type, the current TmNSDataMessage will be finalized with the
        current TmNSDataMessagePayload.  The MaximumMessageLatency element may be used in conjunction with the
        MaximumMessageLength element; however, the MaximumMessageLatency element shall not be present if the
        FixedMessageLength element is contained in the described MessageDefinition element.  The MaximumMessageLatency
        element is a floating-point value/units pair.  The units for this element shall be in units of time such as
        seconds or milliseconds.
      </xsd:documentation><xsd:documentation>
        If the TmNSDataMessage has a fixed length, the FixedMessageLength element indicates the length of
        TmNSDataMessages of this type.  This length includes the TmNSDataMessageHeader.  This value shall match the
        value that will be placed into the TmNSDataMessageHeader.  If the TmNSDataMessage does not have a fixed length,
        then this element shall not be present in the MessageDefinition element, but a length value will appear in each
        TmNSDataMessageHeader (as specified in the Test Article Standard).  If the FixedMessageLength element is
        contained in the described MessageDefinition element, the MaximumMessageLatency element and the
        MaximumMessageLength element shall not be present.  The FixedMessageLength element is an mdl:FlexibleLong
        value/units pair.  The units for this element shall be in units of digital data lengths such as bytes or
        kilobytes.
      </xsd:documentation><xsd:documentation>
        The FixedPackageOrder element, of type xsd:boolean, indicates whether or not the Packages contained within the
        TmNSDataMessagePayload shall occur in a fixed order.  If the value is set to "false" the ordering for a given
        MessageDefinition is variable and the PDID of each Package shall be unambiguously determinable.  The PDID is
        necessary when the ordering is variable so that each Package within a TmNSDataMessagePayload can be
        differentiated.
      </xsd:documentation><xsd:documentation>
        The FixedNumberOfPackages element, of type xsd:boolean, indicates whether or not the Packages contained within a
        TmNSDataMessagePayload shall occur a fixed number of times.  If the value is set to "true", Packages in a
        TmNSDataMessagePayload shall appear exactly the same number of times their corresponding PackageInstance
        elements appear in the MessageDefinition element.  If the value is set to "false", Packages in a
        TmNSDataMessagePayload can appear any number of times including zero.
      </xsd:documentation><xsd:documentation>
        For example, if the PackageOrder element has a value of "fixed", the FixedNumberOfPackages element has a value
        of "false", and three included Package instances P1, P2, and P3 have Index values "1", "2", and "3",
        respectively, then the following sequences would be valid TmNSDataMessagePayloads: [P1, P2, P3], [P1, P2, P3,
        P1, P2, P3], [P1, P2, P3, P1], and [(P1, P2, P3)*].  The sequence [P2, P3, P1] would not be valid.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="MessageDefinitionID" type="ThirtyTwoBit"/>
      <xsd:element name="MessageVersion" type="xsd:string" minOccurs="0"/>
      <xsd:element name="DSCPTableEntryRef" type="DSCPTableEntryRefType" minOccurs="0"/>
      <xsd:element name="DestinationAddress" type="IPAddress" minOccurs="0"/>
      <xsd:element name="DestinationPort" type="xsd:unsignedShort" minOccurs="0"/>
      <xsd:element name="AggregateRate" type="AggregateRateType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="MaximumMessageLength" type="FlexValueUnitsType" minOccurs="0"/>
      <xsd:element name="MaximumMessageLatency" type="FloatValueUnitsType" minOccurs="0"/>
      <xsd:element name="FixedMessageLength" type="FlexValueUnitsType" minOccurs="0"/>
      <xsd:element name="FixedPackageOrder" type="xsd:boolean"/>
      <xsd:element name="FixedNumberOfPackages" type="xsd:boolean"/>
      <xsd:element name="PackageInstance" type="PackageInstanceType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TimingRelationships" type="TimingRelationshipsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MessageDefinitionRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a MessageDefinitionRef must refer to the ID attribute of a MessageDefinitionType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MessageDefinitionRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The MessageDefinitionRefs element contains a list of zero or more MessageDefinitionRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="MessageDefinitionRef" type="MessageDefinitionRefType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataStreamsType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStreams element is a container for zero or more DataStream elements.  
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DataStream" type="DataStreamType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataStreamType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStream element describes a streaming data format used to transfer encoded data on a Test Article
        Network.  Typically, access to the described data stream is dependent upon a set of selected technologies
        (hardware and/or software) to implement the specified protocols, interfaces, and formats of the data stream.
        The DataStream element describes an instantiation of a selected data stream technology that appears on a Test
        ArticleNetwork as a means of transporting data (e.g., measurement data).  Each technology-specific description
        within the DataStream element will indicate how data is organized into defined data structures and formats.
        Furthermore, each technology-specific description within the DataStream element will specify how individual data
        units can be extracted and aggregated into sampled measurements.  Potentially, these sampled measurements may be
        refined and processed before they are published as measurement data in TmNSDataMessages.  The following lists the
        elements and attributes of the DataStream element.
      </xsd:documentation><xsd:documentation>
        The DataStreamID element, of type xsd:token, describes the textual identifier of the described DataStream
        element.  The XML processor will remove line feeds, carriage returns, tabs, leading and trailing spaces, and 
        multiple spaces from all elements of type xsd:token.
      </xsd:documentation><xsd:documentation>
        The DataStreamType element indicates the type of the selected technology for the described DataStream element.
        Each data stream type may have its own technology-specific protocols, interfaces, and formats.
      </xsd:documentation><xsd:documentation>
        The DataRate element, of type mdl:ConditionParameters, contains any number of ConditionParameter elements and
        describes the data rate of the described DataStream element.  The data rate indicates the average number of
        transferred digital data units per unit of time for a described DataStream element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="DataStreamID" type="xsd:token"/>
      <xsd:element name="DataStreamType" type="DataStreamTypeEnum"/>
      <xsd:element name="DataRate" type="ConditionParametersType" minOccurs="0"/>
      <xsd:choice>
        <xsd:element name="MILSTD1553Messages" type="MILSTD1553MessagesType"/>
        <xsd:element name="ARINC429Messages" type="ARINC429MessagesType"/>
        <xsd:element name="PCMDataLink" type="PCMDataLinkType"/>
        <xsd:element name="GenericDataStreamMessages" type="GenericDataStreamMessagesType"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataStreamRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a DataStreamRef must refer to the ID attribute of a DataStream.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MILSTD1553MessagesType">
    <xsd:annotation>
      <xsd:documentation>
        The MILSTD1553Messages element is a container for zero or more MILSTD1553Message elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="MILSTD1553Message" type="MILSTD1553MessageType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MILSTD1553MessageType">
    <xsd:annotation>
      <xsd:documentation>
        The MILSTD1553Message element defines a message type for the described MILSTD1553 element.  This message type
        definition identifies the type of the message, the format and value of the message's control fields, the details
        of the message's data structure (i.e., locations that carry data), and the mapping of data content to the
        defined data structure.  The properties of the described MILSTD1553Message element are unique to the MIL-STD
        1553B Data Bus Standard.
      </xsd:documentation><xsd:documentation>
        The MILSTD1553RemoteTerminal element, of type mdl:MILSTD1553RemoteTerminalType, describes the value of the
        Remote Terminal Address field as it appears in the message described by the MILSTD1553Message element (e.g., in
        a Command word or Status word).  Valid values for the MILSTD1553RemoteTerminal element are the non-negative
        integers within the inclusive range from 0 to 31.  The value of 31 is reserved for Broadcast message types.
      </xsd:documentation><xsd:documentation>
        The MILSTD1553SubaddressOrMode element, of type mdl:MILSTD1553SubaddressType, describes the value of the
        Subaddress field as it appears in the message described by the MILSTD1553Message element (e.g., in a Command
        word).  Valid values for the MILSTD1553SubaddressOrMode element are the non-negative integers within the
        inclusive range from 0 to 31.  The values of 0 and 31 are reserved for Mode Code message types.
      </xsd:documentation><xsd:documentation>
        The MILSTD1553MessageTransmitReceive element describes the value of the Transmit/Receive field as it appears in
        the message described by the MILSTD1553Message element (e.g., in a Command word).  The
        MILSTD1553MessageTransmitReceive element is an enumeration that can be set to one of the following values:
        Transmit, Receive
      </xsd:documentation><xsd:documentation>
        The MILSTD1553WordCountOrModeCode element, of type mdl:MILSTD1553WordCountType, describes the value of the Word
        Count/Mode Code field as it appears in the message described by the MILSTD1553Message element (e.g., in a
        Command word).  Valid values for the MILSTD1553WordCountOrModeCode element are the positive integers within the
        inclusive range from 1 to 32.  If the Subaddress field has a value of 0 or 31 indicating that this is a Mode
        Code message, the value of the MILSTD1553WordCountOrModeCode element indicates the Mode Code to be performed.
      </xsd:documentation><xsd:documentation>
      The DataStructure element, of type mdl:PackageStructureType, describes the format and location of data carrying
      fields within the described MILSTD1553Message element.  The assignment of digital data values (e.g., measurement
      data) to the field locations is specified using the DataMap element.  The DataStructure element has the same
      contents as the PackageStructure element.
      </xsd:documentation><xsd:documentation>
        The DataMap element describes the mapping of digital data (e.g., measurement data) to defined data carrying field
        locations for a described MILSTD1553Message element.  The description of the format and location of the defined
        fields is specified using the DataStructure element.  The DataMap element has the same contents as the DataMap
        element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="MILSTD1553MessageType" type="MILSTD1553MessageTypeEnum"/>
      <xsd:element name="MILSTD1553MessageSource" type="MILSTD1553MessageSourceType" minOccurs="0"/>
      <xsd:element name="MILSTD1553MessageDestination" type="MILSTD1553MessageDestinationType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="MILSTD1553RemoteTerminal" type="uInt5" minOccurs="0"/>
      <xsd:element name="MILSTD1553SubaddressOrMode" type="uInt5" minOccurs="0"/>
      <xsd:element name="MILSTD1553TransmitReceive" type="MILSTD1553TransmitReceiveType" minOccurs="0"/>
      <xsd:element name="MILSTD1553WordCountOrModeCode" type="MILSTD1553WordCountType" minOccurs="0"/>
      <xsd:element name="DataStructure" type="PackageStructureType" minOccurs="0"/>
      <xsd:element name="DataMap" type="DataMapType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MILSTD1553MessageSourceType">
    <xsd:annotation>
      <xsd:documentation>
        The MILSTD1553MessageSource element describes the source of the message described by the MILSTD1553Message
        element.  The values of the MILSTD1553MessageSource subelements do not appear in the actual message.  Instead,
        this element is included to indicate the origin of the message described by the MILSTD1553Message element.
      </xsd:documentation><xsd:documentation>
        The MILSTD1553RemoteTerminal element, of type mdl:uInt5, describes the Remote Terminal
        Address of the source of the described MILSTD1553Message element.  Valid values for the MILSTD1553RemoteTerminal
        element are the non-negative integers within the inclusive range from 0 to 31.
      </xsd:documentation><xsd:documentation>
        The MILSTD1553Subaddress element, of type mdl:uInt5, describes the Subaddress of the source
        of the described MILSTD1553Message element.  Valid values for the MILSTD1553Subaddress element are the
        non-negative integers within the inclusive range from 0 to 31.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="MILSTD1553RemoteTerminal" type="uInt5"/>
      <xsd:element name="MILSTD1553Subaddress" type="uInt5" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MILSTD1553MessageDestinationType">
    <xsd:annotation>
      <xsd:documentation>
        The MILSTD1553MessageDestination element describes the destination of the message described by the
        MILSTD1553Message element.  The values of the MILSTD1553MessageDestination subelements do not necessarily appear
        in the actual message.
      </xsd:documentation><xsd:documentation>
        The MILSTD1553RemoteTerminal element, of type mdl:uInt5, describes the Remote Terminal Address of the
        destination of the described MILSTD1553Message element.  Valid values for the MILSTD1553RemoteTerminal element
        are the non-negative integers within the inclusive range from 0 to 31.
      </xsd:documentation><xsd:documentation>
        The MILSTD1553Subaddress element, of type mdl:uInt5, describes the Subaddress of the destination of the
        described MILSTD1553Message element.  Valid values for the MILSTD1553Subaddress element are the non-negative
        integers within the inclusive range from 0 to 31.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="MILSTD1553RemoteTerminal" type="uInt5"/>
      <xsd:element name="MILSTD1553Subaddress" type="uInt5" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ARINC429MessagesType">
    <xsd:annotation>
      <xsd:documentation>
        The ARINC429Messages element is a container for zero or more ARINC429Message elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ARINC429Message" type="ARINC429MessageType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ARINC429MessageType">
    <xsd:annotation>
      <xsd:documentation>
        The ARINC429Message element defines a message type for the described DataStream element.  This message type
        definition identifies the format and value of the message's control fields, the details of the message's data
        structure (i.e., locations that carry data), and the mapping of data content to the defined data structure.  The
        properties of the described ARINC429Message element are unique to the ARINC 429 Data Bus Standard
      </xsd:documentation><xsd:documentation>
        The ARINC429Label element, of type mdl:ARINC429LabelType, describes the value of the Label field as it appears
        in the message described by the ARINC429Message element.  Valid values for the ARINC429Label element are the
        non-negative integers within the inclusive range from 0 to 255.
      </xsd:documentation><xsd:documentation>
        The ARINC429SDI element describes the value of the Source/Destination Identifier (SDI) field as it appears in
        the message described by the ARINC429Message element.  The ARINC429SDI element is an enumeration that can be set
        to one of the following values: 00, 01, 10, 11
      </xsd:documentation><xsd:documentation>
        The ARINC429DataFormat element indicates the selected data format for the message described by the
        ARINC429Message element. The ARINC429DataFormat element is an enumeration that can be set to one of the
        following values: BCD, BNR, Discrete, Maintenance, ISOAlphabet#5, Mixed
      </xsd:documentation><xsd:documentation>
        The ARINC429SSM element describes the value of the Sign/Status matrix (SSM) field as it appears in the message
        described by the ARINC429Message element.  The ARINC429SSM element is an enumeration that can be set to one of
        the following values: 00, 01, 10, 11
      </xsd:documentation><xsd:documentation>
        The ARINC429Parity element indicates the selected type of parity for the message described by the
        ARINC429Message element.  The ARINC429Parity element is an enumeration that can be set to one of the following
        values: OddParity or EvenParity
      </xsd:documentation><xsd:documentation>
      DataStructure element, of type mdl:PackageStructureType, describes the format and location of data carrying
      fields within the described ARINC429Message element.  The assignment of digital data values (e.g., measurement
      data) to the field locations is specified using the DataMap element.
      </xsd:documentation><xsd:documentation>
        The DataMap element describes the mapping of digital data (e.g., measurement data) to defined data carrying field
        locations for a described ARINC429Message element.  The description of the format and location of the defined
        fields is specified using the DataStructure element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="ARINC429Label" type="xsd:unsignedByte"/>
      <xsd:element name="ARINC429SDI" type="ARINC429SDIEnum" minOccurs="0"/>
      <xsd:element name="ARINC429DataFormat" type="ARINC429DataFormatEnum"/>
      <xsd:element name="ARINC429SSM" type="ARINC429SSMEnum" minOccurs="0"/>
      <xsd:element name="ARINC429Parity" type="ARINC429ParityEnum" minOccurs="0"/>
      <xsd:element name="DataStructure" type="PackageStructureType" minOccurs="0"/>
      <xsd:element name="DataMap" type="DataMapType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PCMDataLinkType">
    <xsd:annotation>
      <xsd:documentation>
        The PCMDataLink element describes the PCM data format for the described PCMStream element.  The PCMDataLink
        element specifies the formatting of the data structure (i.e., locations that carry data) and the mapping of data
        content to the defined data structure.  The properties of the described PCMDataLink element are unique to the
        PCM data format according to Chapters 4 and 9 of the TMATS Document.
      </xsd:documentation><xsd:documentation>
        The PCMDataLink element is similar to the defined xsd:complexType element named "DataLinkType" from the TMATS
        schema as described in Chapter 9 of the TMATS Document (see reference in Section 2.1.2).  The PCMDataLink
        contains the PCMFormatAttributes element that is imported directly from the TMATS schema.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PCMFormatAttributes" type="tmats:PCMFormatAttributesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="GenericDataStreamMessagesType">
    <xsd:annotation>
      <xsd:documentation>
        The GenericDataStreamMessages element is a container for zero or more GenericDataStreamMessage elements.
      </xsd:documentation><xsd:documentation>
        The ReferenceDocumentation element, of type xsd:string, specifies an external document or other source 
        material that provides more details, descriptions, or specifications regarding the formats and properties of 
        the described GenericDataStream element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ReferenceDocumentation" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericDataStreamMessage" type="GenericDataStreamMessageType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="GenericDataStreamMessageType">
    <xsd:annotation>
      <xsd:documentation>
        The GenericDataStreamMessage element defines a message type for the described GenericDataStream element.  This
        message type definition identifies the message's data structure (i.e., locations that carry data) and the
        mapping of data content to the defined data structure.
      </xsd:documentation><xsd:documentation>
      The Size element, of type mdl:FlexValueUnitsType, describes the size or length of the described
      GenericDataStreamMessage element.
      </xsd:documentation><xsd:documentation>
      The DataStructure element, of type mdl:PackageStructureType, describes the format and location of data carrying
      fields within the described GenericDataStreamMessage element.  The assignment of digital data values (e.g.,
      measurement data) to the field locations is specified using the DataMap element.  The DataStructure element has
      the same contents as the PackageStructure element.
      </xsd:documentation><xsd:documentation>
        The DataMap element describes the mapping of digital data (e.g., measurement data) to defined data carrying field
        locations for a described GenericDataStreamMessage element.  The description of the format and location of the
        defined fields is specified using the DataStructure element.  The DataMap element has the same contents as the
        DataMap element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="Size" type="FlexValueUnitsType" minOccurs="0"/>
      <xsd:element name="DataStructure" type="PackageStructureType" minOccurs="0"/>
      <xsd:element name="DataMap" type="DataMapType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataStreamMessageRefType">
    <xsd:annotation>
      <xsd:documentation>
        The DataStreamMessageRef element indicates the MILSTD1553Message, ARINC429Message, or GenericDataStreamMessage
        from which the data is extracted.  The DataStreamMessageRef element contains an IDREF attribute, of type
        xsd:IDREF, that shall reference the ID attribute of a MILSTD1553Message, ARINC429Message, or
        GenericDataStreamMessage within the same MeasurementDomain.  The DataStreamMessageRef element contains an Index
        attribute, of type xsd:positiveInteger, which indicates the order of DataStreamMessages elements when placed in a
        Package.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
    <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TimeSynchronizationPathType">
    <xsd:annotation>
      <xsd:documentation>
        The TimeSynchronizationPath element provides an estimate of the uncertainty in time synchronization for a
        NetworkNode.  It describes the path between a time source and the NetworkNode, along with an estimate of the
        uncertainty and a relative confidence in that estimate.
      </xsd:documentation><xsd:documentation>
        The TimeSynchronizationPath contains one or more NetworkConnectionRef elements.  Together these references
        define the set of connections that are included in the Path between a PhysicalNetworkPort of a NetworkNode that
        is acting as the time master and a PhysicalNetworkPort of a NetworkNode being synchronized.  The ordering of the
        connection references in the document do not necessarily correlate to the order of the connections that would be
        traversed along the path from the time source to the NetworkNode being time synchronized.
      </xsd:documentation><xsd:documentation>
        The IEEE 1588 PTP is specified in the Test Article Standard to be used for time synchronization between
        NetworkNodes connected to a TmNS.  In this protocol NetworkNode clocks are synchronized to an IEEE 1588 Grand
        Master clock, which is synchronized to Global Positioning System (GPS) time (in most cases).  A 64-bit timestamp
        shall be added to TmNSDataMessages published on the TmNS, allowing the measurements contained in the
        TmNSDataMessages to be correlated with a common time reference at data sinks.  While this method is
        theoretically capable of sub-microsecond timing uncertainty, the actual uncertainty of the timestamps can vary
        depending on the capabilities of the NetworkNodes in the system (as a result of varying levels of support for
        IEEE 1588).  The uncertainty of a timestamp is related to deviations in the latency of the PTP messages along
        the time synchronization path.
      </xsd:documentation><xsd:documentation>
        The approach chosen for categorizing the timing uncertainty introduced along a Path is to provide an estimated
        maximum uncertainty with corresponding units and a confidence level.  For example, in the event that the
        uncertainty has been determined, either theoretically or empirically, to be Gaussian, the maximum uncertainty
        may be three times the standard deviation of the distribution with a confidence level of 99.7%.  Alternatively,
        a designer may choose to collect an extensive amount of experimental data and use the largest measured value of
        uncertainty as true maximum uncertainty with 100% confidence.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="AggregateRate" type="AggregateRateType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="Uncertainty" type="UncertaintyType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PortMappingRef" type="PortMappingRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ValueUnitsType">
    <xsd:annotation>
      <xsd:documentation>
        The ValueUnitsType is a generic container for either an mdl:FlexibleLong or xsd:double value with assigned 
        units of measure.  The UnitsRef and SIUnits elements describe the units of measure for the ValueUnits. 
     </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:choice>
        <xsd:element name="FlexValue" type="FlexibleLong"/>
        <xsd:element name="FloatValue" type="xsd:double"/>
      </xsd:choice>
      <xsd:choice>
        <xsd:element name="UnitsRef" type="UnitsRefType"/>
        <xsd:element name="SIUnits" type="SIUnitsEnum"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FlexValueUnitsType">
    <xsd:annotation>
      <xsd:documentation>
        The FlexValueUnitsType is a generic container for an mdl:FlexibleLong value with assigned units of measure.  
        The UnitsRef and SIUnits elements describe the units of measure for the FlexValueUnits.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="FlexValue" type="FlexibleLong"/>
      <xsd:choice>
        <xsd:element name="UnitsRef" type="UnitsRefType"/>
        <xsd:element name="SIUnits" type="SIUnitsEnum"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FloatValueUnitsType">
    <xsd:annotation>
      <xsd:documentation>
        The FloatValueUnitsType is a generic container for a floating-point value with assigned units of measure.  
        The UnitsRef and SIUnits elements describe the units of measure for the FloatValueUnitsType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="FloatValue" type="xsd:double"/>
      <xsd:choice>
        <xsd:element name="UnitsRef" type="UnitsRefType"/>
        <xsd:element name="SIUnits" type="SIUnitsEnum"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AggregateRateType">
    <xsd:annotation>
      <xsd:documentation>
        The AggregateRate element describes common data rates for items throughout a TmNS 
        (e.g., bit rates, sample rates, packet rates, Package rates, TmNSDataMessage rates, etc.).  
        The goal of providing these elements is to support the estimation of aggregate data rates at 
        various points in the TmNS(s) resulting from a particular configuration.  For example, the 
        sample rates related to individual measurements may be aggregated into bit rates and Package rates, 
        which may be aggregated into bit rates and TmNSDataMessages rates.  TmNSDataMessages rates may be 
        aggregated into bit rates and packet rates for transport-related items (e.g., paths, network 
        connections, and network interfaces).
      </xsd:documentation><xsd:documentation>
        The AverageRate element describes the average data rate in the units of measure specified by the 
        UnitsRef or SIUnits element.
      </xsd:documentation><xsd:documentation>
        The PeakRate element describes the peak data rate in the units of measure specified by the 
        UnitsRef or SIUnits element.
      </xsd:documentation><xsd:documentation>
        The UnitsRef or SIUnits element describes the units of measure for the AverageRate and PeakRate.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="AverageRate" type="xsd:double" minOccurs="0"/>
      <xsd:element name="PeakRate" type="xsd:double" minOccurs="0"/>
      <xsd:choice>
        <xsd:element name="UnitsRef" type="UnitsRefType"/>
        <xsd:element name="SIUnits" type="SIUnitsEnum"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PathType">
    <xsd:annotation>
      <xsd:documentation>
        The Path element contains a set of NetworkConnections, in the form of PortMappingRef elements, and describes the
        connections in the network to which a TmNSDataMessage is expected to traverse while being transferred to the
        subscribing NetworkNodes from the publishing NetworkNodes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="AggregateRate" type="AggregateRateType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PortMappingRef" type="PortMappingRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MinimumRateConfigurationType">
    <xsd:annotation>
      <xsd:documentation>
        The CodingOption element describes the way that the data is to be coded in the minimum rate configuration mode.
        The CodingOption element is currently an xsd:string but is expected to become an enumeration that restricts the 
        valid values (TBD).
      </xsd:documentation><xsd:documentation>
        The ModulationOption element describes the way that the data is to be modulated in the minimum rate
        configuration mode.  The ModulationOption element is currently an xsd:string but is expected to become an 
        enumeration in the near future.
      </xsd:documentation><xsd:documentation>
        The TxPowerPolicy element, of type xsd:string, describes the way that the power is to be controlled during
        minimum rate configuration mode.  The values of this string are not further constrained.
      </xsd:documentation><xsd:documentation>
      The RadioDataRate element, of type mdl:FloatValueUnitsType, describes the data rate for the minimum rate
      configuration of the link.  The RadioDataRate element is a floating-point value units pair.
      </xsd:documentation><xsd:documentation>
      The CenterChannelFrequency element, of type mdl:FloatValueUnitsType, describes the center channel frequency for
      the minimum rate configuration of the link.  The CenterChannelFrequency element is a floating-point value/units
      pair.
      </xsd:documentation><xsd:documentation>
      The TxPower element, of type mdl:FloatValueUnitsType, describes the transmit power of the radio in decibels
      during the minimum rate configuration.  The TxPower element is a floating-point value/units pair.
      </xsd:documentation><xsd:documentation>
      The ContentionSlot element, of type mdl:TimeWindowType, describes the timing of the contention slot during
      minimum rate configuration.  The MinimumRateCofiguration element is required to contain one ContentionSlot
      element.
      </xsd:documentation><xsd:documentation>
      The MinimumRateConfiguration element is a list of one or more TimeWindow elements.  The meaning in this context
      is to describe the times during which a minimum rate configuration is valid.
      </xsd:documentation><xsd:documentation>
        The TransmissionOpportunity element is a list of one or more TimeWindow elements.  The meaning is to
        describe the time during which this radio can transmit while in minimum rate configuration.  The
        MinimumRateCofiguration element contains one or more TransmissionOpportunity elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="CodingOption" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ModulationOption" type="ModulationOptionType" minOccurs="0"/>
      <xsd:element name="TxPowerPolicy" type="xsd:string" minOccurs="0"/>
      <xsd:element name="RadioDataRate" type="FloatValueUnitsType" minOccurs="0"/>
      <xsd:element name="CenterChannelFrequency" type="FloatValueUnitsType" minOccurs="0"/>
      <xsd:element name="TxPower" type="FloatValueUnitsType" minOccurs="0"/>
      <xsd:element name="ContentionSlot" type="TimeWindowType"/>
      <xsd:element name="TimeWindow" type="TimeWindowType" maxOccurs="unbounded"/>
      <xsd:element name="TransmissionOpportunity" type="TimeWindowType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CommittedRateType">
    <xsd:annotation>
      <xsd:documentation>
        The TrafficType element, of type xsd:string, describes the type of traffic associated with the rate described by
        the CommittedRate element.  The value of the TrafficType element shall be unique within the scope of the
        TmNSGroundRadio element.  The appropriate format of this element is TBD.
      </xsd:documentation><xsd:documentation>
        The RadioDataRate element describes the data rate that has been committed for a particular traffic type across
        the wireless link.  The RadioDataRate element is a floating-point value/units pair.
      </xsd:documentation><xsd:documentation>
        A TimeWindow element describes a period of time related to either absolute time or the beginning of a Time 
        Division Multiple Access (TDMA) epoch.  TimeWindow descriptions are used in several ways in a description of 
        a TmNSGroundRadio configuration.
      </xsd:documentation><xsd:documentation>
        Within the context of a CommittedRate element, the TimeWindow describes the period during which the committed
        rate is valid.  Similar elements are used within the context of the MinimumRateConfiguration element to describe
        the period of time that a contention slot is valid, the timing of the transmit opportunity, and a set of time
        windows during which that configuration is valid.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TrafficType" type="xsd:string" minOccurs="0"/>
      <xsd:element name="RadioDataRate" type="FloatValueUnitsType" minOccurs="0"/>
      <xsd:element name="TimeWindow" type="TimeWindowType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimeWindowType">
    <xsd:annotation>
      <xsd:documentation>
        A TimeWindow element describes a period of time related to either absolute time or the beginning of a Time 
        Division Multiple Access (TDMA) epoch.  TimeWindow descriptions are used in several ways in a description of 
        a TmNSGroundRadio configuration.
      </xsd:documentation><xsd:documentation>
        The TWReference element describes the frame of reference for evaluating the value of the TWStart element.  The
        TWReference element is an enumeration that can be set to one of the following values: "BeginningOfEpoch" or
        "AbsoluteTime".
      </xsd:documentation><xsd:documentation>
        The TWLength element, of type mdl:FloatValueUnitstype, indicates the duration of the TimeWindow.  The
        TWLength element is a floating-point value/units pair.
      </xsd:documentation><xsd:documentation>
        The TWStart element, of type mdl:FloatValueUnitstype, indicates the time for the beginning of the TimeWindow.
        If the value of the TWReference element is "BeginningOfEpoch", this is a time relative to the beginning of each
        epoch time.  Otherwise, this is an absolute time.  The TWStart element is a floating-point value/units pair.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TWLength" type="FloatValueUnitsType" minOccurs="0"/>
      <xsd:element name="TWReference" type="TWReferenceType" minOccurs="0"/>
      <xsd:element name="TWStart" type="FloatValueUnitsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>


  <xsd:complexType name="DataOperationsType">
    <xsd:annotation>
      <xsd:documentation>
        The DataOperations element in a MeasurementDomain element is a container for the elements that describe
        operations and manipulations to be applied to data. The DataOperations element is a container for zero or more 
        DataOperation elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DataOperation" type="DataOperationType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataOperationType">
    <xsd:annotation>
      <xsd:documentation>
        The DataOperation element describes an operation, manipulation, or conversion that can be applied to data by
        another MDL entity.  Each DataOperation element operates on a single input and produces a single output.  Each
        DataOperation element shall contain a single Method element.  The Method element, which may be composed of
        other Method elements, describes the actual implementation of the operation to be performed on the input data
        that results in the produced output data.  Please refer to the description of the different implementations of
        the Method element to determine what forms of data (i.e., analog and/or digital) are accepted as input and
        produced as output.
      </xsd:documentation><xsd:documentation>
        The input to the DataOperation element is determined by the MDL elements that reference the DataOperation.
        For example, a Device element may reference a DataOperation element that represents the operations that the
        Device performs on data it receives.
      </xsd:documentation><xsd:documentation>
        The InputUnits and OutputUnits elements may contain either a UnitsRef or an SIUnits element to describe the units 
        of measure for the input and output data.
        OutputUnits).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:choice>
        <xsd:element name="DataOperation" type="SubOperationType" maxOccurs="unbounded"/>
        <xsd:sequence>
          <xsd:element name="Method" type="MethodType"/>
          <xsd:element name="InputUnits" type="UnitsChoiceType" minOccurs="0"/>
          <xsd:element name="OutputUnits" type="UnitsChoiceType" minOccurs="0"/>
        </xsd:sequence>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataOperationRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a DataOperationRef must refer to the ID attribute of a DataOperation.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="SubOperationType">
    <xsd:annotation>
      <xsd:documentation>
        The SubOperation element is an extension of the DataOperationType with an added SubOperationOrderIndex, of type 
        xsd:positiveInteger, to indicate the order in which the sub-operations are applied.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="DataOperationType">
        <xsd:attribute name="SubOperationOrderIndex" type="xsd:positiveInteger" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="MethodType">
    <xsd:annotation>
      <xsd:documentation>
        The Method element describes an implementation of an operation that is applied to input data and produces output
        data.  The list of available implemented operations is provided following the MethodRef element (e.g., the
        LookupTable element, the Padding element, etc.).
      </xsd:documentation><xsd:documentation>
        A Method element shall contain only a single element from the set of elements listed or it shall contain a
        list of other Method elements with explicit Index attributes to indicate the order in which the Methods shall
        be applied.
      </xsd:documentation><xsd:documentation>
        The MethodRef element contains an IDREF attribute, of type xsd:IDREF, that shall refer to the ID attribute of
        a Method element within the same MeasurementDomain.  If the MethodRef element is present, the containing
        Method element shall not contain any of the elements that follow the MethodRef element (e.g., the BitShift
        element, the DiscreteLookupTable element, etc.).  The presence of the MethodRef element means that the
        containing Method element is reusing the implemented operation described by the referenced Method element;
        however, each implemented operation element will specify if it has any restrictions on reusability using this
        mechanism (e.g., see the MathematicalExpression element).
      </xsd:documentation><xsd:documentation>
        The TMATSFormula element, of type xsd:string, describes a data operation as a "formula style" statement
        according to the grammar of the "Derived Parameter Specification" in Appendix P of the TMATS Document.  The
        statement shall use the ID attributes of Port elements in quotations to reference those Port elements that
        provide input data (i.e., the input variables).  The resulting output data of the TMATSFormula element shall
        appear on the output Port element of the containing element (e.g., a DataOperation element).  The TMATSFormula
        element shall accept input data from any number of input Port elements, and the TMATSFormula element shall
        produce output data to a single output Port element.  The Port elements that meet these criteria shall be
        uniquely identifiable in the element that contains the described Method element (e.g., a DataOperation element).
        The input data to the TMATSFormula element shall be analog or digital, and the output data of the TMATSFormula
        element shall be analog or digital.  The description of a TMATSFormula element shall not be reused by another
        Method element using the MethodRef element.  The AnalogToDigitalConversion element is a DataAttributesRef that 
        describes the analog and digital properties of the conversion operation.
      </xsd:documentation><xsd:documentation>
        Note: Future revisions of the Metadata Standard may include more detailed descriptions of thresholds, state 
        descriptions, hysteresis, totalizers, and counters.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:choice>
        <xsd:element name="MethodRef" type="MethodRefType"/>
        <xsd:element name="BitShift" type="BitShiftType"/>
        <xsd:element name="DiscreteLookupTable" type="DiscreteLookupTableType"/>
        <xsd:element name="EncodingConversion" type="EncodingConversionType"/>
        <xsd:element name="EndiannessConversion" type="EndiannessConversionType"/>
        <xsd:element name="LogicalOperation" type="LogicalOperationType"/>
        <xsd:element name="LookupTable" type="LookupTableType"/>
        <xsd:element name="MathematicalExpression" type="MathematicalExpressionType"/>
        <xsd:element name="Padding" type="PaddingType"/>
        <xsd:element name="TMATSFormula" type="xsd:string"/>
        <xsd:element name="AnalogToDigitalConversion" type="DataAttributesRefType"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="MethodRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a MethodRef shall refer to the ID attribute of a Method element in the same 
        MeasurementDomain.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="BitShiftType">
    <xsd:annotation>
      <xsd:documentation>
        The BitShift element describes the bitwise operation of shifting the digital bits of input data.  Each bitwise
        operation describes the type of bitwise shift to perform and the number of bits to shift.  The type of a
        BitShift element will determine the direction of the shift operation and the value of the data bits that are
        shifted into the input data.  The BitShift element shall accept input data from a single input Port element, and
        the BitShift element shall produce output data to a single output Port element.  The Port elements that meet
        these criteria shall be uniquely identifiable in the element that contains the described Method element (e.g., a
        DataOperation element).  The input data to the BitShift element shall be digital (i.e., described by the
        DigitalAttributes element, and the output data of the BitShift element shall be digital (i.e., described by the
        DigitalAttributes element.  The description of a BitShift element may be reused by another Method element using
        the MethodRef element.
      </xsd:documentation><xsd:documentation>
        The ShiftType element describes what type of bitwise shift to perform and the direction in which to shift the
        input data bits.  The supported shift types are "Arithmetic", "Logical", and "Circular", and bits can be shifted
        either "left" or "right". The ShiftType element is an enumeration that can be set to one of the following
        values: ArithmeticLeft, ArithmeticRight, LogicalLeft, LogicalRight, CircularLeft, CircularRight
      </xsd:documentation><xsd:documentation>
        The NumberOfBits element, of type xsd:unsignedInt, indicates the number of data bits to shift into the provided
        input data.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ShiftType" type="ShiftTypeEnum"/>
      <xsd:element name="NumberOfBits" type="xsd:unsignedInt"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DiscreteLookupTableType">
    <xsd:annotation>
      <xsd:documentation>
        The DiscreteLookupTable element describes a lookup table that indicates the mapping of ranges of input data
        values to predefined discrete output values (e.g., a quantizer).  This table is described as collection of
        DiscreteState elements, each of which describes a row of the table.  The DiscreteLookupTable element shall
        accept input data from a single input Port element, and the DiscreteLookupTable element shall produce output
        data to a single output Port element.  The Port elements that meet these criteria shall be uniquely
        identifiable in the element that contains the described Method element (e.g., a DataOperation element).  The
        input data to the DiscreteLookupTable element shall be analog or digital, and the output data of the
        DiscreteLookupTable element shall be digital (i.e., described by the DigitalAttributes element.  The
        description of a DiscreteLookupTable element may be reused by another Method element using the MethodRef
        element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DiscreteState" type="DiscreteStateType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DiscreteStateType">
    <xsd:annotation>
      <xsd:documentation>
        The DiscreteState element describes the mapping of a range of input values to specific output value.
        It describes ranges and/or exact values of analog measurements that define a state
      </xsd:documentation><xsd:documentation>
      The StateRange element, of type mdl:ConditionParameters, is a list of ConditionParameter elements that describe
      a range of input values to be mapped to the output value described by the StateValue element
      </xsd:documentation><xsd:documentation>
        The StateDescription element, of type xsd:string, contains a textual description of the described DiscreteState
        element.  Examples might include "Open", "Closed", "High", "Medium", "Low", etc.
      </xsd:documentation><xsd:documentation>
        The StateValue element, of type mdl:FlexibleLong, describes the output value corresponding to the range of input
        values described by the StateRange element.  The StateValue is an encoded representation of state.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="StateRange" type="ConditionParametersType"/>
      <xsd:element name="StateDescription" type="xsd:string" minOccurs="0"/>
      <xsd:element name="StateValue" type="FlexibleLong"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="EncodingConversionType">
    <xsd:annotation>
      <xsd:documentation>
        The EncodingConversion element describes the conversion of input data from its original digital encoding scheme
        to the output's specified digital encoding scheme.  The resulting output data will fit the description of the
        OutputEncoding element regardless of the presence of the InputEncoding element.  The EncodingConversion element
        shall accept input data from a single input Port element, and the EncodingConversion element shall produce
        output data to a single output Port element.  The Port elements that meet these criteria shall be uniquely
        identifiable in the element that contains the described Method element (e.g., a DataOperation element).  The
        input data to the EncodingConversion element shall be digital (i.e., described by a DigitalAttributes), and the
        output data of the EncodingConversion element shall be digital (i.e., described by a DigitalAttributes element).
        The description of an EncodingConversion element may be reused by another Method element using the MethodRef
        element
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="InputEncoding" type="DigitalEncodingEnum" minOccurs="0"/>
      <xsd:element name="OutputEncoding" type="DigitalEncodingEnum"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="EndiannessConversionType">
    <xsd:annotation>
      <xsd:documentation>
        The EndiannessConversion element describes the conversion of input data from its original endianness description
        (i.e., the ordering of the bits) to the output's specified endianness description.  The resulting output data
        will fit the description of the OutputEndianness element regardless of the presence of the InputEndianness
        element.  The EndiannessConversion element shall accept input data from a single input Port element, and the
        EndiannessConversion element shall produce output data to a single output Port element.  The Port elements that
        meet these criteria shall be uniquely identifiable in the element that contains the described Method element
        (e.g., a DataOperation element).  The input data to the EndiannessConversion element shall be digital (i.e.,
        described by a DigitalAttributes element), and the output data of the EndiannessConversion element shall be
        digital (i.e., described by a DigitalAttributes element).  The description of an EndiannessConversion element
        may be reused by another Method element using the MethodRef element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="InputEndianness" type="EndiannessEnum" minOccurs="0"/>
      <xsd:element name="OutputEndianness" type="EndiannessEnum"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="LogicalOperationType">
    <xsd:annotation>
      <xsd:documentation>
        The LogicalOperation element describes the bitwise logical operation to be applied to the input data value.
        Each LogicalOperation element will apply a single bitwise logical operation, the value of the LogicalOperator
        element, to the input and the LogicalOperand elements.  The LogicalOperation element
        produces a single output data value that reflects the result of the described bitwise logical operation.
      </xsd:documentation><xsd:documentation>
        The input data to the LogicalOperation element shall be digital (i.e., described by a DigitalAttributes
        element), and the output data of the LogicalOperation element shall be digital (i.e., described by a
        DigitalAttributes).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="LogicalOperator" type="LogicalOperatorEnum"/>
      <xsd:element name="LogicalOperand" type="FlexibleLong"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="LogicalOperatorEnum">
    <xsd:annotation>
      <xsd:documentation>
        The LogicalOperator is an enumeration that can be set to one of the following values: 
        "AND", "NAND", "NOR", "NOT", "OR", or "XOR".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="AND"/>
      <xsd:enumeration value="NAND"/>
      <xsd:enumeration value="NOR"/>
      <xsd:enumeration value="NOT"/>
      <xsd:enumeration value="OR"/>
      <xsd:enumeration value="XOR"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="LookupTableType">
    <xsd:annotation>
      <xsd:documentation>
        The LookupTable element describes a lookup table that maps range of input values to a single output value.  The
        LookupTable element shall accept input data from a single input Port element, and the LookupTable element shall
        produce output data to a single output Port element.  The Port elements that meet these criteria shall be
        uniquely identifiable in the element that contains the described Method element (e.g., a DataOperation element).
        The input data to the LookupTable element shall be analog or digital, and the output data of the LookupTable
        element shall be analog or digital.  The description of a LogicalOperation element may be reused by another
        Method element using the MethodRef element
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="LookupTableEntry" type="LookupTableEntryType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="LookupTableEntryType">
    <xsd:annotation>
      <xsd:documentation>
        The LookupTableEntry element describes an entry in the lookup table that describes the mapping of a range of 
        input values to a specific output value.
        The InputRange element, of type mdl:ConditionParameters, is a list of ConditionParameter elements that describe 
        the range of input values that map to the output value described by the OutputValue element of type xsd:double.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="InputRange" type="ConditionParametersType"/>
      <xsd:element name="OutputValue" type="xsd:double"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MathematicalExpressionType">
    <xsd:annotation>
      <xsd:documentation>
        The MathematicalExpression element describes a data operation as a mathematical expression consisting of
        single variable polynomial expressions. The MathematicalExpression element describes a fractional expression of a
        numerator, the PolynomialNumerator element, and a denominator, the PolynomialDenominator element.  Both the
        PolynomialNumerator element and the PolynomialDenominator element are constructed from a set of polynomial
        terms, the Term elements, that are all added together.  Each Term element consists of a Coefficient element and
        an Exponent element.
      </xsd:documentation><xsd:documentation>
        The input to and output from a MathematicalExpression element are determined by the element that references
        the enclosing DataOperation.  For example, a Device may refer to a DataOperation whose Method describes a
        MathematicalExpression performed by that Device.  The input to the Device feeds the input of the
        MathematicalExpression.  The result of a MathematicalExpression is supplied to the output of the Device.
      </xsd:documentation><xsd:documentation>
        The input data to the MathematicalExpression element shall be analog or digital, and the output data of the
        MathematicalExpression element shall be analog or digital.
      </xsd:documentation><xsd:documentation>
      The PolynomialNumerator element, of type mdl:PolynomialTermsType, describes the numerator of the
      MathematicalExpression element as the summation of single variable polynomial terms.  The PolynomialDenominator
      element, of type mdl:PolynomialTermsType, describes the denominator of the MathematicalExpression element as the
      summation of single variable polynomial terms.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="PolynomialNumerator" type="PolynomialTermsType"/>
      <xsd:element name="PolynomialDenominator" type="PolynomialTermsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PolynomialTermsType">
    <xsd:annotation>
      <xsd:documentation>
        The Term element describes a single variable polynomial term.  The Term element describes such a term as a 
        coefficient multiplied by a variable of interest raised to an exponent.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Term" type="TermType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TermType">
    <xsd:annotation>
      <xsd:documentation>
        The Term contains a Coefficient and an Exponent.  The Exponent is applied to the input of the
        MathematicalExpression the result of which is multiplied by the Coefficient.  If the Term describes a single
        constant term of a mathematical expression, the Exponent shall have the value of '0'.  For the case where the
        term is equivalent to a constant 'A' multiplied by the input 'x', the Exponent shall have the value '1'.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Coefficient" type="xsd:double"/>
      <xsd:element name="Exponent" type="xsd:double"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PaddingType">
    <xsd:annotation>
      <xsd:documentation>
        The Padding element describes the addition of bits or "padding" to the provided input data.  The specified
        padding string is appended to the indicated side of the input data to produce the resulting output data that is
        larger in length than the original input data.  The Padding element shall accept input data from a single input
        Port element, and the Padding element shall produce output data to a single output Port element.  The Port
        elements that meet these criteria shall be uniquely identifiable in the element that contains the described
        Method element (e.g., a DataOperation element).  The input data to the Padding element shall be digital (i.e.,
        described by a DigitalAttributes element) and the output data of the Padding element shall be digital (i.e.,
        described by a DigitalAttributes element).  The description of a Padding element may be reused by another Method
        element using the MethodRef element.
      </xsd:documentation><xsd:documentation>
        The PaddingSide element is an enumeration that can be set to one of the following values: Left, Right
        The PaddingValue element, of type mdl:FlexibleLong, describes the padding string that is appended to the 
        indicated side of the input data.   
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="PaddingSide" type="PaddingSideType"/>
      <xsd:element name="PaddingValue" type="FlexibleLong"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkNodeType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkNode element describes a NetworkNode existing within a network.  NetworkNodes are devices that contain
        at least one NetworkInterface that connects the NetworkNode to a network.  NetworkNode is a generic concept to
        describe any device connected to the network.  Additional functionality for a NetworkNode is described as a set
        of applications (TmNSManageableApps) that it contains.  Examples include the DAU, Recorder, and TmNSGroundRadio
        elements described in later sections.
      </xsd:documentation><xsd:documentation>
        The InventoryID element, of type xsd:token, describes the inventory identifier (see System Management Standard)
        of a NetworkNode.  The value of the InventoryID must be unique among all NetworkNode InventoryIDs within the
        MDLRoot element.  The XML processor will remove line feeds, carriage returns, tabs, leading and trailing spaces,
        and multiple spaces from all elements of type xsd:token.
      </xsd:documentation><xsd:documentation>
        The HostName element, of type xsd:string, identifies the host name of the NetworkNode.  
        The TmNSStandardsVersion element, of type xsd:string, describes the version of the TmNS System Management 
        standard with which this NetworkNode complies.
      </xsd:documentation><xsd:documentation>
        The Manufacturer element, of type xsd:string, describes the manufacturer, or make, of the NetworkNode.
      </xsd:documentation><xsd:documentation>
        The Model element, of type xsd:string, describes the model of the NetworkNode (i.e., the model name that a
        manufacturer assigns to the product).
      </xsd:documentation><xsd:documentation>
        The ModelVersion element, of type xsd:string, describes the version of the NetworkNode (i.e., the revision
        number of a particular make and model).
      </xsd:documentation><xsd:documentation>
        The SerialIdentifier element, of type xsd:string, describes the serial identifier (or serial number) assigned to
        the NetworkNode.
      </xsd:documentation><xsd:documentation>
        The IEEEEUI64 element, of type mdl:SixtyFourBit, describes the 64-bit Extended Unique Identifier (EUI)
        associated with this NetworkNode.
      </xsd:documentation><xsd:documentation>
        The IEEE1588SupportedVersion element, of type xsd:string, describes the version of the IEEE 1588 Precision Time
        Protocol (PTP) supported by the NetworkNode.  See references in Section 2.2.2 for details on the IEEE 1588
        Standard.
      </xsd:documentation><xsd:documentation>
        The IEEE1588ClockMode element is an enumeration that describes the clock mode of the IEEE 1588 clock associated
        with the NetworkNode.  Valid values are "SynchronizedSlave", "IEEE1588Master", "FreeRunning", "Negotiable", and 
        "Unknown".
      </xsd:documentation><xsd:documentation>
        The DataBufferLength element describes the length of available (stored) data, in units of time, of the
        NetworkNode.  This value indicates the oldest data that can be requested from the NetworkNode.  A NetworkNode
        that does not have a backlog of data may specify the value of this element to be zero.  The DataBufferLength
        element is a floating-point value/units pair.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="InventoryID" type="xsd:token"/>
      <xsd:element name="HostName" type="xsd:string" minOccurs="0"/>
      <xsd:element name="TmNSStandardsVersion" type="xsd:string" minOccurs="0"/>
      <xsd:element name="InternalStructure" type="InternalStructureType" minOccurs="0"/>
      <xsd:element name="Manufacturer" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Model" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ModelVersion" type="xsd:string" minOccurs="0"/>
      <xsd:element name="SerialIdentifier" type="xsd:string" minOccurs="0"/>
      <xsd:element name="IEEEEUI64" type="SixtyFourBit" minOccurs="0"/>
      <xsd:element name="IEEE1588SupportedVersion" type="IEEE1588SupportedVersionEnum" minOccurs="0"/>
      <xsd:element name="IEEE1588ClockMode" type="IEEE1588ClockModeEnum" minOccurs="0"/>
      <xsd:element name="LogicalLocation" type="LogicalLocationType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PhysicalLocation" type="PhysicalLocationType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TmNSManageableApps" type="TmNSManageableAppsType"/>
      <xsd:element name="NetworkInterface" type="NetworkInterfaceType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TimeSynchronizationPath" type="TimeSynchronizationPathType" minOccurs="0"/>
      <xsd:element name="DataSelectionCharacteristics" type="DataSelectionCharacteristicsType" minOccurs="0"/>
      <xsd:element name="DataBufferLength" type="FloatValueUnitsType" minOccurs="0"/>
      <xsd:element name="Pins" type="PinsType" minOccurs="0">
        <xsd:unique name="UniquePinIndex">
          <xsd:selector xpath="mdl:Pin"/>
          <xsd:field xpath="@Index"/>
        </xsd:unique>
      </xsd:element>
      <xsd:element name="Ports" type="PortsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="NetworkNodeRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a NetworkNodeRef must refer to the ID attribute of a NetworkNode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="InternalStructureType">
    <xsd:annotation>
      <xsd:documentation>
        The InternalStructure element is a placeholder for future description of the device inventory of a NetworkNode.  
      </xsd:documentation><xsd:documentation>
        The InternalStructure element is a work in progress.  Details of the InternalStructure element will be further 
        defined by the MDSWG.  These details will support the following section of the System Management Standard:
      </xsd:documentation><xsd:documentation>
        NetworkNodes shall provide an inventory of internal components.  The internal inventory shall be provided by two 
        means: 1. Metadata file returned by the NetworkNode as described in the Configuration Export process.  
        The format of this information will be described by the Metadata Standard (TBD).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="LogicalLocationType">
    <xsd:annotation>
      <xsd:documentation>
        The LogicalLocation element is used in various elements to describe the logical section or area of a network or 
        Test Article from which the measurement is taken
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PhysicalLocationType">
    <xsd:annotation>
      <xsd:documentation>
        The PhysicalLocation element describes the physical location from which the measurement is taken. 
        The physical location assigned to a measurement does not necessarily match the physical location of 
        the NetworkNode that acquires the measurement.  For example, the value of the PhysicalLocation element 
        for a measurement taken from a remote sensor on a Test Article will differ from the value of the 
        PhysicalLocation element of a DAU that is connected to the sensor through a wire.
        The PhysicalLocation of a NetworkNode describes its physical location.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="Coordinates" type="xsd:string"/>
      <xsd:element name="CoordinateSystem" type="xsd:string" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSManageableAppsType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSManageableApps element is a container for zero or more TmNSManageableApp elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TmNSManageableApp" type="TmNSManageableAppType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSManageableAppType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSManageableApp (abbreviated as TMA) element contains elements that describe characteristics and
        configuration of an application that runs on a NetworkNode and is manageable through the TmNS System Management
        standards.
      </xsd:documentation><xsd:documentation>
        The Name (type xsd:token) and Description (type xsd:string) elements may provide human readable information about 
        the TMA.  The XML processor will remove line feeds, carriage returns, tabs, leading and trailing spaces, and 
        multiple spaces from all elements of type xsd:token.
      </xsd:documentation><xsd:documentation>
        The RoleID, of type xsd:token, shall be used to uniquely identify the TMA.  The Manufacturer element, of type 
        xsd:string, describes the manufacturer, or make, of the TmNSManageableApp.  The LoggingLevel element describes
        the System Management defined logging level used by the TMA.  The ConfigurationVersion element, of type
        xsd:string shall be used to identify the version number of the TMA software for purposes of configuration
        management.
      </xsd:documentation><xsd:documentation>
        The TmNSManageableApp element may contain additional elements that indicate the TMA is operating as a special
        kind of TMA, as identified in the System Management standards.  The element names all begin with 'TmNS'.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="RoleID" type="xsd:token"/>
      <xsd:element name="LoggingLevel" type="LoggingLevelEnum"/>
      <xsd:element name="Manufacturer" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ConfigurationVersion" type="xsd:string"/>
      <xsd:element name="LaunchCommand" type="xsd:string" minOccurs="0"/>
      <!-- TBD FaultNotificationEnable -->
      <!-- TBD FaultNotificationInterval -->
      <!-- TBD FaultNotificationMaxRepeats -->
      <!-- TBD TimeLockLostEnable -->
      <!-- TBD TimeLockLostInterval -->
      <!-- TBD TimeLockLostMaxRepeats -->
      <!-- TBD IntrusionNotificationEnable -->
      <!-- TBD IntrusionNotificationInterval -->
      <!-- TBD IntrusionNotificationMaxRepeats -->
      <!-- TBD IEEE1588MaxOffsetFromMasterEnable -->
      <!-- TBD IEEE1588MaxOffsetFromMasterThreshold -->
      <!-- TBD IEEE1588MaxOffsetFromMasterInterval -->
      <!-- TBD IEEE1588MaxOffsetFromMasterMaxRepeats -->
      <!-- TBD IEEE1588MaxJitterEnable -->
      <!-- TBD IEEE1588MaxJitterThreshold -->
      <!-- TBD IEEE1588MaxJitterInterval -->
      <!-- TBD IEEE1588MaxJitterMaxRepeats -->
      <!-- TBD TempOutOfRangeEnable -->
      <!-- TBD TempOutOfRangeInterval -->
      <!-- TBD TempOutOfRangeMaxRepeats -->
      <!-- TBD TempOutOfRangeLowThreshold -->
      <!-- TBD TempOutOfRangeHighThreshold -->
      <xsd:element name="TmNSNull" type="TmNSNullType" minOccurs="0"/>
      <xsd:element name="TmNSNetworkDevice" type="TmNSNetworkDeviceType" minOccurs="0"/>
      <xsd:element name="TmNSACU" type="TmNSACUType" minOccurs="0"/>
      <xsd:element name="TmNSDAU" type="TmNSDAUType" minOccurs="0"/>
      <xsd:element name="TmNSRecorder" type="TmNSRecorderType" minOccurs="0"/>
      <xsd:element name="TmNSMasterClock" type="TmNSMasterClockType" minOccurs="0"/>
      <xsd:element name="TmNSEncryptor" type="TmNSEncryptorType" minOccurs="0"/>
      <xsd:element name="TmNSMFD" type="TmNSMFDType" minOccurs="0"/>
      <xsd:element name="TmNSSSTTx" type="TmNSSSTTxType" minOccurs="0"/>
      <xsd:element name="TmNSSSTRx" type="TmNSSSTRxType" minOccurs="0"/>
      <xsd:element name="TmNSRCDataSource" type="TmNSRCDataSourceType" minOccurs="0"/>
      <xsd:element name="TmNSRCDataSink" type="TmNSRCDataSinkType" minOccurs="0"/>
      <xsd:element name="TmNSLTCDataSource" type="TmNSLTCDataSourceType" minOccurs="0"/>
      <xsd:element name="TmNSLTCDataSink" type="TmNSLTCDataSinkType" minOccurs="0"/>
      <xsd:element name="TmNSConsolidatedManager" type="TmNSConsolidatedManagerType" minOccurs="0"/>
      <xsd:element name="TmNSRFNetworkManager" type="TmNSRFNetworkManagerType" minOccurs="0"/>
      <xsd:element name="TmNSRadio" type="TmNSRadioType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TmNSLinkManager" type="TmNSLinkManagerType" minOccurs="0"/>
      <xsd:element name="TmNSQueueManager" type="TmNSQueueManagerType" minOccurs="0"/>
      <xsd:element name="TmNSVoiceGateway" type="TmNSVoiceGatewayType" minOccurs="0"/>
      <xsd:element name="TmNSLauncher" type="TmNSLauncherType" minOccurs="0"/>
      <xsd:element name="SNMPInterface" type="SNMPInterfaceType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="ManageableAppRefType">
    <xsd:annotation>
      <xsd:documentation>
        The ManageableAppRef element contains an IDREF attribute, of type xsd:IDREF, that shall reference the ID
        attribute of a TmNSManageableAppType.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="ManageableAppRefsType">
    <xsd:annotation>
      <xsd:documentation>
        The ManageableAppRefs element is a container for one or more ManageableAppRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ManageableAppRef" type="ManageableAppRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSLauncherType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSLauncher element contains a LaunchApps element which contains a list of ManageableAppRefs that describe 
        which TmNSManageableApps the TmNSLauncher is to start or "launch".  The TmNSLauncher application uses the 
        LaunchCommand element of the TmNSManageableApp to start the application.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="LaunchApps" type="ManageableAppRefsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSNullType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSNull element indicates that the particular TMA is a "NullNode".  This
        indicates that the TMA is a NetworkDevice (transfers or transforms TmNSDataMessages and other network
        traffic), but it does not implement the TmNS NetworkDevice System Management interface (see the System
        Management Standard).
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="TmNSNetworkDeviceType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSNetworkDevice element indicates that the particular TMA is a NetworkDevice, and
        thus implements the TmNS NetworkDevice System Management interface (see the System Management Standard). It does
        not imply any further NetworkDevice specialization.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="TmNSACUType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSACU element indicates that the particular TMA is an Antenna Control Unit.
      </xsd:documentation><xsd:documentation>
        The TrackingReceiver element, of type ManageableAppRefsType, contains a reference to the TmNSSSTRx element that 
        is used as the used by the antenna control unit for tracking the test article.
      </xsd:documentation><xsd:documentation>
        The Azimuth and Elevation elements, of type ValueUnitsType, describe the azimuth and elevation settings of the 
        antenna being controlled by the ACU.
      </xsd:documentation><xsd:documentation>
        The ServoEnergized element, of type xsd:boolean, indicates whether or not the servo is energized.
      </xsd:documentation><xsd:documentation>
        The FeedEnabled element, of type xsd:boolean, indicates whether or not the feed is enabled. 
     </xsd:documentation><xsd:documentation>
        The AutoTrackingEnabled element, of type xsd:boolean, indicates whether or not the system is autotracking.
      </xsd:documentation><xsd:documentation>
        The TrackingMode element, of type TrackingModeEnum, indicates the operating mode of the ACU tracking system.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TrackingReceiver" type="ManageableAppRefsType"/>
      <xsd:element name="Azimuth" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="Elevation" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="ServoEnergized" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="FeedEnabled" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="AutoTrackingEnabled" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="TrackingMode" type="TrackingModeEnum" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>


  <xsd:complexType name="TmNSDAUType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSDAU element indicates that the particular TMA is a Data Acquisition Unit.
      </xsd:documentation>
    </xsd:annotation>
    <!-- TBD Add OperationalMode element as an enumeration with valid values: Operational, ZCal, RCal, VSub, Cal1, Cal2, 
         Cal3, Cal4, Cal5, Cal6?  This would match the SM MIB for DAUs. -->
  </xsd:complexType>

  <xsd:complexType name="TmNSRecorderType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSRecorder element indicates that the particular TMA is a Recorder.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="TmNSMasterClockType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSMasterClock element indicates that the particular TMA is a master clock.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="TmNSEncryptorType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of an TmNSEncryptor element indicates that the particular TMA can function as an encryptor.
        The RedNetworkInterfaceRef and BlackNetworkInterfaceRef, of type mdl:NetworkInterfaceRef, indicate which
        NetworkInterface of the NetworkNode transports the encrypted and unencrypted data respectively.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="RedNetworkInterfaceRef" type="NetworkInterfaceRefType"/>
      <xsd:element name="BlackNetworkInterfaceRef" type="NetworkInterfaceRefType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSMFDType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSMFD element indicates that the particular TMA is a multifunction display.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="TmNSSSTTxType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSSSTTx element indicates that the particular TMA can function as an SST
        transmitter.The SSTTxRCCVersion element, of type xsd:string, describes the IRIG version supported by the SST 
        transmitter.  The Channel element, of type SSTTxChannelType, describes the attributes of a transmitter channel.
      </xsd:documentation><xsd:documentation>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="SSTTxRCCVersion" type="xsd:string"/>
      <xsd:element name="Channel" type="SSTTxChannelType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SSTTxChannelType">
    <xsd:annotation>
      <xsd:documentation>
        The CenterFrequency element, of type ValueUnitsType, describes the value and units (normally Hertz) of the center 
        frequency of the SST transmitter.
      </xsd:documentation><xsd:documentation>
        The Modulation element, of type SSTModuleationEnum, is an enumeration of possible modulation modes.
        The Deviation element, of type ValueUnitsType, describes the deviation sensitivity for the PCM-FM modulation mode.
        The DiffEncoding element, of type xsd:boolean, indicates the differential encoding setting for the SST transmitter.
        The Randomize element, of type xsd:boolean, indicates the data randomization setting.
        The RFEnable element, of type xsd:boolean, describes if the RF output is on or off.
        The RFHighPowerEnable element, of type xsd:boolean, indicates whether the high power mode is enabled.
        The DataPolarityInverted element, of type xsd:boolean, indicates if the data polarity is normal (false) or 
        inverted (true)
      </xsd:documentation><xsd:documentation>
        The DataSourceInternal element, of type xsd:boolean, indicates wheter the data source is internal (true) or 
        external (false).
        The InternalDataPattern element, of type xsd:unsignedInt, describes the data pattern produced by an internal source.
        The InternalClock element, of type xsd:boolean, indicates whether the internal clock is used.
        The ClockRate element, of type ValueUnitsType, describes the clock rate, whether internal or external.
      </xsd:documentation><xsd:documentation>
        The FECEnable element, of type xsd:boolean, indicates whether forward error correction is enabled.
        The FECType element, of type xsd:string, describes the type of forward error correction used.
        The SleepMode element, of type xsd:boolean, describes whether the transmitter is in a low power sleep mode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ChannelNumber" type="xsd:positiveInteger"/>
      <xsd:element name="CenterFrequency" type="ValueUnitsType"/>
      <xsd:element name="Modulation" type="SSTModulationEnum" minOccurs="0"/>
      <xsd:element name="Deviation" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="DiffEncoding" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="Randomize" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="RFEnable" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="RFHighPowerEnable" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="DataPolarityInverted" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="DataSourceInternal" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="InternalDataPattern" type="xsd:unsignedInt" minOccurs="0"/>
      <xsd:element name="InternalClock" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="ClockRate" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="FECEnable" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="FECType" type="xsd:string" minOccurs="0"/>
      <xsd:element name="SleepMode" type="xsd:boolean" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TmNSSSTRxType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSSSTRx element indicates that the particular TMA can function as an SST receiver.
        The list of Channel elements indicate the RF channels available for receiving.
        TBD - Does an SST Rx Proxy need to handle more than one SST Receiver?
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Channel" type="SSTRxChannelType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SSTRxChannelType">
    <xsd:annotation>
      <xsd:documentation>
        The Channel element describes the channel number and the center frequency of the RF channel.  
      </xsd:documentation><xsd:documentation>
        The ChannelNumber element, of type xsd:positiveInteger, indicates the number of the channel.
        The CenterFrequency element, of type mdl:ValueUnitsType, describes the center frequency with standard units of 
        frequency (Hertz, or multiples of Hertz).
        The Bandwidth element, of type mdl:ValueUnitsType, describes the bandwidth setting of the receiver.
        The Modulation element, of type SSTModuleationEnum, is an enumeration of possible modulation modes.
        The AutoGainMode element, of type xsd:boolean, describes whether the using an automatic or manual gain mode.
        The ManualGain element, of type ValueUnitsType, describes the value and units of the manual gain, when used.
      </xsd:documentation><xsd:documentation>
        The ACGTimeConstant element, of type ValueUnitsType, describes the value and units of the AGC time constant.  
        Values supported by the system management standard are 0.1, 1, 10, 100, and 1000 milliseconds. (TBD Enumeration?)
      </xsd:documentation><xsd:documentation>
        The ClockPolarityInverted element, of type xsd:boolean, describes the polarity of the bit sync TTL clock output.
        The DataPolarityInverted element, of type xsd:boolean, describes the polarity of the bit sync TTL data output.
      </xsd:documentation><xsd:documentation>
        The SweepEnable element, of type xsd:boolean, describes the setting for the demodulator sweep.
        The SweepRangeLow element, of type xsd:boolean, describes the value and units (Hertz) for the lower limit of the 
        sweep function.
        The SweepRangeHigh element, of type xsd:boolean, describes the value and units (Hertz) for the upper limit of the 
        sweep function.
      </xsd:documentation><xsd:documentation>
        The DiffDecoding element, of type xsd:boolean, indicates the differential decoding setting for the SST transmitter.
        The Derandomize element, of type xsd:boolean, indicates the data derandomization setting.
        The DataSourceSimulated element, of type xsd:boolean, describes whether the data source is simulated (true) or 
        real (false).
        The InternalDataPattern element, of type xsd:unsignedInt, describes the data pattern produced by an internal source.
        The BitRate element, of type ValueUnitsType, describes the bit rate of the receiver channel.
        The FECEnable element, of type xsd:boolean, indicates whether forward error correction is enabled.
        The FECType element, of type xsd:string, describes the type of forward error correction used.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ChannelNumber" type="xsd:positiveInteger"/>
      <xsd:element name="CenterFrequency" type="ValueUnitsType"/>
      <xsd:element name="Bandwidth" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="Modulation" type="SSTModulationEnum" minOccurs="0"/>
      <xsd:element name="AutoGainMode" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="ManualGain" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="AGCTimeConstant" type="ValueUnitsType" minOccurs="0"/>
      <!-- SignalStrength (value plus units, TBD - This would only be used for As-built reporting) -->
      <xsd:element name="ClockPolarityInverted" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="DataPolarityInverted" type="xsd:boolean" minOccurs="0"/>
      <!-- BitSyncLocked (boolean - TBD - only used for as-built) -->
      <xsd:element name="SweepEnable" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="SweepRangeLow" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="SweepRangeHigh" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="DiffDecoding" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="Derandomize" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="DataSourceSimulated" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="InternalDataPattern" type="xsd:unsignedInt" minOccurs="0"/>
      <xsd:element name="BitRate" type="ValueUnitsType" minOccurs="0"/>
      <xsd:element name="FECEnable" type="xsd:boolean" minOccurs="0"/>
      <xsd:element name="FECType" type="xsd:string" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="SSTChannelRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of an SSTChannelRefshall refer to the ID attribute of a Channel element within a 
        TmNSSSTRx or TmNSSSTTx element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TmNSRCDataSourceType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of the TmNSRCDataSource element indicates that the TMA is operating as an RC Data Source per the
        Test Article standard.  The Requirements section, of type mdl:RCSourceReqImplType, of a TmNSRCDataSource
        contains the list of all MDIDs, PDIDs, and MeasIDs that the RCSource is instructed to generate. The
        Implementation section, of type mdl:RCSourceReqImplType, contains the subset of the Requirements lists that the
        RC Source actually supports.  RC Data Source needs to be aware of all MDIDs, PDIDs, and MeasIDs in the domain so
        that when a request comes in it can either build the message or reject it.  The NetworkInterfaceRef may be used
        to indicate which NetworkInterface is being used by the RCDataSource for NetworkNodes with one or more
        NetworkInterfaces.The ListeningPort may be used to describe the IP port on which the RC Data Source is listening
        whether using the standard port or another.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Requirements" type="RCSourceReqImplType" minOccurs="0"/>
      <xsd:element name="Implementation" type="RCSourceReqImplType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="RCSourceReqImplType">
    <xsd:annotation>
      <xsd:documentation>
        The Requirements section of a TmNSRCDataSource contains the list of all MDIDs, PDIDs, and MeasIDs that the
        RCSource is instructed to generate. The Implementation section contains the subset of the Requirements lists
        that the RC Source actually supports.  RC Data Source needs to be aware of all MDIDs, PDIDs, and MeasIDs in
        the domain so that request comes in it can either build the message or reject it.  The NetworkInterfaceRef may be 
        used to indicate which NetworkInterface is being used by the RCDataSource for NetworkNodes with one or more 
        NetworkInterfaces.The ListeningPort may be used to describe the IP port on which the RC Data Source is listening 
        whether using the standard port or another.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType" minOccurs="0"/>
      <xsd:element name="ListeningPort" type="xsd:unsignedShort" minOccurs="0"/>
      <xsd:element name="MessageDefinitionRef" type="MessageDefinitionRefType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PackageDefinitionRef" type="PackageDefinitionRefType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="MeasurementRef" type="MeasurementRefType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PreSelectMeasurementList" type="PreSelectMeasurementListType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PreSelectMeasurementListType">
    <xsd:annotation>
      <xsd:documentation>
        The PreSelectMeasurementList element contains a list of MeasurementRef elements that describe which
        measurements are to be produced by the RCDataSource within a shorter period of time than typical requests.
        See the requirements document fo r iNET TA Recorder for additional information.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="MeasurementRef" type="MeasurementRefType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>


  <xsd:complexType name="TmNSRCDataSinkType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSRCDataSink element indicates that the particular TMA is an RC Data Sink per the Test 
        Article Standard.  The TmNSRCDataSink has no configuration parameters at this time.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="TmNSLTCDataSourceType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSLTCDataSource element indicates that the particular TMA is an LTC Data Source per the Test
        Article Standard.  The Requirements section, of type mdl:MessageDefinitionRefsType, of a TmNSLTCDataSource
        contains the list of all MDIDs that the LTCSource is instructed to generate. The Implementation section, of type
        mdl:MessageDefinitionRefsType, contains the subset of the Requirements lists that the LTC Source actually
        supports.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TTL" type="xsd:unsignedByte"/>
      <xsd:element name="Requirements" type="MessageDefinitionRefsType" minOccurs="0"/>
      <xsd:element name="Implementation" type="MessageDefinitionRefsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSLTCDataSinkType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSLTCDataSink element indicates that the particular TMA is an LTC Data Sink per the Test 
        Article Standard. The TmNSLTCDataSink contains the list of all MDIDs that the LTCSink is instructed to collect.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="MessageDefinitionRef" type="MessageDefinitionRefType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSConsolidatedManagerType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSConsolidatedManager element is an element that can be contained by a TmNSManageableApp (TMA) element to
        describe a TMA that has the ability to function as a TMAManager using the standard System Management
        interfaces (see the System Management Standard).
      </xsd:documentation><xsd:documentation>
        A TmNSConsolidatedManager element can contain a ManagedApps element that contains a list of one or more 
        ManageableAppRef elements, each of which references the ID attribute of a TmNSManageableApp element.  The 
        meaning is that the TMA containing the TmNSConsolidatedManager element manages this set of TmNSManageableApps.
      </xsd:documentation><xsd:documentation>
        The DeviceAutoDiscovery element may be used to describe a TmNSConsolidatedManager that performs device auto 
        discovery through a broadcast ping or through a ping sweep of IP addresses.  If the element is present, the 
        manager performs auto discovery, otherwise it does not.
      </xsd:documentation><xsd:documentation>
        The FTPServerURI element may be used to statically configure the ftp address of the MDL instance document.
      </xsd:documentation><xsd:documentation>
        The DeviceConfigurationTimeout element of type mdl:FloatValueUnitsType may be used to describe how long, in seconds,
        the manager should wait for a device to configure itself.
      </xsd:documentation><xsd:documentation>
      The DeviceStatusMonitoringPeriod element of type mdl:FloatValueUnitsType may be used to describe how long, in
      seconds, the manager should wait between performing status monitoring on a device.
      </xsd:documentation><xsd:documentation>
        The DeviceConfigurationTimeoutAttempts element of type xsd:unsignedLong may be used to describe the number of 
        SNMP queries that a manager attempts before the declaring a timeout fault.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ManagedApps" type="ManageableAppRefsType" minOccurs="0"/>
      <xsd:element name="DeviceAutoDiscovery" type="DeviceAutoDiscoveryType" minOccurs="0"/>
      <xsd:element name="FTPServerURI" type="xsd:anyURI" minOccurs="0"/>
      <xsd:element name="DeviceConfigurationTimeout" type="FloatValueUnitsType" minOccurs="0"/>
      <xsd:element name="DeviceStatusMonitoringPeriod" type="FloatValueUnitsType" minOccurs="0"/>
      <xsd:element name="DeviceCommunicationTimeoutAttempts" type="xsd:unsignedLong" minOccurs="0"/>
      <!-- TBD NotificationInterval -->
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DeviceAutoDiscoveryType">
    <xsd:annotation>
      <xsd:documentation>
        The DeviceAutoDiscovery element describes various ways a TmNSConsolidatedManager may perform device auto 
        discovery.  The BroadcastIPAddress may be used to describe a broadcast ping configuration.  The PingSweepRanges 
        element may be used to describe individual IP addresses, or ranges of IP addresses to which a ping query may be 
        sent.  The DeviceAutoDiscoveryPeriod element of type mdl:FloatValueUnitsType describes a time interval (generally 
        in seconds) at which the device auto discovery procedure is performed.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="BroadcastIPAddress" type="IPAddress" minOccurs="0"/>
      <xsd:element name="PingSweepRanges" type="PingSweepRangesType" minOccurs="0"/>
      <xsd:element name="DeviceAutoDiscoveryPeriod" type="FloatValueUnitsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PingSweepRangesType">
    <xsd:annotation>
      <xsd:documentation>
        The PingSweepRanges element contains a list of one or more PingSweepRange elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="PingSweepRange" type="PingSweepRangeType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PingSweepRangeType">
    <xsd:annotation>
      <xsd:documentation>
        The PingSweepRange element describes the begin and ending IP addresses to be queried during a ping sweep for 
        device discovery.  If the StartIPAddress and StopIPAddress elements are the same, only a single IP address is 
        pinged.  If the addresses are different, an inclusive search of each IP address in the range is performed.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="StartIPAddress" type="IPAddress"/>
      <xsd:element name="StopIPAddress" type="IPAddress"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSRFNetworkManagerType">
    <xsd:annotation>
      <xsd:documentation>
        Note: The TmNSRFNetworkManager element will be updated as more details are determined by the Communication Link 
        Standard Working Group.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="RFNEProtocolServer" type="RFNEProtocolServerType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSRadioType">
    <xsd:annotation>
      <xsd:documentation>
        The presence of a TmNSRadio element indicates that the particular TMA can function as 
        a "TmNS Radio".  Note: The TmNSRadio element will be updated as more details are determined by the 
        Communication Link Standard Working Group.
      </xsd:documentation>
      <xsd:documentation>
        TBD Need updated elements from RANS team.
        SymbolPeriod: 3-bit code
        Modulation: SOQPSK-TG, QPSK OFDM, 16-QAM OFDM
        FrequencyBand: LowerL, UpperL, LowerS, UpperS, LowerC, UpperC
        SlotAssignment
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="CommittedRate" type="CommittedRateType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="MinimumRateConfiguration" type="MinimumRateConfigurationType" minOccurs="0"/>
      <xsd:element name="RadioType" type="RadioTypeEnum" minOccurs="0"/> <!-- TBD -->
      <xsd:element name="TransceiverID" type="xsd:unsignedShort" minOccurs="0"/> <!-- TBD uniqueness?-->
      <xsd:element name="LinkAgent" type="LinkAgentType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="LinkAgentType">
    <xsd:annotation>
      <xsd:documentation>
        The LinkAgent element is an element that can be contained by a TmNSRadio to describe the network interface 
        and IP port number used to received UDP datagrams from a TmNSLinkManager.
        </xsd:documentation><xsd:documentation>
        Note: The LinkAgentType element will be updated as more details are determined by the RAN working group
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType" minOccurs="0"/>
      <xsd:element name="ListeningPort" type="xsd:unsignedShort" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSLinkManagerType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSLinkManager element is an element that can be contained by a TmNSManageableApp element to describe a
        TMA that has the ability to function as a Link Manager in the RF Network.
      </xsd:documentation><xsd:documentation>
        A TmNSLinkManager element can contain a ManagedApps element that contains one or more ManageableAppRef elements, 
        each of which references the ID attribute of a TmNSManageableApp element that corresponds with the Queue Manager 
        or Radio components of the RF Network.  The meaning of this is that the QueueManager and Radio resources are 
        managed by the Link Manager.
      </xsd:documentation><xsd:documentation>
        Note: The TmNSLinkManager element will be updated as more details are determined by the Communication Link 
        Standard Working Group.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ManagedApps" type="ManageableAppRefsType" minOccurs="0"/>
      <xsd:element name="RFNEProtocolServer" type="RFNEProtocolServerType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSQueueManagerType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSQueueManager element is an element that can be contained by a NetworkNode element to describe a
        TMA that has the ability to function as a Queue Manager in the RF Network.
      </xsd:documentation><xsd:documentation>
        A TmNSQueueManager element can contain a ManagedApps element that contains one or more ManageableAppRef elements, 
        each of which references the ID attribute of a TmNSManageableApp element that correspond with the Radio components 
        of the RF Network. The meaning of this is that the Radio resources are managed by the Queue Manager.
      </xsd:documentation><xsd:documentation>
        Note: The TmNSQueueManager element will be updated as more details are determined by the Communication Link 
        Standard Working Group.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ManagedApps" type="ManageableAppRefsType" minOccurs="0"/>
      <xsd:element name="RFNEProtocolServer" type="RFNEProtocolServerType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TmNSVoiceGatewayType">
    <xsd:annotation>
      <xsd:documentation>
        The TmNSVoiceGateway element is an element that can be contained by a TmNSManageableApp element to
        describe a TMA that has the ability to function as a TmNSVoiceGateway in a TmNS system.
      </xsd:documentation><xsd:documentation>
        The VoiceDSCPTableEntryRef, of type mdl:DSCPTableEntryRefType, contains an IDREF attribute that refers to
        the ID attribute of the DSCPTableEntry that describes the DSCP markings for the voice data traffic.
      </xsd:documentation><xsd:documentation>
        The ControlDSCPTableEntryRef, of type mdl:DSCPTableEntryRefType, contains an IDREF attribute that refers
        to the ID attribute of the DSCPTableEntry that describes the DSCP markings for the control data traffic.
      </xsd:documentation><xsd:documentation>
        The CodecPriorities element contains a prioritized list of codecs to be used for voice traffic.
      </xsd:documentation><xsd:documentation>
        The PhoneNumberMappings element contains a mapping of IP adddresses to phone numbers for voice calls.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="VoiceDSCPTableEntryRef" type="DSCPTableEntryRefType" minOccurs="0"/>
      <xsd:element name="ControlDSCPTableEntryRef" type="DSCPTableEntryRefType" minOccurs="0"/>
      <xsd:element name="CodecPriorities" type="CodecPrioritiesType"/>
      <xsd:element name="PhoneNumberMappings" type="PhoneNumberMappingsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CodecPrioritiesType">
    <xsd:annotation>
      <xsd:documentation>
        The CodecPriorities element contains a list of one or more CodecPriority elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="CodecPriority" type="CodecPriorityType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CodecPriorityType">
    <xsd:simpleContent>
      <xsd:annotation>
        <xsd:documentation>
          The CodecPriority contains a string that describes the name of a voice codec to be used in a TmNSVoiceGateway.
          The value of the string shall be the identifiable name of the codec.  The Index attribute is a positive integer
          (greater than zero) that describes the priority of the codec.  The lower the Index, the higher the priority.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:extension base="xsd:string">
        <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType name="PhoneNumberMappingsType">
    <xsd:annotation>
      <xsd:documentation>
        The PhoneNumberMappings element contains one or more PhoneNumberMapping elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="PhoneNumberMapping" type="PhoneNumberMappingType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PhoneNumberMappingType">
    <xsd:annotation>
      <xsd:documentation>
        The PhoneNumberMapping element contains an IPAddress element and the VoIP phone number associated with that IP 
        address.  The PhoneNumber element is a string of between 3 and 10 digits with no hypens or dashes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="IPAddress" type="IPAddress"/>
      <xsd:element name="PhoneNumber" type="PhoneNumberType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="RFNEProtocolServerType">
    <xsd:annotation>
      <xsd:documentation>
        The RFNEProtocolServer element is an element that can be contained by a TmNSLinkManager, TmNSQueueManager, or 
        TmNSRFNetworkManager to describe the network interface and listening IP port number used by the RFNE
        Protocol Server.
      </xsd:documentation><xsd:documentation>
        TBD Note: The RFNEProtocolServer element will be updated as more details are determined by the RAN working group
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ProtocolType" type="RFNEProtocolEnum" minOccurs="0"/>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType" minOccurs="0"/>
      <xsd:element name="ListeningPort" type="xsd:unsignedShort" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SNMPInterfaceType">
    <xsd:annotation>
      <xsd:documentation>
        The SNMPInterface element carries values for MIB variables that may be used by a System Management application
        to configure or verify the NetworkNode's SNMP interface.
        The SNMPVersion element, of type xsd:string, describes the version of SNMP that is used by this SNMP interface.
      </xsd:documentation><xsd:documentation>
        The DSCPTableEntryRef element describes DSCP settings for management data or management data requests sent by a
        NetworkNode or by a NetworkNodeManager.  The DSCPTableEntryRef element contains an IDREF attribute, of type
        xsd:IDREF, that shall reference the ID attribute of a DSCPTableEntry element.
      </xsd:documentation><xsd:documentation>
        The SNMPPort element, of type xsd:unsignedShort, may optionally be used to statically assign a port number to 
        the SNMP agent for situations where multiple NetworkNodes are running on the same network interface of a shared 
        hardware platform.
      </xsd:documentation><xsd:documentation>
        The NotificationPort element, of type xsd:unsignedShort, may optionally be used to statically assign a port 
        number to the SNMP agent on which it will receive notifications for situations where multiple NetworkNodes 
        are running on the same network interface of a shared hardware platform.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="SNMPVersion" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="SNMPPort" type="xsd:unsignedShort" minOccurs="0"/>
      <xsd:element name="NotificationPort" type="xsd:unsignedShort" minOccurs="0"/>
      <xsd:element name="DSCPTableEntryRef" type="DSCPTableEntryRefType" minOccurs="0"/>
      <xsd:element name="NetworkInterfaceRef" type="NetworkInterfaceRefType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkInterfaceType">
    <xsd:annotation>
      <xsd:documentation>
        A NetworkInterface element describes the module or component that provides the interface between a NetworkNode
        and a network.  A NetworkNode can contain one or more NetworkInterfaces, and will have a NetworkInterface
        element describing each.
      </xsd:documentation><xsd:documentation>
        The IPAddress element, of type mdl:IPAddress, describes the IP address associated with the NetworkInterface.
        The MACAddress element, of type mdl:MACAddress, describes the MAC address associated with a NetworkInterface.
        The Netmask element, of type mdl:IPAddress, describes the netmask value associated with a NetworkInterface.
        The Gateway element, of type mdl:IPAddress, describes the gateway value associated with a NetworkInterface.
        The DHCPEnable element, of type xsd:boolean, indicates whether or not Dynamic Host Configuration Protocol (DHCP)
        is enabled for a NetworkInterface.
      </xsd:documentation><xsd:documentation>
        When a NetworkNode on which DHCP is enabled returns an "as-built" MDL instance document, DHCPEnable shall be set 
        to true and the IPAddress, Netmask, and Gateway need not be set.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="InterfaceName" type="xsd:string"/>
      <xsd:element name="DHCPEnable" type="xsd:boolean"/>
      <xsd:element name="IPAddress" type="IPAddress" minOccurs="0"/>
      <xsd:element name="Netmask" type="IPAddress" minOccurs="0"/>
      <xsd:element name="Gateway" type="IPAddress" minOccurs="0"/>
      <xsd:element name="MACAddress" type="MACAddress" minOccurs="0"/>
      <xsd:element name="PhysicalNetworkPort" type="PhysicalNetworkPortType" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="NetworkInterfaceRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a NetworkInterfaceRef shall refer to the ID attribute of a NetworkInterface within the 
        same NetworkNode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PhysicalNetworkPortType">
    <xsd:annotation>
      <xsd:documentation>
        A PhysicalNetworkPort element describes the physical point of connection between the NetworkNodes that make up a
        network.  The Medium element describes the physical medium used by the port to transfer data.  The Medium
        element is an enumeration that can be set to one of the following values: Copper, Fiber, Wireless
      </xsd:documentation><xsd:documentation>
        The PortNumber element, of type xsd:unsignedShort, describes the number assigned to a PhysicalNetworkPort.  This
        is used to describe the numbering of the physical ports on a NetworkNode.  For example, a switch may have ports
        "1", "2", "3", and "4".  The value of the PortNumber element of PhysicalNetworkPort element shall be a
        non-negative integer that is unique within the scope of the NetworkNode element containing it.  For instance, a
        switch containing a NetworkInterface element with N PhysicalNetworkPorts shall have N PhysicalNetworkPort
        elements, each with a unique PortNumber value.
      </xsd:documentation><xsd:documentation>
 	The Metadata Standard does not place further requirements on the values of PortNumber elements.  It is
        not required that the PortNumber elements for PhysicalNetworkPort elements on a NetworkNode have contiguous
        values. Likewise, the starting value (lowest number) is not standardized.  A NetworkNode may use zero-based port
        numbering or one-based numbering.  As an example, ports can be numbered 2, 4, 6, and 8.  It is recommended that
        the PortNumber elements of a NetworkNode should be one-based and use contiguous values.  For example, a
        NetworkNode with four ports should use the values 1, 2, 3, and 4.
      </xsd:documentation><xsd:documentation>
        The PortDataRate element, of type mdl:FloatValueUnitsType, describes the data rate of a PhysicalNetworkPort.  
        The data rate indicates the average number of transferred digital data units per unit of time.  The PortDataRate 
        element is a floating-point value/units pair.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/> <!--TBD Add uniqueness constraint? At NetworkNode Level?-->
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="Medium" type="MediumEnum" minOccurs="0"/>
      <xsd:element name="PortNumber" type="xsd:integer" minOccurs="0"/>
      <xsd:element name="PortDataRate" type="FloatValueUnitsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PhysicalNetworkPortRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a PhysicalNetworkPortRef must refer to the ID attribute of a PhysicalNetworkPort.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PinsType">
    <xsd:annotation>
      <xsd:documentation>
        The Pins element is a container for zero or more Pin elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Pin" type="PinType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PinType">
    <xsd:annotation>
      <xsd:documentation>
        The Pin element describes a connection point on a physical device.   The Pin element contains an Index 
        attribute, of type xsd:positiveInteger, which indicates the order of the Pin elements. 
      </xsd:documentation><xsd:documentation>
        The DataOperationRef may be used to describe the operations perfomed by internal signal conditioning electronics.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="DataOperationRef" type="DataOperationRefType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PinRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a PinRef must refer to the ID attribute of a Pin within the same NetworkNode.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PortsType">
    <xsd:annotation>
      <xsd:documentation>
        The Ports element may contain zero or more Port elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Port" type="PortType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PortType">
    <xsd:annotation>
      <xsd:documentation>
        The Port element describes an interface through which Metadata elements share information (e.g., data content or
        data properties) with other Metadata elements.  The Port element can describe an interface through which
        information content is made available to other Metadata elements (e.g., output ports), or the Port element can
        describe an interface that accepts the available information content to be used for internal purposes by other
        Metadata elements (e.g., input ports).  A Port element can contain a set of PinRef elements that indicate the
        connection points (i.e., the Pin elements) that represent the physical realization of the Port element.
      </xsd:documentation><xsd:documentation>
        The PortDirection element indicates the directionality of the flow of content through the interface described by
        a Port element.  The PortDirection element is an enumeration that can be set to one of the following values:
        Input, Output, Bidirectional, Unspecified
      </xsd:documentation><xsd:documentation>
        The optional PhysicalNetworkPortRef and PinRef provide linkages between system topology and physical interfaces.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PortDirection" type="PortDirectionEnum"/>
      <xsd:choice>
        <xsd:element name="PhysicalNetworkPortRef" type="PhysicalNetworkPortRefType" minOccurs="0"/>
        <xsd:element name="PinRef" type="PinRefType" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PortRefType">
    <xsd:annotation>
      <xsd:documentation>
        The PortRef element contains an IDREF attribute that shall refer to the ID attribute of a Port.  PortRef elements
        within a Network shall refer to a Port contained within the same Network or a contained sub-Network.  PortRef
        elements with the N2NPortMapping element may refer to Ports in other Networks.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataSelectionCharacteristicsType">
    <xsd:annotation>
      <xsd:documentation>
        The DataSelectionCharacteristics element describes the characteristics of a subset of data that is to be
        selected by that NetworkNode.  Selection in this case means that the NetworkNode is to receive the data.  This
        selection may be done by specifying a DestinationAddress to subscribe to, a MessageDefinition element,
        a PackageDefinition element, or a Measurement element.  The selection can be further constrained by applying a
        "SelectionHeaderField" or "SelectionField" to the specified DestinationAddress element, MessageDefinition
        element, PackageDefinition element, or Measurement element.  (TBD put choice around Refs, add list of
        DataSelectionCharacteristics)
      </xsd:documentation><xsd:documentation>
        If multiple "DataSelectionCharacteristics" are specified, data that meets any of the
        "DataSelectionCharacteristics" is selected (i.e., "DataSelectionCharacteristics" are combined using a logical
        "OR").  If multiple "SelectionHeaderField" or "SelectionField" specifications are present, only data that
        satisfies both criteria is selected (i.e., "SelectionHeaderFields" and "SelectionFields" are combined using a
        logical "AND").
      </xsd:documentation><xsd:documentation>
        A DataSelectionCharacteristics element shall contain at least one SelectionHeaderField element or one
        SelectionField element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="DestinationAddress" type="IPAddress" minOccurs="0"/>
      <xsd:element name="MessageDefinitionRef" type="MessageDefinitionRefType" minOccurs="0"/>
      <xsd:element name="PackageDefinitionRef" type="PackageDefinitionRefType" minOccurs="0"/>
      <xsd:element name="MeasurementRef" type="MeasurementRefType" minOccurs="0"/>
      <xsd:element name="SelectionHeaderField" type="SelectionHeaderFieldType" maxOccurs="unbounded"/>
      <xsd:element name="SelectionField" type="SelectionFieldType"  maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SelectionHeaderFieldType">
    <xsd:annotation>
      <xsd:documentation>
        The SelectionHeaderField element describes a specific header value or set of header values, which, when present,
        indicate selected data.  The interpretation of the SelectionMask and SelectionValue elements is that the value
        of the SelectionMask element will first be applied to the value, and if the result of applying the mask
        satisfies the selection criteria of the SelectionValue element, the corresponding data is selected.
      </xsd:documentation><xsd:documentation>
        The SelectionMask element, of type mdl:MaskType, describes a bit mask to apply to the specified header field
        before it is compared against the SelectionValue element.
      </xsd:documentation><xsd:documentation>
      The SelectionValue element, of type mdl:ConditionParameters, is a list of ConditionParameters that describes the
      allowed value or range of values, after the mask is applied, for the data to be selected.  The specified
      value(s) shall be of type mdl:FlexibleLong.  If no minimum bound is specified, there is no minimum value for the
      specified set of bits.  Also, if no maximum bound is specified, there is no maximum value for the specified set
      of bits.
      </xsd:documentation><xsd:documentation>
        The HeaderFieldName element, of type xsd:string, specifies the named header field of interest, whose value will
        be masked and compared against the SelectionValue element.  The valid header field names are defined in the Test
        Article Standard.
      </xsd:documentation><xsd:documentation>
        The SelectionMask element, of type mdl:MaskType, describes a bit mask to apply to the specified header field
        before it is compared against the SelectionValue element.
      </xsd:documentation><xsd:documentation>
      The SelectionValue element, of type mdl:ConditionParameters, is a list of ConditionParameter elements that
      describes the allowed value or range of values, after the mask is applied, for the data to be selected.  The
      specified value(s) shall be of type mdl:FlexibleLong.  If no minimum bound is specified, there is no minimum
      value for the specified set of bits.  Also, if no maximum bound is specified, there is no maximum value for the
      specified set of bits.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="HeaderFieldName" type="xsd:string" minOccurs="0"/>
      <xsd:element name="SelectionMask" type="MaskType" minOccurs="0"/>
      <xsd:element name="SelectionValue" type="ConditionParametersType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SelectionFieldType">
    <xsd:annotation>
      <xsd:documentation>
        The SelectionField element describes both a set of bits and a range of values to which those bits indicate data
        to be selected.  The interpretation of the SelectionMask and SelectionValue elements is that the value of the
        SelectionMask element will first be applied to the value, and if the result of applying the mask satisfies the
        selection criteria of the SelectionValue element, the corresponding data is selected.
      </xsd:documentation><xsd:documentation>
        The SelectionMask element, of type mdl:MaskType, describes a bit mask to apply to the specified field before it
        is compared against the SelectionValue element.
      </xsd:documentation><xsd:documentation>
      The SelectionValue element, of type mdl:ConditionParameters, is a list of ConditionParameter elements that
      describes the allowed value or range of values, after the mask is applied, for the data to be selected.  The
      specified value(s) shall be of type mdl:FlexibleLong.  If no minimum bound is specified, there is no minimum
      value for the specified set of bits.  Also, if no maximum bound is specified, there is no maximum value for the
      specified set of bits
      </xsd:documentation><xsd:documentation>
        The SelectionFieldOrigin element is an enumeration that is restricted to the following strings (with
        descriptions): 
      </xsd:documentation><xsd:documentation>
        "fromTmNSDataMessage" - The field of interest is located SelectionFieldOffset bits relative to the first bit of 
        the TmNSDataMessage.
      </xsd:documentation><xsd:documentation>
        "fromPackage" - The field of interested is located SelectionFieldOffset bits relative to the first bit of a Package.
      </xsd:documentation><xsd:documentation>
        The SelectionFieldOffset element, of type xsd:integer, indicates the first bit of the SelectionField element.
        The offset is found relative to the first bit of the transport, TmNSDataMessage, Package, or Measurement
        referenced by the DataSelectionCharacteristics element.
      </xsd:documentation><xsd:documentation>
        The SelectionFieldWidth element, of type xsd:integer, describes the number of bits in the SelectionField
        element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="SelectionMask" type="MaskType" minOccurs="0"/>
      <xsd:element name="SelectionValue" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="SelectionFieldOrigin" type="SelectionFieldOriginType"/>
      <xsd:element name="SelectionFieldOffset" type="xsd:integer"/>
      <xsd:element name="SelectionFieldWidth" type="xsd:integer"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkDomainsType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkDomains element is a container for zero or more Network elements and a list of network-to-network 
        PortMappings in the N2NPortMapping elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Network" type="NetworkType" minOccurs="0" maxOccurs="unbounded">

        <xsd:key name="PortInSameNetworkKey">
          <xsd:selector xpath=".//mdl:Port"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PortInSameNetworkKeyRef" refer="mdl:PortInSameNetworkKey">
          <xsd:selector xpath=".//mdl:PortRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:unique name="uniqueRoleID">
          <xsd:annotation>
            <xsd:documentation>
              This constraint enforces the rule that TmNSManageableApp:RoleIDs must be unique within a Network.
            </xsd:documentation>
          </xsd:annotation>
          <xsd:selector xpath=".//mdl:TmNSManageableApp"/>
          <xsd:field xpath="mdl:RoleID"/>
        </xsd:unique>

      </xsd:element>
      <xsd:element name="N2NPortMapping" type="PortMappingType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkType">
    <xsd:annotation>
      <xsd:documentation>
        A Network element describes the physical and logical design of a network.  This description covers the physical
        topology (e.g., the NetworkNodes and how they are interconnected), the logical configuration (e.g., the
        decomposition of networks into subnets and rules for how messages will flow on the network), and the performance
        capabilities (e.g., the Quality of Service (QoS) configuration, link and NetworkNode speeds, and resources) of
        networks.  Each Network shall contain a Name element, of type xsd:token, that shall be unique across all Networks
        in the MDL instance document. The XML processor will remove line feeds, carriage returns, tabs, leading and
        trailing spaces, and multiple spaces from all elements of type xsd:token.
      </xsd:documentation><xsd:documentation>
        The NetworkType element describes the type of the containing Network element.  The NetworkType element is an
        enumeration that can be set to one of the following values: RangeNetwork, TmNS, TestArticleNetwork,
        VehicleNetwork, GroundStationNetwork, GroundNetwork, GenericNetwork
      </xsd:documentation><xsd:documentation>
        Network elements can be contained within other Network elements.  This containment allows the description of 
        hierarchical networks.
      </xsd:documentation><xsd:documentation>
        The Devices element contains descriptions of non-TmNS, non-network enabled devices such as transducers.
        The PortMappings element describes physical connections, or PortMappings, between NetworkNodes and Devices 
        within a single Network.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="NetworkType" type="NetworkTypeEnum"/>
      <xsd:element name="NetworkServices" type="NetworkServicesType"/>
      <xsd:element name="Network" type="NetworkType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="NetworkNode" type="NetworkNodeType" minOccurs="0" maxOccurs="unbounded">

        <xsd:key name="PinKey">
          <xsd:selector xpath=".//mdl:Pin"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="PinKeyRef" refer="mdl:PinKey">
          <xsd:selector xpath=".//mdl:PinRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

        <xsd:key name="NetworkInterfaceKey">
          <xsd:selector xpath=".//mdl:NetworkInterface"/>
          <xsd:field xpath="@ID"/>
        </xsd:key>
        <xsd:keyref name="NetworkInterfaceKeyRef" refer="mdl:NetworkInterfaceKey">
          <xsd:selector xpath=".//mdl:NetworkInterfaceRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>
        <xsd:keyref name="RedNetworkInterfaceKeyRef" refer="mdl:NetworkInterfaceKey">
          <xsd:selector xpath=".//mdl:RedNetworkInterfaceRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>
        <xsd:keyref name="BlackNetworkInterfaceKeyRef" refer="mdl:NetworkInterfaceKey">
          <xsd:selector xpath=".//mdl:BlackNetworkInterfaceRef"/>
          <xsd:field xpath="@IDREF"/>
        </xsd:keyref>

      </xsd:element>
      <xsd:element name="Devices" type="DevicesType" minOccurs="0"/>
      <xsd:element name="PortMappings" type="PortMappingsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="NetworkRefType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkRef element contains an IDREF attribute, of type xsd:IDREF, that shall reference the ID 
        attribute of a Network element  
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="NetworkReferencesType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkReferences element in a TestMission element is a container for zero or more NetworkRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="NetworkRef" type="NetworkRefType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkServicesType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkServices element is a container for zero or more NetworkService elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="NetworkService" type="NetworkServiceType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="NetworkServiceType">
    <xsd:annotation>
      <xsd:documentation>
        The NetworkService element describes the subscription rate of the containing Network for a particular DSCP value.
      </xsd:documentation><xsd:documentation>
        The DSCPTableEntryRef element contains an IDREF attribute of type xsd:IDREF that references the ID attribute of
        a DSCPTableEntry element.  The DSCPValue in the DSCPTableEntry indicates the Diffserv Code Point marking found in
        the IP header.
      </xsd:documentation><xsd:documentation>
        The CommittedRate element, of type FlexValueUnitsType, describes the subscribed data rate associated with a 
        particular Diffserv Code Point for the network in which it is contained.  The CommittedRate units are BitPerSecond.
      </xsd:documentation><xsd:documentation>
        Only subscriptions described in NetworkService elements are deemed to exist in the network for the purposes of a 
        TmNS system.  Best Effort does not require a committed rate subscription.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DSCPTableEntryRef" type="DSCPTableEntryRefType"/>
      <xsd:element name="CommittedRate" type="ValueUnitsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AntennaType">
    <xsd:annotation>
      <xsd:documentation>
        The Antenna element serves as the physical association of an antenna, its antenna control unit, receivers, 
        transmitters and radios.  An antenna itself is not configured via MDL.
      </xsd:documentation><xsd:documentation>
        The Name element, of type xsd:token, contains a human readable name identifier for the antenna.
        The Manufacturer element, of type xsd:string, contains the name of the manufacturer of the Device.
        The ModelNumber element, of type xsd:string, contains the model number of the Device.
        The SerialNumber element, of type xsd:string, contains the model number of the Device.
      </xsd:documentation><xsd:documentation>
        The ACU element, of type ManageableAppRefsType, contains a ManageableAppRef which identifies the antenna control 
        unit (if present) for this antenna.
      </xsd:documentation><xsd:documentation>
        The SSTTxs element, of type ManageableAppRefsType, contains a list of ManageableAppRef elements which identify the 
        SST transmitter elements that are physically connected to this antenna.
      </xsd:documentation><xsd:documentation>
        The SSTRxs element, of type ManageableAppRefsType, contains a list of ManageableAppRef elements which identify the 
        SST receiver elements that are physically connected to this antenna.
      </xsd:documentation><xsd:documentation>
        The Radios element, of type ManageableAppRefsType, contains a list of ManageableAppRef elements which identify the 
        TmNSRadio elements that are physically connected to this antenna.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Manufacturer" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ModelNumber" type="xsd:string" minOccurs="0"/>
      <xsd:element name="SerialNumber" type="xsd:string" minOccurs="0"/>
      <!-- TBD AntennaSelected: boolean Table 5.3 pg 83 SM Standard -->
      <xsd:element name="ACU" type="ManageableAppRefsType" minOccurs="0"/>
      <xsd:element name="SSTTxs" type="ManageableAppRefsType" minOccurs="0"/>
      <xsd:element name="SSTRxs" type="ManageableAppRefsType" minOccurs="0"/>
      <xsd:element name="Radios" type="ManageableAppRefsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DevicesType">
    <xsd:annotation>
      <xsd:documentation>
        The Devices element in a Network element is a container for zero or more Device elements and zero or more Antenna 
        elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Device" type="DeviceType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="Antenna" type="AntennaType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DeviceType">
    <xsd:annotation>
      <xsd:documentation>
        The Device element describes the properties of device, such as a transducer, that is not network enabled for 
        a TmNS system.
      </xsd:documentation><xsd:documentation>
        The Manufacturer element, of type xsd:string, contains the name of the manufacturer of the Device.
        The ModelNumber element, of type xsd:string, contains the model number of the Device.
        The SerialNumber element, of type xsd:string, contains the model number of the Device.
      </xsd:documentation><xsd:documentation>
        The DeviceType element, can be one of the following strings: Accelerometer, FlowMeter, Microphone,
        Potentiometer, PressureTransducer, StrainGauge, Synchro, Thermocouple
      </xsd:documentation><xsd:documentation>
        The DataOperationRef element refers to the ID of the DataOperation element that describes the operation
        performed by the Device on Measurements.
      </xsd:documentation><xsd:documentation>
        The Sensitivity element, is a complex element of type mdl:ConditionParameter that describes the datasheet
        sensitivity (with units) of the device.
      </xsd:documentation><xsd:documentation>
        The Excitation element, is a complex element of type mdl:ConditionParameter that describes the excitation voltage to
        apply to the device such that the CalibrationPairs are valid.
      </xsd:documentation><xsd:documentation>
        The Calibration element in a Device is a container for individual input and output pairs used during the
        calibration of the Device as well as the date of the last calibration.
      </xsd:documentation><xsd:documentation>
        The InventoryID element, of type xsd:token, describes the inventory identifier of the device.
        The value of the InventoryID must be unique among all Device InventoryIDs within the MDLRoot element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/> <!--TBD Add uniqueness constraint? InventoryID-->
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Manufacturer" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ModelNumber" type="xsd:string" minOccurs="0"/>
      <xsd:element name="SerialNumber" type="xsd:string" minOccurs="0"/>
      <xsd:element name="InventoryID" type="xsd:token"/>
      <xsd:element name="DeviceType" type="DeviceTypeEnum"/>
      <xsd:element name="DataOperationRef" type="DataOperationRefType" minOccurs="0"/>
      <xsd:element name="Ports" type="PortsType" minOccurs="0"/>
      <xsd:element name="Sensitivity" type="ConditionParameterType" minOccurs="0"/>
      <xsd:element name="Excitation" type="ConditionParameterType" minOccurs="0"/>
      <xsd:element name="Calibration" type="CalibrationType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="DeviceTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The DeviceType element is an enumeration of the supported non-TmNS devices, such as transducers.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Accelerometer"/>
      <xsd:enumeration value="FlowMeter"/>
      <xsd:enumeration value="Microphone"/>
      <xsd:enumeration value="Potentiometer"/>
      <xsd:enumeration value="PressureTransducer"/>
      <xsd:enumeration value="StrainGauge"/>
      <xsd:enumeration value="Synchro"/>
      <xsd:enumeration value="Thermocouple"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="CalibrationType">
    <xsd:annotation>
      <xsd:documentation>
        The Calibration element in a Device is a container for individual input and output pairs used during 
        the calibration of the Device as well as the date of the last calibration.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="CalibrationDate" type="xsd:date" minOccurs="0"/>
      <xsd:element name="CalibrationPair" type="CalibrationPairType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CalibrationPairType">
    <xsd:annotation>
      <xsd:documentation>
        The InputValue element, is a complex element of type mdl:ValueUnits that describes the input during 
        calibration of the device.
        The OutputValue element, is a complex element of type mdl:ValueUnits that describes the output for a 
        given input during calibration of the device.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="InputValue" type="ValueUnitsType"/>
      <xsd:element name="OutputValue" type="ValueUnitsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PortMappingsType">
    <xsd:annotation>
      <xsd:documentation>
        The PortMappings element may contain zero or more PortMapping elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="PortMapping" type="PortMappingType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PortMappingType">
    <xsd:annotation>
      <xsd:documentation>
        The PortMapping element describes the connection between two Port elements.  Often, the PortMapping element will
        capture the flow of data between the indicated Port elements.
      </xsd:documentation> <xsd:documentation>
        The PortMapping may include either a DataStreamRef, a MeasurementRef, or a DataAttributesRef to describe the 
        properties of the data that flows over the connection described by the PortMapping element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="PortRef" type="PortRefType" minOccurs="0" maxOccurs="2"/>
      <xsd:choice minOccurs="0">
        <xsd:element name="DataStreamRef" type="DataStreamRefType"/>
        <xsd:element name="MeasurementRef" type="MeasurementRefType"/>
        <xsd:element name="DataAttributesRef" type="DataAttributesRefType"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PortMappingRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a PortMappingRef must refer to the ID attribute of a PortMapping.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="GenericParameterType">
    <xsd:annotation>
      <xsd:documentation>
        The GenericParameter element allows the description of additional information outside the scope of the Metadata
        Standard.  Each GenericParameter element has one Name element of type xsd:token and any number of
        ParameterEntry elements.  The GenericParameter element contains an Index attribute, of type xsd:positiveInteger,
        which indicates the order of GenericParameter elements.  The XML processor will remove line feeds, carriage
        returns, tabs, leading and trailing spaces, and multiple spaces from all elements of type xsd:token.
      </xsd:documentation><xsd:documentation>        
        The use of GenericParameter shall not be used as a work-around for the Metadata Standard.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token"/>
      <xsd:element name="ParameterEntry" type="ParameterEntryType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="Index" type="xsd:positiveInteger"/>
  </xsd:complexType>

  <xsd:complexType name="ParameterEntryType">
    <xsd:annotation>
      <xsd:documentation>
        The ParameterEntry element describes a value assigned to the described GenericParameter element.  The 
        ParameterEntry element contains an Index attribute, of type xsd:positiveInteger, which indicates the order of 
        ParameterEntry elements.
      </xsd:documentation><xsd:documentation>
        The ParameterValue element, of type xsd:string, is an open text field containing a value of the 
        GenericParameter element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ParameterValue" type="xsd:string"/>
    </xsd:sequence>
    <xsd:attribute name="Index" type="xsd:positiveInteger"/>
  </xsd:complexType>

  <xsd:complexType name="DataAttributesDescriptionsType">
    <xsd:annotation>
      <xsd:documentation>
        The DataAttributesDescriptions element is a container for zero or more DataAttributes elements.  
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DataAttributes" type="DataAttributesType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DataAttributesType">
    <xsd:annotation>
      <xsd:documentation>
        The DataAttributes element describes the attributes and properties of data used within a MeasurementDomain
        element. The DataAttributes element describes data for both analog and digital forms.
      </xsd:documentation><xsd:documentation>
        The DataAttributesRef element contains an IDREF attribute, of type xsd:IDREF, that shall reference the ID
        attribute of a DataAttributes element.  If the DataAttributesRef element is present, the containing
        DataAttributes element is based on (i.e., copies) the referenced DataAttributes element; however, the containing
        DataAttributes element can select specific elements and attributes to overwrite for its own data description.
        The PCMMeasurementRef is used for TMATS-described PCM stream measurements to indicate the source of the bus 
        measurement. 
      </xsd:documentation><xsd:documentation>
        The UnitsRef and SIUnits elements describe the units of measure for the data described by the DataAttributes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="DataAttributesRef" type="DataAttributesRefType" minOccurs="0"/>
      <xsd:element name="PCMMeasurementRef" type="PCMMeasurementRefType" minOccurs="0"/>
      <xsd:choice minOccurs="0">
        <xsd:element name="UnitsRef" type="UnitsRefType"/>
        <xsd:element name="SIUnits" type="SIUnitsEnum"/>
      </xsd:choice>
      <xsd:element name="Uncertainty" type="UncertaintyType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="AnalogAttributes" type="AnalogAttributesType" minOccurs="0"/>
      <xsd:element name="DigitalAttributes" type="DigitalAttributesType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DataAttributesRefType">
    <xsd:annotation>
      <xsd:documentation>
        The DataAttributesRef element contains an IDREF attribute, of type xsd:IDREF, that shall reference the ID
        attribute of a DataAttributes element within the same MeasurementDomain.  If the DataAttributesRef element is
        present, the containing DataAttributes element is based on (i.e., copies) the referenced DataAttributes
        element; however, the containing DataAttributes element can select specific elements and attributes to
        overwrite for its own data description.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="UnitsConversionsType">
    <xsd:annotation>
      <xsd:documentation>
        The UnitsConversions element contains a list of DataOperationRefs with each one describing the calculations
        that must be performed to convert a value from one set of units to another.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DataOperationRef" type="DataOperationRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PCMMeasurementRefType">
    <xsd:annotation>
      <xsd:documentation>
        The PCMMeasurementRef element contains an NameRef attribute, of type xsd:IDREF, that shall reference the Name
        attribute of the TMATS schema's Measurement within the same MeasurementDomain.  The XPATH expression for the
        location of the Name attribute is
        /MDLRoot/MeasurementDomains/MeasurementDomain/DataStreams/DataStream/PCMDataLink/PCMFormatAttributes/
        PCMMeasurements/MeasurementList/Measurement[@Name]
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="NameRef" type="xsd:string" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="PCMMinorFrameType">
    <xsd:simpleContent>
      <xsd:annotation>
        <xsd:documentation>
          The PCMMinorFrame element contains a positive integer (greater than or equal to 1) that indicates a specific 
          PCM minor frame to be included in a Package.  The Index attribute of type xsd:positiveInteger indicates 
          the ordering of PCM minor frames (from the referenced TMATS-described PCM stream) when inserted into a Package.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:extension base="xsd:positiveInteger">
        <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>

  <xsd:complexType name="MeasurementSinkType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementSink element describes both a NetworkNode that obtains the measurement data of the 
        described Measurement element from TmNSDataMessages published on the network and the constraints 
        placed on the delivery of the measurement data.    
      </xsd:documentation><xsd:documentation>
        The DestinationNodeRef element, of type mdl:NetworkNodeRef, references the description of the 
        NetworkNode that obtains the measurement data from TmNSDataMessages published on the network.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DestinationNodeRef" type="NetworkNodeRefType"/>
      <xsd:element name="DeliveryMechanism" type="DeliveryMechanismType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DeliveryMechanismType">
    <xsd:annotation>
      <xsd:documentation>
        The DeliveryMechanism element describes the constraints placed on the delivery of measurement data to 
        the NetworkNode element referenced in the MeasurementSink.  Each MeasurementSink element can contain 
        only one DeliveryMechanism element, where it has either aperiodic or periodic timing constraints.  
        Regardless of the method of delivery, constraints for timing jitter and overloading may be provided.
      </xsd:documentation><xsd:documentation>
      The Jitter element, of type mdl:ConditionParameters, describes the allowed variation in the timing constraints
      for a DeliveryMechanism element.
      </xsd:documentation><xsd:documentation>
        The OverloadContingencyRule element, of type xsd:positiveInteger, specifies how to prioritize the publishing 
        of measurement data whenever the network is incapable of satisfying the specified timing constraints.  
        DiffServ Code Point (DSCP) settings are indirectly associated with measurement data though the DSCPTableEntry 
        element.  When different sets of measurement data have the same DSCP settings, the OverloadContingencyRule 
        element indicates their priorities with respect to each other.  The value of the OverloadContingencyRule 
        element is a positive integer greater than or equal to one, where the value of one has the highest priority. 
        Higher values correspond to lower priorities.  For example, in order to meet timing constraints of higher 
        priority measurement data, lower priority measurement data could be delayed to provide more bandwidth to the 
        higher priority measurement data..
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Jitter" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="OverloadContingencyRule" type="xsd:positiveInteger" minOccurs="0"/>
      <xsd:element name="Aperiodic" type="AperiodicType" minOccurs="0"/>
      <xsd:element name="Periodic" type="PeriodicType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AperiodicType">
    <xsd:annotation>
      <xsd:documentation>
        The Aperiodic element describes the timing constraints when the delivery of measurement data can occur 
        independently of a clock or synchronization signal.  Using such a delivery method, timing constraints 
        specified in the ResponseTime element and Deadline element shall be satisfied. 
      </xsd:documentation><xsd:documentation>
      The ResponseTime element, of type mdl:ConditionParameters, contains any number of ConditionParameter elements
      and describes the amount of time that can elapse from the instant an aperiodic event occurs to the instant it is
      acknowledged by a NetworkNode that publishes the measurement data of the described Measurement element.
      </xsd:documentation><xsd:documentation>
      The Deadline element, of type mdl:ConditionParameters, contains any number of ConditionParameter elements and
      describes the amount of time that can elapse from the instant an aperiodic event occurs to the instant the
      measurement data is received by the NetworkNode described by the NetworkNode element referenced in the
      DestinationNodeRef element of the containing MeasurementSink element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ResponseTime" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="Deadline" type="ConditionParametersType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PeriodicType">
    <xsd:annotation>
      <xsd:documentation>
        The Periodic element describes the timing constraints when the delivery of the  measurement data of 
        the described Measurement element shall occur with a specific interval of time between the distinct
        instances of measurement data. 
      </xsd:documentation><xsd:documentation>
      The Period element, of type mdl:ConditionParameters, contains any number of ConditionParameter elements and
      specifies the period of time between the arrivals of consecutive instances of the measurement data at a
      NetworkNode described by the NetworkNode element referenced in the DestinationNodeRef element of the containing
      MeasurementSink.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Period" type="ConditionParametersType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="MeasurementSourceType">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementSource element describes both the NetworkNode that publishes the 
        measurement data of the described Measurement element on the network and the location from which 
        the described measurement is taken.     
      </xsd:documentation><xsd:documentation>
        The SourceNodeRef element, of type mdl:NetworkNodeRef, references the ID attribute of the NetworkNode 
        that publishes TmNSDataMessages containing the measurement data of the described Measurement element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="SourceNodeRef" type="NetworkNodeRefType" minOccurs="0"/>
      <xsd:element name="LogicalLocation" type="LogicalLocationType" minOccurs="0"/>
      <xsd:element name="PhysicalLocation" type="PhysicalLocationType" minOccurs="0"/>
      <xsd:element name="PhysicalOrientation" type="PhysicalOrientationType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="PhysicalOrientationType">
    <xsd:annotation>
      <xsd:documentation>
        The PhysicalOrientation element describes the physical orientation of the device from which the 
        measurement is taken.  The physical orientation is given as a coordinate vector with respect to a 
        specified coordinate system.
      </xsd:documentation><xsd:documentation>
        The Vector element, of type xsd:string, describes the coordinate vector of the PhysicalOrientation 
        element with respect to the coordinate system description provided in the CoordinateSystem element.  
        The Metadata Standard does not constrain the value of the vector element.
      </xsd:documentation><xsd:documentation>
        The CoordinateSystem string specifies the coordinate system for the PhysicalOrientation element's 
        vector described in the Vector element.  The Metadata Standard does not constrain the value of this element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="Vector" type="xsd:string"/>
      <xsd:element name="CoordinateSystem" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="Percentage">
    <xsd:annotation>
      <xsd:documentation>
        The Percentage element is a simple type, double-precision floating point percent value that must be greater 
        than zero.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:double">
      <xsd:minInclusive value="0"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="UncertaintyType">
    <xsd:annotation>
      <xsd:documentation>
        The Uncertainty element describes the uncertainty through a confidence level over a specified confidence interval.
      </xsd:documentation><xsd:documentation>
      The ConfidenceInterval element, of type mdl:ConditionParametersType, contains any number of
      ConditionParameter elements and describes the bounds over which the confidence level apply.
      </xsd:documentation><xsd:documentation>
        The ConfidenceLevel element is a percentage represented as an integer in the range from "0" to "100" inclusive.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ConfidenceInterval" type="ConditionParametersType"/>
      <xsd:element name="ConfidenceLevel" type="Percentage"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ConditionParametersType">
    <xsd:annotation>
      <xsd:documentation>
        The ConditionParameters element is a container for zero or more ConditionParameter elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ConditionParameter" type="ConditionParameterType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ConditionParameterType">
    <xsd:annotation>
      <xsd:documentation>
        The ConditionParameter element describes a value or bound of values for the element containing the 
        ConditionParameter element.  Multiple ConditionParameter elements can be used to describe ranges of values.  
        The ConditionParameter shall contain either a ConditionValueFlex or a ConditionValueFloat, but not both.  
        Likewise a ConditionParameter shall contain either a UnitsRef or an SIUnits, but not both.
      </xsd:documentation><xsd:documentation>
        The ConditionValueFlex element, of type mdl:FlexibleLong, specifies the value to be compared against using 
        the operation described by the ConditionOperation element.  For example, if the ConditionValueFlex element 
        value is "0b10" and the ConditionOperation element value is greater than then the values being described by 
        the ConditionParameter element are greater than the binary value of 0b10 (i.e., 2 in decimal).
      </xsd:documentation><xsd:documentation>
        The ConditionValueFloat element, of type xsd:double, specifies the value to be compared against using the 
        operation described by the ConditionOperation element.  For example, if the ConditionValueFloat element 
        value is "10.0" and the ConditionOperation element value is greater than then the values being described 
        by the ConditionParameter element are greater than the decimal value of 10.0.
      </xsd:documentation><xsd:documentation>
        The UnitsRef and SIUnits elements describe the units of measure for the ConditionParameter.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ConditionOperation" type="ConditionOperationEnum"/>
      <xsd:choice>
        <xsd:element name="ConditionValueFlex" type="FlexibleLong"/>
        <xsd:element name="ConditionValueFloat" type="xsd:double"/>
      </xsd:choice>
      <xsd:choice>
        <xsd:element name="UnitsRef" type="UnitsRefType"/>
        <xsd:element name="SIUnits" type="SIUnitsEnum"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="ConditionOperationEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ConditionOperation is an enumeration that represents "greater than" ("&gt;"), "greater than or equal" 
        ("&gt;="), "less than" ("&lt;"), "less than or equal" ("&lt;="), "equal to" ("=="), or "not equal to" ("!=").
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="&gt;"/>
      <xsd:enumeration value="&gt;="/>
      <xsd:enumeration value="&lt;"/>
      <xsd:enumeration value="&lt;="/>
      <xsd:enumeration value="=="/>
      <xsd:enumeration value="!="/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="FrequencyBandType">
    <xsd:annotation>
      <xsd:documentation>
        The FrequencyBand element describes a frequency domain stop band, a frequency domain pass band, or a 
        frequency domain transition band. 
      </xsd:documentation><xsd:documentation>
        The BandType element is an enumeration that can be set to one of the following values: PassBand, StopBand,
        TransitionBand
      </xsd:documentation><xsd:documentation>
      The EdgeFrequency element, of type mdl:ConditionParameters, describes a frequency value within the frequency
      domain.  Assuming an analog representation of frequency content, a possible value would be 50 Hertz.  Assuming a
      digital representation with a given EdgeFrequency element's value between -pi and pi, the corresponding
      frequency in Hertz is calculated as fe*fs/(2*k+1) where fs is the value of the SamplingFrequency element in
      Hertz, fe is the value of the EdgeFrequency element in radians, and k is an integer.
      </xsd:documentation><xsd:documentation>
      The Attenuation element, of type mdl:ConditionParameters, describes an attenuation value of the corresponding
      frequency band.  In the case of a pass band, the attenuation describes the maximum allowable attenuation,
      commonly -3 decibels (dB), relative to no attenuation (0 dB) within the band.  In the case of a transition band,
      the attenuation describes maximum the allowable gain or minimum required loss relative to no attenuation (0 dB).
      In the case of a stop band, the attenuation describes the minimum required attenuation relative to no
      attenuation (0 dB).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="BandType" type="BandTypeEnum"/>
      <xsd:element name="EdgeFrequency" type="ConditionParametersType"/>
      <xsd:element name="Attenuation" type="ConditionParametersType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="FrequencyContentType">
    <xsd:annotation>
      <xsd:documentation>
        The FrequencyContent element describes the frequency ranges occupied by the analog signal.  This 
        description is provided in the frequency domain and is composed of stop bands and/or transition bands 
        and/or pass bands.  These bands are described using a collection of FrequencyBand elements.  The frequency 
        content description can be provided assuming either an analog or digital representation.  If a digital 
        representation is chosen, the value of the SamplingFrequency element shall be provided
      </xsd:documentation><xsd:documentation>
        The SamplingFrequency element describes the assumed sampling frequency whenever a digital representation of 
        an analog signal's frequency content is provided in the FrequencyContent element.  For example, a sampling 
        frequency (e.g., 50 Hertz) shall be specified if the values for EdgeFrequency elements are specified in units 
        of radians.  An EdgeFrequency element's value in radians is calculated as pi*fe/fs where fs is the value of the 
        SamplingFrequency element in Hertz and fe is the value of the EdgeFrequency element in Hertz.
      </xsd:documentation><xsd:documentation>
        The PercentSignal element is an optional element that describes the percent of total signal energy that falls 
        within the FrequencyBand.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="FrequencyBand" type="FrequencyBandType" maxOccurs="unbounded"/>
      <xsd:element name="SamplingFrequency" type="FloatValueUnitsType" minOccurs="0"/>
      <xsd:element name="PercentSignal" type="Percentage" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AnalogAttributesType">
    <xsd:annotation>
      <xsd:documentation>
        The AnalogAttributes element describes the properties of data when it exists in an analog form.  An 
        applicable scenario would be describing the analog output of a sensor that is connected to the input 
        of an analog-to-digital converter on a DAU.   The following elements describe only the analog signal 
        and not the methods by which it is to be acquired or processed.
      </xsd:documentation><xsd:documentation>
      The SignalRange element, of type mdl:ConditionParameters, describes the range of values over which an analog
      signal exists.  For example, the range of a temperature sensor could be -40C to 120C.
      </xsd:documentation><xsd:documentation>
      The Resolution element, of type mdl:ConditionParameters, describes the smallest measurable increment between
      analog signal values.  For example, the resolution of a temperature sensor could indicate that temperature
      changes of no larger than 0.1C may go undetected.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="SignalRange" type="ConditionParametersType"/>
      <xsd:element name="Resolution" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="FrequencyContent" type="FrequencyContentType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DigitalAttributesType">
    <xsd:annotation>
      <xsd:documentation>
        A DigitalAttributes element describes the properties of data when it exists in a digitally encoded form.  
        This element describes digital data without regard for how it is packaged to be carried over a digital 
        transport or medium (e.g., Ethernet) using a specific protocol.  An applicable scenario would be describing 
        the output values of an analog-to-digital converter on a DAU.  The following elements describe only the 
        digital data signal and not the methods by which it is processed.
      </xsd:documentation><xsd:documentation>
      The DataLength element, of type mdl:ConditionParameters, describes the length or size of the digital data being
      described by the DigitalAttributes element in a unit related to the number of bits or bytes.
      </xsd:documentation><xsd:documentation>
      The Endianness element, of type mdl:ConditionParameters, describes the ordering of bits of the of the digital
      data being described by the DigitalAttributes element.
      </xsd:documentation><xsd:documentation>
      The DigitalEncoding element, of type mdl:ConditionParameters, describes the encoding scheme of the digital data
      being described by the DigitalAttributes element.
      </xsd:documentation><xsd:documentation>
      The DataRate element, of type mdl:ConditionParameters, describes the data rate of the digital data being
      described by the DigitalAttributes element.  The data rate indicates the average number of transferred digital
      data units per unit of time.
      </xsd:documentation><xsd:documentation>
        The ActiveInputRange element, of type mdl:ConditionParameters, describes TBD.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DataLength" type="ConditionParametersType"/>
      <xsd:element name="Endianness" type="EndiannessEnum" minOccurs="0"/>
      <xsd:element name="DigitalEncoding" type="DigitalEncodingEnum"/>
      <xsd:element name="DataRate" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="ActiveInputRange" type="ConditionParametersType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DSCPTableType">
    <xsd:annotation>
      <xsd:documentation>
        The DSCPTable element contains a description of the DiffServ Code Point (DSCP) values, which are parameters used
        when publishing data onto the TmNS to implement the desired QoS behavior.  The DSCPTable element is a collection
        of DSCP Table entries.  TmNSDataMessages priority levels are specified through references to these DSCP bit
        settings (i.e., the DSCP Table entries).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="DSCPTableEntry" type="DSCPTableEntryType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="DSCPTableEntryType">
    <xsd:annotation>
      <xsd:documentation>
        The DSCPTableEntry element describes a DSCP Table entry using a value/description pair.
      </xsd:documentation><xsd:documentation>
        The DSCPValue element, of type mdl:SixBitBinary, describes a six-bit value that is placed into the IP header for
        delivery.  The human-interpretable meaning of the six-bit value is given by the corresponding DSCPDescription
        element.
      </xsd:documentation><xsd:documentation>
        The DSCPDescription element, of type xsd:string, is a human-interpretable description of the corresponding
        DSCPValue element.  The value of the DSCPDescription element shall be unique within the MDL instance document.
        TBD uniqueness?, TBD duplicate Description DSCPDescription.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="DSCPValue" type="SixBitBinary"/>
      <xsd:element name="DSCPDescription" type="xsd:string"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="DSCPTableEntryRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a DSCPTableEntryRef must refer to the ID attribute of a DSCPTableEntry.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="SupportedMCAsType">
    <xsd:annotation>
      <xsd:documentation>
        The SupportedMCAs element contains a list of zero or more SupportedMCA elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="SupportedMCA" type="SupportedMCAType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SupportedMCAType">
    <xsd:annotation>
      <xsd:documentation>
        The SupportedMCA element describes the multicast addresses that can be assigned to messages from TmNS network 
        data sources.  It is expected that this list will often be established by or coordinated with Range IT staff.
      </xsd:documentation><xsd:documentation>
        The Description element, of type xsd:string, is a human-readable identifier of the multicast address and its use.
        The MulticastAddress element, of type mdl:IPAddress, describes one supported multicast address.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string"/>
      <xsd:element name="MulticastAddress" type="IPAddress"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimeAttributesType">
    <xsd:annotation>
      <xsd:documentation>
        The TimeAttributes element is a container for the elements and attributes that describe the time-related 
        properties of other elements within the MDLRoot element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TimeReferences" type="TimeReferencesType" minOccurs="0"/>
      <xsd:element name="TimeReferenceSynchronizations" type="TimeReferenceSynchronizationsType" minOccurs="0"/>
      <xsd:element name="TimeReferenceAssociations" type="TimeReferenceAssociationsType" minOccurs="0"/>
      <xsd:element name="TimingRelationships" type="TimingRelationshipsType" minOccurs="0"/>
      <xsd:element name="ClockAccuracies" type="ClockAccuraciesType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimeReferencesType">
    <xsd:annotation>
      <xsd:documentation>
        The TimeReferences element is a container for zero or more TimeReference elements
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TimeReference" type="TimeReferenceType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimeReferenceType">
    <xsd:annotation>
      <xsd:documentation>
        The TimeReference element describes the properties of a time source or clock that is used in a
        network.  For example, a TimeReference element may describe the local clock source of a
        NetworkNode that is packaging and sending measurement data in Packages and TmNSDataMessages.  A TimeReference
        element can also be used to describe the time source that directly affects the known timing relationships
        between system events.
      </xsd:documentation><xsd:documentation>
        The ClockTypeEnum element describes the type of clock (i.e., the clock's implementation) that provides the
        periodic signals to process time for a TimeReference element.
      </xsd:documentation><xsd:documentation>
        The ClockTypeEnum element is an enumeration that can be set to one of the following values:
        InternalHardwareOscillator, ExternalHardwareOscillator, SoftwareImplementation, ExternalTrigger, AtomicClock,
        Unspecified
      </xsd:documentation><xsd:documentation>
      The Resolution element, of type mdl:ConditionParameters, describes the increment between the periodic clock
      signals (or ticks) of a TimeReference element.  For example, a 1000 kHz oscillator has a resolution of 1.0
      millisecond between clock ticks.
      </xsd:documentation><xsd:documentation>
        The Uncertainty element describes the level of uncertainty in the periodic clock signals from the clock source
        of a TimeReference element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="ClockType" type="ClockTypeEnum"/>
      <xsd:element name="Resolution" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="Uncertainty" type="UncertaintyType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TimeReferenceRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a TimeReferenceRef must refer to the ID attribute of a TimeReference.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TimestampDefinitionType">
    <xsd:annotation>
      <xsd:documentation>
        The TimestampDefinition element describes the properties and format of a timestamp used within a
        network.  A timestamp described by a TimestampDefinition element can potentially be generated by
        the implementation of a TimeReference element or other software elements/components within a TmNS.
      </xsd:documentation><xsd:documentation>
        The TimestampFormatEnum element describes the format of the timestamps defined by the TimestampDefinition
        element.  The described timestamp format indicates how to interpret the ordering and scale factor of the values
        within a generated timestamp.  For example, the selected format can indicate which values correspond to days,
        hours, minutes, or seconds.
      </xsd:documentation><xsd:documentation>
        The Size element describes the size or length of the timestamp defined by a TimestampDefinition element.  The
        Size element is an mdl:FlexibleLong value/units pair.  The units for this element shall be in units of digital
        data lengths such as bits or bytes.
      </xsd:documentation><xsd:documentation>
      The Resolution element, of type mdl:ConditionParameters, describes the smallest increment between the timestamp
      values defined by a TimestampDefinition element.  The resolution of a timestamp is typically determined by the
      timescale because it defines the smallest measurable unit of time when generating a timestamp. The Resolution
      element contains any number of ConditionParameter elements.
      </xsd:documentation><xsd:documentation>
        The Uncertainty element describes the level of uncertainty in the generated timestamp values.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TimestampFormat" type="TimestampFormatEnum"/>
      <xsd:element name="Timescale" type="TimescaleEnum"/>
      <xsd:element name="Size" type="FlexValueUnitsType" minOccurs="0"/>
      <xsd:element name="Resolution" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="Uncertainty" type="UncertaintyType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="ID" type="xsd:ID" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TimestampDefinitionRefType">
    <xsd:annotation>
      <xsd:documentation>
        The value of the IDREF of a TimestampDefinitionRef must refer to the ID attribute of a TimestampDefinition.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TimeReferenceSynchronizationsType">
    <xsd:annotation>
      <xsd:documentation>
        The TimeReferenceSynchronizations element is a container for zero or more TimeReferenceSynchronization 
        elements
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TimeReferenceSynchronization" type="TimeReferenceSynchronizationType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimeReferenceSynchronizationType">
    <xsd:annotation>
      <xsd:documentation>
        The TimeReferenceSynchronization element describes the properties and mechanisms used to characterize the
        synchronization between TimeReference elements.  None of the TimeReference elements are assumed to be
        synchronized by default; however, the TimeReferenceSynchronization element is available to describe such
        synchronization relationships if they exist.  The TimeReferenceSynchronization element describes the
        synchronization characteristics that are similar for entire sets of TimeReference elements instead of pairwise
        descriptions.  Each member of these sets is individually described by the SynchronizationEndpoint element.
      </xsd:documentation><xsd:documentation>
        The SynchronizationProtocolEnum element describes the selected protocol or implementation that maintains the
        synchronization between SynchronizationEndpoint elements.  Typically, synchronization protocols use specific
        hardware and/or algorithms as the basis of their implementations.
      </xsd:documentation><xsd:documentation>
        The SynchronizationProtocolEnum element is an enumeration that can be set to one of the following values: NTP
        (interpreted as Network Time Protocol), IEEE 1588, PXI (interpreted as Peripheral Component Interconnect (PCI)
        eXtensions for Instrumentation), PhysicalConnection, SoftwareImplementation, Unspecified
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="SynchronizationEndpoint" type="SynchronizationEndpointType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="SynchronizationProtocol" type="SynchronizationProtocolEnum" minOccurs="0"/>
      <xsd:element name="SynchronizationOffset" type="SynchronizationOffsetType" minOccurs="0"/>
      <xsd:element name="SynchronizationDrift" type="SynchronizationDriftType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SynchronizationEndpointType">
    <xsd:annotation>
      <xsd:documentation>
        The SynchronizationEndpoint element describes each TimeReference element and its role in the synchronization
        relationship described by the TimeReferenceSynchronization element.  Each member of the set of
        SynchronizationEndpoint elements is synchronized with the other members of the set, and the properties of the
        TimeReferenceSynchronization element apply to all members of the set.
      </xsd:documentation><xsd:documentation>
        The SynchronizationRoleEnum element describes the participatory role of the TimeReference element indicated by
        the TimeReferenceRef element.  The role of SynchronizationEndpoint element has various implications depending
        upon how the synchronization is maintained or implemented according to the selected synchronization protocol.
      </xsd:documentation><xsd:documentation>
        The SynchronizationRoleEnum element is an enumeration that can be set to one of the following values:
        GrandMaster, Master, Slave, Peer, Unspecified
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TimeReferenceRef" type="TimeReferenceRefType"/>
      <xsd:element name="SynchronizationRole" type="SynchronizationRoleEnum"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SynchronizationOffsetType">
    <xsd:annotation>
      <xsd:documentation>
        The SynchronizationOffset element describes the offset or initial error in the synchronization between the
        SynchronizationEndpoint elements.  This error is determined by the implementation or selected synchronization
        protocol and the physical separation between SynchronizationEndpoint elements.  The units for this element shall
        be in units of time such as microseconds or nanoseconds.
      </xsd:documentation><xsd:documentation>
        The contained TimeReferenceRef element specifies a basis from which the value of the SynchronizationOffset
        element is calculated.  For example, if a TimeReference element ("Node A") is selected as the basis of the
        SynchronizationOffset element, the value of SynchronizationOffset element indicates the synchronization error
        between "Node A" and all other SynchronizationEndpoint elements contained within this
        TimeReferenceSynchronization element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TimeReferenceRef" type="TimeReferenceRefType" minOccurs="0"/>
      <xsd:element name="ConditionParameter" type="ConditionParameterType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="SynchronizationDriftType">
    <xsd:annotation>
      <xsd:documentation>
        The SynchronizationDrift element describes the drift or error rate of change in the synchronization between the
        SynchronizationEndpoint elements.  This error is determined by many factors such as the types of clocks used and
        environmental conditions.  The units for this element shall be in units of time per units of time such as
        microseconds per second or seconds per day.
      </xsd:documentation><xsd:documentation>
        The contained TimeReferenceRef element specifies a basis from which the value of the SynchronizationDrift
        element is calculated.  For example, if a TimeReference element ("Node A") is selected as the basis of the
        SynchronizationDrift element, the value of SynchronizationDrift element indicates the synchronization drift
        between "Node A" and all other SynchronizationEndpoint elements contained within this
        TimeReferenceSynchronization element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TimeReferenceRef" type="TimeReferenceRefType" minOccurs="0"/>
      <xsd:element name="ConditionParameter" type="ConditionParameterType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimeReferenceAssociationsType">
    <xsd:annotation>
      <xsd:documentation>
        The TimeReferenceAssociations element is a container for zero or more TimeReferenceAssociation elements
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TimeReferenceAssociation" type="TimeReferenceAssociationType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimeReferenceAssociationType">
    <xsd:annotation>
      <xsd:documentation>
        The TimeReferenceAssociation element describes associations or links between time sources and time-dependent
        elements and events within a network.  These links indicate the time-dependencies between the
        AssociationSource element and its assigned AssociationDestination elements.
      </xsd:documentation><xsd:documentation>
        The AssociationSource element describes the time source or time reference that directly affects the indicated
        AssociationDestination elements.  The AssociationSource element contains an IDREF attribute, of type xsd:IDREF,
        that shall reference the ID attribute of a TimeReference element or a TimestampDefinition element.
      </xsd:documentation><xsd:documentation>
        The AssociationDestination element describes the elements that are affected by the
        AssociationSource element.  These time-dependent relationships may indicate that a time source determines the
        occurrence of an event described by an AssociationDestination element.  The AssociationDestination element
        contains an IDREF attribute, of type xsd:IDREF, that shall reference the ID attribute of one of the following
        elements: a NetworkNode element, a MessageDefinition element, a PackageDefinition element, or a Measurement
        element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="AssociationSource" type="AssociationSourceRefType"/>
      <xsd:element name="AssociationDestination" type="AssociationDestinationRefType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="AssociationSourceRefType">
    <xsd:annotation>
      <xsd:documentation>
        References the ID attribute of a TimeReference or TimestampDefinition
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="AssociationDestinationRefType">
    <xsd:annotation>
      <xsd:documentation>
        References the ID attribute of a NetworkNode, MessageDefinition, PackageDefinition, or Measurement.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TimingRelationshipsType">
    <xsd:annotation>
      <xsd:documentation>
        The TimingRelationships element describes instances in time and temporal relationships between events.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ReferencedTime" type="ReferencedTimeType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TimingRelationship" type="TimingRelationshipType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimingRelationshipType">
    <xsd:annotation>
      <xsd:documentation>
        The TimingRelationship element describes timing relationships between discrete times and events that are defined
        within the scope of the TimingRelationships element. These timing relationships provide the mechanisms to
        determine when events (e.g., instances of measurement data, Packages, and TmNSDataMessages) occur with respect to
        other known times and events.  The contents of the TimingRelationship element are the same for all types of
        timing relationships it can describe; however, the interpretation and constraints of the contained elements will
        vary depending on the type of timing relationship.
      </xsd:documentation><xsd:documentation>
        The TimingRelationshipType element is an enumeration that can be set to one of the following values: 
        PeriodicTiming or OffsetTiming.
        The value of the TimingRelationshipType element impacts the interpretation of the EventRef elements as well as 
        the ReferencedTime elements.
      </xsd:documentation><xsd:documentation>
        In the context of the containing TimingRelationship element, the EventRef element describes the events that are
        related according to the timing relationship being described.
      </xsd:documentation><xsd:documentation>
        When the TimingRelationshipType element has a value of "PeriodicTiming", all of the events described by the
        EventRef elements are periodic with an interval specified by the ReferencedTime element.  The Index attributes
        of the EventRef elements are ignored in this case.
      </xsd:documentation><xsd:documentation>
        When the TimingRelationshipType element has a value of "OffsetTiming", each event described by an EventRef
        element is offset from the next event by the set of times and events specified by the ReferencedTime element.
        The Index attributes of the EventRef elements indicate the temporal ordering of the events.  The temporal
        ordering is assumed to be increasing in time as the value of the Index attribute increases (e.g., an EventRef
        element with an Index attribute value of 2 shall occur later in time than the EventRef element with an Index
        attribute value of 1).  All EventRef elements with the same Index attribute value are considered to be
        coincident.
      </xsd:documentation><xsd:documentation>
        In the context of the containing TimingRelationship element, the ReferencedTime element describes the times and
        events that characterize the timing relationships between events (i.e., EventRef elements).
      </xsd:documentation><xsd:documentation>
        When the TimingRelationshipType element has a value of "PeriodicTiming", there shall be a single ReferencedTime
        element, and the value of its Index attribute is ignored.  This single ReferencedTime element specifies the
        periodic interval between consecutive instances of the same event described by the EventRef elements.  All
        events described by the EventRef elements are similarly periodic with the specified interval.  Regardless of the
        form of the ReferencedTime element, the final value shall resolve to a valid time value (i.e., a ReferencedTime
        element that contains only a reference to an event is invalid).
      </xsd:documentation><xsd:documentation>
        When the TimingRelationshipType element has a value of "OffsetTiming", there can be any number of ReferencedTime
        elements.  These ReferencedTime elements describe the ordered sequence of times and/or events that offset each
        of the events described by the EventRef elements.  All of the offsets shall be present between each event.  The
        Index attribute of the ReferencedTime elements indicates the temporal ordering of the offsetting times/events.
        The temporal ordering is assumed to be increasing in time as the value of the Index attribute increases (e.g., a
        ReferencedTime element with an Index attribute value of 2 shall occur later in time than the ReferencedTime
        element with an Index attribute value of 1).  In this case, all valid ReferencedTime elements will contain only
        a Time element or an EventRef element, not both.  Note, the Index attributes of the ReferencedTime elements are
        in no way related to the Index attributes of the EventRef elements.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TimingRelationshipType" type="TimingRelationshipTypeEnum"/>
      <xsd:element name="EventRef" type="EventRefType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="ReferencedTime" type="ReferencedTimeType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ReferencedTimeType">
    <xsd:annotation>
      <xsd:documentation>
        The ReferencedTime element describes a discrete, referenceable time used to construct temporal and causal
        relationships.  When describing time value(s), the ReferencedTime element can contain a time value with or
        without a base time or epoch.  Also, the ReferencedTime element provides the mechanism, using the EventRef
        element, to use discrete events as historical markers from which other times or events are based.  The
        ReferencedTime element also contains an Index attribute, of type xsd:positiveInteger, which indicates the 
        order of the ReferencedTime element.
      </xsd:documentation><xsd:documentation>
        The EventRef element describes discrete events that allow constructing temporal chains between events and times.
        The EventRef element contains an IDREF attribute, of type xsd:IDREF, that shall reference the ID attribute of
        one of the following elements: a MessageDefinition element, a PackageDefinition element, a Measurement element,
        or a ReferencedTime element.  The EventRef element also contains an Index attribute, of type xsd:positiveInteger, 
        which indicates the order of the EventRef element.
      </xsd:documentation><xsd:documentation>
        When the EventRef element references a MessageDefinition element, a PackageDefinition element, or a Measurement
        element, the described event is characterized as an instance of data described by the referenced MDL element 
        (e.g., an instance of data corresponding to a given MessageDefinitionID, PackageDefinitionID, or MeasurementID).  
        When the EventRef element references a ReferencedTime element, the event is described either as a specific time 
        value or some other event as detailed by the ReferencedTime element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Name" type="xsd:token" minOccurs="0"/>
      <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="GenericParameter" type="GenericParameterType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="Time" type="TimeType" minOccurs="0"/>
      <xsd:element name="EventRef" type="EventRefType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="TimeType">
    <xsd:annotation>
      <xsd:documentation>
        The Time element describes a time value or range of time values.  The time values described by the Time element
        are measured from the reference point specified by the EventRef element if it is present.  If the EventRef
        element is not present, then the provided time values within the Time element have no reference time (e.g., less
        than 2 milliseconds, exactly 30 seconds, etc.).  If it is present, the TimeReferenceRef element indicates the
        time source that determines how time progresses for the Time element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="TimeReferenceRef" type="TimeReferenceRefType" minOccurs="0"/>
      <xsd:element name="TimeParameter" type="TimeParameterType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="TimeParameterType">
    <xsd:annotation>
      <xsd:documentation>
        The TimeParameter element describes a value or bound of time values for the containing Time element.  Multiple
        TimeParameter elements can be used to describe ranges of time values.
      </xsd:documentation><xsd:documentation>
        The TimeValue element describes a time value with assigned units of time.  The TimeValue element is a
        floating-point value/units pair.  The value of the TimeValue element can be positive or negative.  The sign of
        the value indicates if the time value is applied before or after a reference time or epoch if one is provided
        using the EventRef element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ConditionOperation" type="ConditionOperationEnum"/>
      <xsd:element name="TimeValue" type="FloatValueUnitsType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="EventRefType">
    <xsd:annotation>
      <xsd:documentation>
        The EventRef element contains an IDREF attribute, of type xsd:IDREF, that shall reference the ID attribute of
        one of the following elements: a MessageDefinition element, a PackageDefinition element, a Measurement
        element, or a ReferencedTime element.  The EventRef element also contains an Index attribute, of type
        xsd:positiveInteger, which indicates the order of the EventRef element.  When the EventRef element references
        a MessageDefinition element, a PackageDefinition element, or a Measurement element, the described event is
        characterized as an instance of data described by the referenced MDL element (e.g., an instance of data
        corresponding to a given MessageDefinitionID, PackageDefinitionID, or MeasurementID).  When the EventRef
        element references a ReferencedTime element, the event is described either as a specific time value or some
        other event as detailed by the ReferencedTime element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="Index" type="xsd:positiveInteger" use="required"/>
    <xsd:attribute name="IDREF" type="xsd:IDREF" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="ClockAccuraciesType">
    <xsd:annotation>
      <xsd:documentation>
        The ClockAccuracies element represents a table of NetworkNode pairs and corresponding clock 
        synchronization accuracies.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="ClockAccuracyEntry" type="ClockAccuracyEntryType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ClockAccuracyEntryType">
    <xsd:annotation>
      <xsd:documentation>
        The ClockAccuracyEntry element represents a row in the table that the ClockAccuracies element represents.  Each
        row contains references to two NetworkNode elements and elements describing the clock synchronization
        accuracies.  These accuracies, requirement and implementation specifications, describe the deviation from exact
        time synchronization between the two NetworkNodes, independent of the synchronization method or technologies
        used.
      </xsd:documentation><xsd:documentation>
      The RequiredRelativeAccuracy element, of type mdl:ConditionParameters, contains a list of ConditionParameter
      elements that describes a requirement specification for the allowable deviation from exact time synchronization
      between the two NetworkNodes.
      </xsd:documentation><xsd:documentation>
      The ImplementedRelativeAccuracy element, of type mdl:ConditionParameters, contains a list of ConditionParameter
      elements that describes the "as-built" deviation from exact time synchronization between the two NetworkNodes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="ReadOnly" type="xsd:boolean" default="false" minOccurs="0"/>
      <xsd:element name="Owner" type="xsd:token" minOccurs="0"/>
      <xsd:element name="NetworkNodeRef" type="NetworkNodeRefType" minOccurs="2" maxOccurs="2"/>
      <xsd:element name="RequiredRelativeAccuracy" type="ConditionParametersType" minOccurs="0"/>
      <xsd:element name="ImplementedRelativeAccuracy" type="ConditionParametersType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="IEEE1588SupportedVersionEnum">
    <xsd:annotation>
      <xsd:documentation>
        The IEEE1588SupportedVersion element, of type xsd:string, describes the version of the IEEE 1588 Precision
        Time Protocol (PTP) supported by the NetworkNode.  Valid values are "2002", "2008", and "2002 and 2008".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="2002"/>
      <xsd:enumeration value="2008"/>
      <xsd:enumeration value="2002 and 2008"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TimestampFormatEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TimestampFormatEnum element describes the format of the timestamps defined by the TimestampDefinition
        element.  The described timestamp format indicates how to interpret the ordering and scale factor of the values
        within a generated timestamp.  For example, the selected format can indicate which values correspond to days,
        hours, minutes, or seconds. The TimestampFormatEnum element is an xsd:union consisting of a restricted set of 
        xsd:string values and an enumerated set of values.  
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="IRIGTimecodes TimestampFormatEnumTypes"/>
  </xsd:simpleType>

  <xsd:simpleType name="TimestampFormatEnumTypes">
    <xsd:annotation>
      <xsd:documentation>
        The TimestampFormatEnumTypes is an enumerated list of valid values that form a subset of the allowable values
        of the TimestampFormatEnum. Valid values are "UTC" interpreted as Coordinated Universal Time (UTC) or
        Greenwich Mean Time, "IEEE 1553-2002", and "IEEE 1553-2008".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="UTC"/>
      <xsd:enumeration value="IEEE 1588-2002"/>
      <xsd:enumeration value="IEEE 1588-2008"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="IRIGTimecodes">
    <xsd:annotation>
      <xsd:documentation>
        The IRIGTimecodes is a restricted xsd:string with valid values that conform to the listed regular expression
        pattern.  The regular expression supports the entry of all IRIG timecode formats as defined in RCC Document
        200-04.  However, the entered format string is valid only if it is defined in the reference document.  Not all
        of timecode format types (e.g., IRIG format "E") support all possible combinations of the format control codes
        (e.g., "IRIG E211" is an undefined format).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="\IRIG (A|B|D|E|G|H)([0-2][0-5][0-7])"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="uInt5">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:uInt5 data type is a 5-bit unsigned integer.  Valid values are the non-negative integers in the inclusive 
        range from 0 to 31.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:unsignedInt">
      <xsd:minInclusive value="0"/>
      <xsd:maxInclusive value="31"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="MACAddress">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:MACAddress data type is an xsd:string of hexadecimal digits ('0'-'9' and 'A'-'F' or 'a'-'f') separated
        by either the ':' (colon) or '-' (hyphen) character.  It represents the 48-bit Media Access Control (MAC)
        address identifier.  Valid MAC addresses contain a series of six one-byte long hexadecimal numbers separated
        by either the ':' or the '-' character (a total of five ':' or '-' characters appear).  A valid value of the
        mdl:MACAddress data type is "01:23:45:67:89:AB" or "01-23-45-67-89-AB".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="([0-9a-fA-F]{2}(:|\-)){5}[0-9a-fA-F]{2}"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="PhoneNumberType">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:PhoneNumberType contains at least 3 numbers but no more than 10
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="\d{3,10}"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="IPAddress">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:IPAddress data type is an xsd:union of the mdl:IPv4Address and mdl:IPv6Address data types.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="IPv4Address IPv6Address"/>
  </xsd:simpleType>

  <xsd:simpleType name="IPv4Address">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:IPv4Address data type is an xsd:string of decimal digits separated by '.' (period) characters.  It
        represents the 32-bit dot-decimal notation of IPv4 addresses.  Valid IPv4 addresses contain a series of four
        one-byte long decimal numbers (0 - 255) separated by the '.' character (a total of three '.' characters
        appear).  A valid value of the mdl:IPv4Address data type is "212.23.123.0".  See RFC 790 in Section 2.2.2 for
        further details on IPv4 addresses.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="IPv6Address">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:IPv6Address data type is an xsd:string of hexadecimal digits ('0'-'9' and 'A'-'F' or 'a'-'f')
        separated by ':' (colon) characters.  It represents the 128-bit notation of IPv6 addresses.  Fully expanded
        IPv6 addresses contain a series of eight two-byte long hexadecimal numbers separated by the ":" character (a
        total of seven ':' characters appear).  A single two-byte long hexadecimal number contains up to four
        hexadecimal digits.  All valid IPv6 addresses are supported in the MDL.  A valid value of the mdl:IPv6Address
        data type is "2001:DB8:0000:0056:0000:ABCD:EF12:1234".  See RFC 2460 for further details on IPv6 addresses and 
        valid shorthand notations.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="((([0-9A-Fa-f]{1,4}:){7}(([0-9A-Fa-f]{1,4})|:))|(([0-9A-Fa-f]{1,4}:){6}(:|((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})|(:[0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){5}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}){0,1}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){0,2}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){0,3}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:)(:[0-9A-Fa-f]{1,4}){0,4}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(:(:[0-9A-Fa-f]{1,4}){0,5}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})))(%.+)?"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="FlexibleLong">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:FlexibleLong data type is an xsd:union of the xsd:long (64-bit signed integers), mdl:BinInteger,  and 
        mdl:HexInteger data types.  
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="xsd:long HexInteger BinInteger"/>
  </xsd:simpleType>

  <xsd:simpleType name="MaskType">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:MaskType data type is an xsd:union of the mdl:BinInteger and mdl:HexInteger data types.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="BinInteger HexInteger"/>
  </xsd:simpleType>

  <xsd:simpleType name="BinInteger">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:BinInteger data type is an arbitrarily long string of binary digits.  It is an xsd:string containing a
        prefix string of "0b" followed by a string of characters of binary digits ('0' and '1').  An example value of
        the mdl:BinInteger data type would be "0b10101101", which is an 8-bit binary representation of the decimal
        number 173.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0b[0-1]+"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="HexInteger">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:HexInteger data type is an arbitrarily long string of hexadecimal digits.  It is an xsd:string
        containing a prefix string of "0x" followed by a string of characters of hexadecimal digits ('0'-'9' and
        'A'-'F' or 'a'-'f').  An example value of the mdl:HexInteger data type would be "0xAD" or "0xad", which is an
        8-bit hexadecimal representation of the decimal number 173.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0x[0-9a-fA-F]+"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SixtyFourBit">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:SixtyFourBit data type is an xsd:union of the mdl:SixtyFourBitBinary and mdl:SixtyFourBitHex data
        types.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="SixtyFourBitBinary SixtyFourBitHex"/>
  </xsd:simpleType>

  <xsd:simpleType name="SixtyFourBitBinary">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:SixtyFourBitBinary data type is an xsd:string with a prefix "0b"followed by 64 characters of binary
        digits ('0' and '1').  An example value of the mdl:SixtyFourBitBinary data type would be
        "0b0000000000000000000000000000000000000000000000000000000000000001", which is a 64-bit binary representation
        of the decimal number 1.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0b[0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1]"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SixtyFourBitHex">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:SixtyFourBitHex data type is an xsd:string with a prefix "0x"followed by 16 characters of hexadecimal
        digits ('0'-'9' and 'A'-'F' or 'a'-'f').  An example value of the mdl:SixtyFourBitHex data type would be
        "0x000A0C1DF00932E2" or "0x000a0c1df00932e2" which is a 64-bit hexadecimal representation of the decimal
        number 2,828,072,487,826,146.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0x[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ThirtyTwoBit">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:ThirtyTwoBit data type is an xsd:union of the mdl:ThirtyTwoBitBinary and mdl:ThirtyTwoBitHex data types.  
      </xsd:documentation>
    </xsd:annotation>
    <xsd:union memberTypes="ThirtyTwoBitBinary ThirtyTwoBitHex"/>
  </xsd:simpleType>

  <xsd:simpleType name="ThirtyTwoBitHex">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:ThirtyTwoBitHex data type is an xsd:string with a prefix "0x"followed by eight characters of
        hexadecimal digits ('0'-'9' and 'A'-'F' or 'a'-'f').  An example value of the mdl:ThirtyTwoBitHex data type
        would be "0x00A9803C" or "0x00a9803c" which is a 32-bit hexadecimal representation of the decimal number
        11,108,412.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0x[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ThirtyTwoBitBinary">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:ThirtyTwoBitBinary data type is an xsd:string with a prefix "0b"followed by 32 characters of binary
        digits ('0' and '1').  An example value of the mdl:ThirtyTwoBitBinary data type would be
        "0b00000000000000000000000000000010", which is a 32-bit binary representation of the decimal number 2.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0b[0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1][0-1]"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SixBitBinary">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:SixBitBinary data type is an xsd:string with a prefix "0b"followed by six characters of binary digits
        ('0' and '1').  An example value of the mdl:SixBitBinary data type would be "0b011011", which is a 6-bit
        binary representation of the decimal number 27.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="0b[0-1][0-1][0-1][0-1][0-1][0-1]"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="IEEE1588ClockModeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:IEEE1588ClockModeEnum element describes the clock mode of the IEEE 1588 clock associated
        with a NetworkNode.  Valid values are "SynchronizedSlave", "IEEE1588Master", "FreeRunning", "Negotiable", and 
        "Unknown".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="SynchronizedSlave"/>
      <xsd:enumeration value="IEEE1588Master"/>
      <xsd:enumeration value="FreeRunning"/>
      <xsd:enumeration value="Negotiable"/>
      <xsd:enumeration value="Unknown"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ClockTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ClockTypeEnum element describes the type of clock (i.e., the clock's implementation) that provides the
        periodic signals to progress time for a TimeReference element.
      </xsd:documentation><xsd:documentation>
        The ClockTypeEnum element is an enumeration that can be set to one of the following values:
        "InternalHardwareOscillator", "ExternalHardwareOscillator", "SoftwareImplementation", "ExternalTrigger",
        "AtomicClock", "Unspecified"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="InternalHardwareOscillator"/>
      <xsd:enumeration value="ExternalHardwareOscillator"/>
      <xsd:enumeration value="SoftwareImplementation"/>
      <xsd:enumeration value="ExternalTrigger"/>
      <xsd:enumeration value="AtomicClock"/>
      <xsd:enumeration value="Unspecified"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ARINC429ParityEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ARINC429Parity element indicates the selected type of parity for the message described by the
        ARINC429Message element.  The ARINC429Parity element is an enumeration that can be set to one of the following
        values: "OddParity" and "EvenParity"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="OddParity"/>
      <xsd:enumeration value="EvenParity"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ARINC429DataFormatEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ARINC429DataFormat element indicates the selected data format for the message described by the
        ARINC429Message element. The ARINC429DataFormat element is an enumeration that can be set to one of the
        following values: "BCD", "BNR", "Discrete", "Maintenance", "ISOAlphabet#5", "Mixed"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="BCD"/>
      <xsd:enumeration value="BNR"/>
      <xsd:enumeration value="Discrete"/>
      <xsd:enumeration value="Maintenance"/>
      <xsd:enumeration value="ISOAlphabet#5"/>
      <xsd:enumeration value="Mixed"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ARINC429SSMEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ARINC429SSM element describes the value of the Sign/Status matrix (SSM) field as it appears in the message
        described by the ARINC429Message element.  The ARINC429SSM element is an enumeration that can be set to one of
        the following values: "00", "01", "10", "11"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="00"/>
      <xsd:enumeration value="01"/>
      <xsd:enumeration value="10"/>
      <xsd:enumeration value="11"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SelectionFieldOriginType">
    <xsd:annotation>
      <xsd:documentation>
        The SelectionFieldOrigin element is an enumeration that is restricted to the string values "fromTmNSDataMessage", 
        "fromPackage".
      </xsd:documentation><xsd:documentation>
        The meaning of the "fromTmNSDataMessage" value is that the field of interest is located SelectionFieldOffset bits 
        relative to the first bit of the TmNSDataMessage.
      </xsd:documentation><xsd:documentation>
        The meaning of the "fromPackage" value is that the field of interest is located SelectionFieldOffset bits relative 
        to the first bit of a Package.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="fromTmNSDataMessage"/>
      <xsd:enumeration value="fromPackage"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TimeOrderEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TimeOrderEnum element describes the temporal ordering of instances of digital data (e.g., measurement data)
        within a field (defined by a PackageDataFieldRef element or a PackageDataFieldSetRef element).
      </xsd:documentation><xsd:documentation>
        The TimeOrderEnum element is an enumeration that can be set to one of the following values: "IncreasingTemporal", 
        "DecreasingTemporal", "Simultaneous", or  "Unspecified"
     </xsd:documentation><xsd:documentation>
        The value of "IncreasingTemporal" means that subsequent instances of data (e.g., measurement data) occur later
        in time.  Conversely, "DecreasingTemporal" means that subsequent instances of data (e.g., measurement data)
        occur earlier in time.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="IncreasingTemporal"/>
      <xsd:enumeration value="DecreasingTemporal"/>
      <xsd:enumeration value="Simultaneous"/>
      <xsd:enumeration value="Unspecified"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="NetworkTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:NetworkType element describes the type of the containing Network element.  The mdl:NetworkType element
        is an enumeration that can be set to one of the following values: "RangeNetwork", "TmNS", "TestArticleNetwork",
        "VehicleNetwork", "GroundOperationsNetwork", "GroundNetwork", "RangeOperationsNetwork",
        "MissionControlRoomNetwork", "RadioAccessNetwork", "AntennaSiteNetwork", or "GenericNetwork"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="TestArticleNetwork"/>
      <xsd:enumeration value="VehicleNetwork"/>
      <xsd:enumeration value="GroundNetwork"/>
      <xsd:enumeration value="RangeOperationsNetwork"/>
      <xsd:enumeration value="MissionControlRoomNetwork"/>
      <xsd:enumeration value="RadioAccessNetwork"/>
      <xsd:enumeration value="AntennaSiteNetwork"/>
      <xsd:enumeration value="GenericNetwork"/>
      <xsd:enumeration value="TmNS"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="MILSTD1553TransmitReceiveType">
    <xsd:annotation>
      <xsd:documentation>
        The MILSTD1553MessageTransmitReceive element describes the value of the Transmit/Receive field as it appears
        in the message described by the MILSTD1553Message element (e.g., in a Command word).  The
        MILSTD1553MessageTransmitReceive element is an enumeration that can be set to one of the following values:
        "Transmit", "Receive"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Transmit"/>
      <xsd:enumeration value="Receive"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="MILSTD1553WordCountType">
    <xsd:annotation>
      <xsd:documentation>
        The MILSTD1553WordCountOrModeCode element, of type mdl:MILSTD1553WordCountType, describes the value of the
        Word Count/Mode Code field as it appears in the message described by the MILSTD1553Message element (e.g., in a
        Command word).  Valid values for the MILSTD1553WordCountOrModeCode element are the positive integers within
        the inclusive range from 1 to 32.  If the Subaddress field has a value of 0 or 31 indicating that this is a
        Mode Code message, the value of the MILSTD1553WordCountOrModeCode element indicates the Mode Code to be
        performed.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:positiveInteger">
      <xsd:minInclusive value="1"/>
      <xsd:maxInclusive value="32"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="MILSTD1553MessageTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The MILSTD1553MessageType element indicates the type of the described MILSTD1553Message element.  The
        MILSTD1553MessageType element is an enumeration that can be set to one of the following values:
        "BusControllerToRemoteTerminal", "RemoteTerminalToBusController", "RemoteTerminalToRemoteTerminal",
        "BusControllerToBroadcast", "RemoteTerminalToBroadcast", "ModeCodeNonBroadcast", "ModeCodeBroadcast",
        "StatusResponse"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="BusControllerToRemoteTerminal"/>
      <xsd:enumeration value="RemoteTerminalToBusController"/>
      <xsd:enumeration value="RemoteTerminalToRemoteTerminal"/>
      <xsd:enumeration value="BusControllerToBroadcast"/>
      <xsd:enumeration value="RemoteTerminalToBroadcast"/>
      <xsd:enumeration value="ModeCodeNonBroadcast"/>
      <xsd:enumeration value="ModeCodeBroadcast"/>
      <xsd:enumeration value="StatusResponse"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="MILSTD1553WordTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The MILSTD1553WordType element indicates the word type from which the data bits are extracted for the
        described MILSTD1553DataUnit element.  The MILSTD1553WordType element is an enumeration that can be set
        to one of the following values: CommandWord, DataWord, StatusWord.
      </xsd:documentation><xsd:documentation>
        If the value of the MILSTD1553WordType element is "CommandWord" or "StatusWord", the described
        MILSTD1553DataUnit element shall contain only those sixteen data bits that make up a Command Word or Status
        Word.  If the value of the MILSTD1553WordType element is "DataWord", the extracted data of the described
        MILSTD1553DataUnit element is determined by the presence of the MILSTD1553DataWordIndex element, the
        PackageDataFieldRef element, or the PackageDataFieldSetRef element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="CommandWord"/>
      <xsd:enumeration value="DataWord"/>
      <xsd:enumeration value="StatusWord"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="MeasurementTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The MeasurementType element is an enumeration of type mdl:MeasurementTypeEnum that can be set to one of the
        following values: "Analog", "Discrete", "DigitalBus", "Computed"
      </xsd:documentation><xsd:documentation>
        If "Analog" or "Discrete" is selected, the AnalogAttributes element shall be used to describe the Measurement
        element.  If "DigitalBus" or "Computed" is selected, the DigitalAttributes element shall be used to describe
        the Measurement element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Analog"/>
      <xsd:enumeration value="Discrete"/>
      <xsd:enumeration value="DigitalBus"/>
      <xsd:enumeration value="Computed"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="DeliveryClassEnum">
    <xsd:annotation>
      <xsd:documentation>
        The DeliveryClass element is an enumeration of type mdl:DeliveryClassEnum that can be set to one of the
        following values: "Voice", "FlightSafety", or "BestEffort"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Voice"/>
      <xsd:enumeration value="FlightSafety"/>
      <xsd:enumeration value="BestEffort"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="EndiannessEnum">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:EndiannessEnum element is an enumeration that can be set to one of the following values: 
        LittleEndian or BigEndian
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="BigEndian"/>
      <xsd:enumeration value="LittleEndian"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SynchronizationProtocolEnum">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:SynchronizationProtocolEnum element describes the selected protocol or implementation that maintains the
        synchronization between SynchronizationEndpoint elements.  Typically, synchronization protocols use specific
        hardware and/or algorithms as the basis of their implementations.
      </xsd:documentation><xsd:documentation>
        The mdl:SynchronizationProtocolEnum element is an enumeration that can be set to one of the following values: NTP
        (interpreted as Network Time Protocol), IEEE 1588, PXI (interpreted as Peripheral Component Interconnect (PCI)
        eXtensions for Instrumentation), PhysicalConnection, SoftwareImplementation, Unspecified
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="NTP"/>
      <xsd:enumeration value="IEEE 1588"/>
      <xsd:enumeration value="PXI"/>
      <xsd:enumeration value="PhysicalConnection"/>
      <xsd:enumeration value="SoftwareImplementation"/>
      <xsd:enumeration value="Unspecified"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="PortDirectionEnum">
    <xsd:annotation>
      <xsd:documentation>
        The PortDirection element indicates the directionality of the flow of content through the interface described by
        a Port element.  The PortDirection element is an enumeration that can be set to one of the following values:
        Input, Output, Bidirectional, Unspecified
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Input"/>
      <xsd:enumeration value="Output"/>
      <xsd:enumeration value="Bidirectional"/>
      <xsd:enumeration value="Unspecified"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SynchronizationRoleEnum">
    <xsd:annotation>
      <xsd:documentation>
        The SynchronizationRoleEnum element is an enumeration that can be set to one of the following values:
        GrandMaster, Master, Slave, Peer, Unspecified
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="GrandMaster"/>
      <xsd:enumeration value="Master"/>
      <xsd:enumeration value="Slave"/>
      <xsd:enumeration value="Peer"/>
      <xsd:enumeration value="Unspecified"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="PaddingSideType">
    <xsd:annotation>
      <xsd:documentation>
        The PaddingSide element is an enumeration that can be set to one of the following values: Left, Right
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Left"/>
      <xsd:enumeration value="Right"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="MediumEnum">
    <xsd:annotation>
      <xsd:documentation>
        The Medium element describes the physical medium used by the port to transfer data.  The Medium
        element is an enumeration that can be set to one of the following values: Copper, Fiber, Wireless
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Copper"/>
      <xsd:enumeration value="Fiber"/>
      <xsd:enumeration value="Wireless"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TimescaleEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TimescaleEnum element describes the timescale of the timestamp defined by the TimestampDefinition element.  
        The timescale describes the division of time into measurable units and the historical reference or epoch that 
        specifies the starting point (i.e., time "0") from which time progresses.            
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="GPS"/>
      <xsd:enumeration value="UTC"/>
      <xsd:enumeration value="LORAN"/>
      <xsd:enumeration value="TAI"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ARINC429SDIEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ARINC429SDI element describes the value of the Source/Destination Identifier (SDI) field as it appears in
        the message described by the ARINC429Message element.  The ARINC429SDI element is an enumeration that can be set
        to one of the following values: 00, 01, 10, 11
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="00"/>
      <xsd:enumeration value="01"/>
      <xsd:enumeration value="10"/>
      <xsd:enumeration value="11"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="DigitalEncodingEnum">
    <xsd:annotation>
      <xsd:documentation>
        The DigitalEncodingEnum element is an enumeration that can be set to one of the following values: "BCD",
        "Two'sComplement", "One'sComplement", "UnsignedBinary", "SignedBinary", "IEEE754FloatingPointSinglePrecision",
        "IEEE754FloatingPointDoublePrecision"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="BCD"/>
      <xsd:enumeration value="Two'sComplement"/>
      <xsd:enumeration value="One'sComplement"/>
      <xsd:enumeration value="UnsignedBinary"/>
      <xsd:enumeration value="SignedBinary"/>
      <xsd:enumeration value="IEEE754FloatingPointSinglePrecision"/>
      <xsd:enumeration value="IEEE754FloatingPointDoublePrecision"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ShiftTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The ShiftType element describes what type of bitwise shift to perform and the direction in which to shift the
        input data bits.  The supported shift types are "Arithmetic", "Logical", and "Circular", and bits can be
        shifted either "left" or "right". The ShiftType element is an enumeration that can be set to one of the
        following values: "ArithmeticLeft", "ArithmeticRight", "LogicalLeft", "LogicalRight", "CircularLeft",
        "CircularRight"
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="ArithmeticLeft"/>
      <xsd:enumeration value="ArithmeticRight"/>
      <xsd:enumeration value="LogicalLeft"/>
      <xsd:enumeration value="LogicalRight"/>
      <xsd:enumeration value="CircularLeft"/>
      <xsd:enumeration value="CircularRight"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ModulationOptionType">
    <xsd:annotation>
      <xsd:documentation>
        The ModulationOption element describes the way that the data is to be modulated in the minimum rate
        configuration mode.  The ModulationOption element is currently an xsd:string but is expected to become an 
        enumeration in the near future.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>

  <xsd:simpleType name="TWReferenceType">
    <xsd:annotation>
      <xsd:documentation>
        The TWReference element describes the frame of reference for evaluating the value of the TWStart element.  The
        TWReference element is an enumeration that can be set to one of the following values: "BeginningOfEpoch" or
        "AbsoluteTime".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="BeginningOfEpoch"/>
      <xsd:enumeration value="AbsoluteTime"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TimingRelationshipTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TimingRelationshipType element is an enumeration that can be set to one of the following values:
        "PeriodicTiming", "OffsetTiming"
      </xsd:documentation>
      <xsd:documentation>
        The value of the TimingRelationshipType element impacts the interpretation of the EventRef and ReferencedTime 
        elements
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="PeriodicTiming"/>
      <xsd:enumeration value="OffsetTiming"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="BandTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The BandType element is an enumeration that can be set to one of the following values: PassBand, StopBand,
        TransitionBand
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="PassBand"/>
      <xsd:enumeration value="TransitionBand"/>
      <xsd:enumeration value="StopBand"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="DataStreamTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The DataStreamType element indicates the type of the selected technology for the described DataStream element.
        Each data stream type may have its own technology-specific protocols, interfaces, and formats.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="MILSTD1553"/>
      <xsd:enumeration value="ARINC429"/>
      <xsd:enumeration value="PCMStream"/>
      <xsd:enumeration value="GenericDataStream"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="RadioTypeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The RadioType element describes the type of radio in the system.  The RadioType element is an enumeration that 
        can be set to one of the following values: "Unknown", "TA Radio", "TA Relay", or "Ground Radio".
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Unknown"/>
      <xsd:enumeration value="TA Radio"/>
      <xsd:enumeration value="TA Relay"/>
      <xsd:enumeration value="Ground Radio"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="RFNEProtocolEnum">
    <xsd:annotation>
      <xsd:documentation>
        The mdl:RFNEProtocolEnum string enumerations indicate the desired RFNE protocol.
      </xsd:documentation><xsd:documentation>
        RFNO-RFNM is used for RFNM to NO External Interface.
      </xsd:documentation><xsd:documentation>
        LM-QM is used for LM to QM Internal Interface.
      </xsd:documentation><xsd:documentation>
        RFNM-LM is used for RFNM to LM Internal Interface.
      </xsd:documentation><xsd:documentation>
        RFNM-QM is used for RFNM to QM Internal Interface.
      </xsd:documentation><xsd:documentation>
        RFNM-CC is used for RFNM to CC Internal Interface.
      </xsd:documentation><xsd:documentation>
        LM-LM is used for LM to LM Control Message Protocol.
      </xsd:documentation><xsd:documentation>
        RFNM_GS-RFNM_TA is used for GS RFNM to TA RFNM Control Message Protocol.
      </xsd:documentation><xsd:documentation>
        RFNM_GS-RFNM-LOCAL is used for GS RFNM to local GS RFNM Control Message Protocol.
      </xsd:documentation><xsd:documentation>
        RFNM_GS-RFNM-REMOTE is used for GS RFNM to remote GS RFNM Control Message Protocol.
      </xsd:documentation><xsd:documentation>
        CC-CC is used for CC Control Message Protocol.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="RFNO-RFNM"/>
      <xsd:enumeration value="LM-QM"/>
      <xsd:enumeration value="RFNM-LM"/>
      <xsd:enumeration value="RFNM-QM"/>
      <xsd:enumeration value="RFNM-CC"/>
      <xsd:enumeration value="LM-LM"/>
      <xsd:enumeration value="RFNM_GS-RFNM_TA"/>
      <xsd:enumeration value="RFNM_GS-RFNM-LOCAL"/>
      <xsd:enumeration value="RFNM_GS-RFNM-REMOTE"/>
      <xsd:enumeration value="CC-CC"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="LoggingLevelEnum">
    <xsd:annotation>
      <xsd:documentation>
        The LoggingLevel element indicates the current setting of the level of logging messages per the System
        Management standard.  All TmNS components shall have logging capabilities. TmNS components shall implement the
        following logging levels:
      </xsd:documentation><xsd:documentation>
        1. Trace (the least serious)
      </xsd:documentation><xsd:documentation>
        2. Debug
      </xsd:documentation><xsd:documentation>
        3. Info
      </xsd:documentation><xsd:documentation>
        4. Warning
      </xsd:documentation><xsd:documentation>
        5. Error
      </xsd:documentation><xsd:documentation>
        6. Critical (the most serious)
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Trace"/>
      <xsd:enumeration value="Debug"/>
      <xsd:enumeration value="Info"/>
      <xsd:enumeration value="Warning"/>
      <xsd:enumeration value="Error"/>
      <xsd:enumeration value="Critical"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="TrackingModeEnum">
    <xsd:annotation>
      <xsd:documentation>
        The TrackingMode element indicates the operating mode of the ACU tracking system. The individual settings are 
        described below:
      </xsd:documentation><xsd:documentation>
        Standby: servo rate at zero, brakes applied, no power to servo amps.
      </xsd:documentation><xsd:documentation>
        Manual: servo rate at zero, brakes released, power applied to servo amps.
      </xsd:documentation><xsd:documentation>
        Search: Single-axis movements (Sector) or Dual-axis (Raster) based on Center position angle, range of travel, step
        angle, and rate. Output voltage and polarity is based on direction and range in degrees between the actual position
        of the pedestal and the commanded angle. As the error decreases, so does the rate voltage.
      </xsd:documentation><xsd:documentation>
        Slave (Point): output voltage and polarity is based on direction and range in degrees between the actual
        position of the pedestal and the commanded angle. As the error decreases, so does the rate voltage.
      </xsd:documentation><xsd:documentation>
        Autotrack-Auto Acquire: Stays in the previous mode the antenna control unit (ACU) was in prior to selection
        of Autotrack and waits until the pre-set automatic gain control (AGC) threshold is exceeded, then enters into
        Autotrack as long as the AGC levels are above threshold. Utilizes the Amplitude Modulator (AM) and Scan References
        to demodulate into Servo Rate Error.
      </xsd:documentation><xsd:documentation>
        Autotrack-Forced: Enters into Autotrack regardless of AGC levels and threshold.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Standby"/>
      <xsd:enumeration value="Manual"/>
      <xsd:enumeration value="Search"/>
      <xsd:enumeration value="Slave"/>
      <xsd:enumeration value="AutoTrackAutoAcquire"/>
      <xsd:enumeration value="AutoTrackForced"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="SSTModulationEnum">
    <xsd:annotation>
      <xsd:documentation>
        The SSTModulationEnum element indicates the modulation employed by the SST transmitter or receiver.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="PCM-FM"/>
      <xsd:enumeration value="SOQPSK-TG FQPSK-JR FQPSK-B"/>
      <xsd:enumeration value="ARTM CPM"/>
      <xsd:enumeration value="Off"/>
    </xsd:restriction>
  </xsd:simpleType>


</xsd:schema>
