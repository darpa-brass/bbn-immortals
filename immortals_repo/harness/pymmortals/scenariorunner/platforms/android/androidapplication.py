"""
Represents an android application and the common configuration options necessary
"""

import json

from pymmortals.datatypes.scenariorunnerconfiguration import AndroidApplicationConfig
from pymmortals.interfaces import AbstractApplication
from pymmortals.utils import path_helper

_instances = {}


class AndroidApplication(AbstractApplication):
    block_setup = False

    def __init__(self, application_configuration: AndroidApplicationConfig):

        if application_configuration.instanceIdentifier in _instances:
            raise Exception(
                'An AndroidApplication with the identifier "' + application_configuration.instanceIdentifier +
                '" has already been defined!')
        else:
            _instances[application_configuration.instanceIdentifier] = self

        super().__init__(application_configuration=application_configuration)

        self.is_application_running = False
        self.is_application_setup = False
        self.performing_setup = False

        """
        deploys the configuration files and apk to the device.
        """

    def setup(self):
        self.platform.deploy_application(self.config.executableFile)

        override_file_map = {k.sourceFilepath: k for k in self.config.configurationOverrides}
        copy_file_map = {k.sourceFilepath: k for k in self.config.filesToCopy}

        for source_filepath in override_file_map:
            with open(source_filepath, 'r') as f:
                config_file = json.load(f)

                for key in list(override_file_map[source_filepath].overridePairs.keys()):
                    property_path = key.split('.')

                    attr_parent = None

                    while len(property_path) > 1:
                        key = property_path.pop(0)
                        attr_parent = config_file[key]

                    if attr_parent is None:
                        attr_parent = config_file

                    attr_parent[property_path.pop(0)] = override_file_map[source_filepath].overridePairs[key]

                fp = path_helper(False, self.config.applicationDeploymentDirectory, source_filepath.split('/').pop())

                with open(fp, 'w') as f2:
                    json.dump(config_file, f2)

                copy_file = copy_file_map[source_filepath]
                target_path = copy_file.targetFilepath
                copy_file.sourceFilepath = fp
                copy_file.targetFilepath = target_path

        for source_filepath in list(copy_file_map.keys()):
            copy_file = copy_file_map[source_filepath]
            self.platform.upload_file(copy_file.sourceFilepath, copy_file.targetFilepath)
            # This is only necessary on API 23+
            # if configurationmanager.Configuration.deployment_environments[
            # self.config.deployment_platform_environment].sdk_level >= 23:
            # for permission in self.config.permissions:
            # self.platform.grant_permission(self.config.package_identifier, permission)
        self.is_application_setup = True

    """
    Starts the application and calls the event_listener when formatted events are received from the device via logcat
    """

    def _start(self):
        self.platform.application_start()
        self.is_application_running = True

    """
    Forcefully stops the application if it is running
    """

    def _is_ready(self):
        return self.is_application_running

    def _destroy(self):
        self.platform.application_destroy()
        self.is_application_setup = False

    def _is_setup(self):
        return self.is_application_setup

    def clean(self):
        # TOOO: Add cleaning of files generated by the application
        pass

    def _is_running(self):
        return self.is_application_running

    def _stop(self):
        self.platform.application_stop()
        self.is_application_running = False
