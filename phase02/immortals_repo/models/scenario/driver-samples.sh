#!/bin/bash

# This example shows how to compose and add prefixes for namespaces
cat ./template/01-prefixes.ttl ./template/52-gme-output.ttl | \
python3 ./py/rdf_tidy.py \
     --input - \
     --output gme_output_tidy.ttl

# export SESSION_ID="session-$(uuidgen)"
export SESSION_ID="I$(date +'%N')"

# This example generates a CP2 perturbation input file
# The session identifier is generated by the script.
python3 ./py/mission_perturb.py \
     --session ${SESSION_ID} \
     --output cp2-all-changed.ttl \
     --template ./template/52-gme-output.ttl \
     --pli-client-msg-rate 400 \
     --image-client-msg-rate 200 \
     --server-bandwidth 100 \
     --client-device-count 250


# This example generates a CP1 perturbation input file
# The session identifier is passed in as an argument
cat ./template/01-prefixes.ttl ./template/52-gme-output.ttl | \
python3 ./py/mission_perturb.py \
     --session ${SESSION_ID} \
     --output cp1-all-off.ttl \
     --template - \
     --android-bluetooth-resource no \
     --android-usb-resource no \
     --android-internal-gps-resource no \
     --android-ui-resource no \
     --gps-satellite-resource no \
     --mission-trusted-comms no

# This shows how to post a perturbation file to the DAS-server
curl -H "Content-Type:text/plain" \
     -X POST \
     --data-binary @./cp1-all-off.ttl \
     http://localhost:8088/das/deployment-model

# The post to the REST API of the DAS server may need a delay

# Run the simulation. The presence of resource availability and mission requirements indicates their presence in the mission
python2 ../../harness/scenarioconductor/scenarioconductor.py \
    --sessionidentifier ${SESSION_ID} \
    --clientcount 100 \
    --serverbandwidth 10 \
    --clientimagesendfrequency 3 \
    --clientmsgsendfrequency 7 \
    --android-bluetooth-resource \
    --android-usb-resource \
    --android-internal-gps-resource \
    --android-ui-resource \
    --gps-satellite-resource \
    --mission-trusted-comms

# Prepare and run subsequent tests
