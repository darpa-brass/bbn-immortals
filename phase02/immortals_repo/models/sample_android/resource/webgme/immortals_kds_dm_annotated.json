{
  /**
  For an overview of the concepts behind GME see...
  https://webgme.org/WebGMEWhitePaper.pdf

  These node elements represent the entire model including
  the meta-model and visualization information.
  The meta-model comprises rules and stereotypical elements.
  The rules are found in the "meta" attribute of the node item.
  Visualization information is found in the "registry" attribute.

  Each node is uniquely identified by an immutable GUID.
  */
    "00bf7574-b013-32af-e32d-7255d63579ce": {
      /**
        The principle relationships are:
         * inheritance : indicated by the "base" attribute
         * containment : indicated by the "parent" attribute
         * mixin : indicates alternate rules
         * pointers :
         * sets :
      */
      /**
      The "attributes" element providing values for the attributes
      specified in the relevant section of the "meta" element.
      */
        "attributes": {},
        /**
        Every node (except FCO) is the child of some "base" element.
        It "inherits" all of the properties including the "meta" data
        from its "base".
        This is different from the "parent" element which indicates
        the "containment" relationship.
        */
        "base": "7967bf36-9ea6-f4b5-524b-bc724fde7ce2",
        /**
        The "meta" element contains the rules for the current node
        and all of its descendants (nodes for which it is "base").
        Subsequent examples will illustrate the types of rules.
        */
        "meta": {},
        /*
        As mentioned, the "parent" element indicates containment.
        The containment relationship could be indicated as a pointer
        but is treated separately.
        "Containment" is a fundamental modeling relationship which
        precludes recursion.
        */
        "parent": "08d0c775-a49e-9ee4-b5f5-f3a34655f70e",
        /**
        The bulk of relationships are conveyed via named "pointers".
        Most modeling concepts are "duck-typed" where the presence
        of properties indicates a specific modeling concept.
        Where there are just two pointers the node is acting as
        a type of connector.
        A multitude of pointers indicates some type of hyper-edge.
        */
        "pointers": {},
        /**
        The registry information is not part of the model proper.
        Rather this information is used by the visualizers.
        */
        "registry": {},
        "sets": {}
    },
    "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045": {
      /**
      There are a few fundamental nodes.
      * FCO : first-class-object
      * ROOT : the root node of the model
      The "FCO" is the "base" of the "ROOT" node and
      "ROOT" is the "parent" of "FCO".
      Realize that all nodes ultimately decend from "FCO"
      and that all nodes ultimately are children of "ROOT".
      */
        "attributes": {
            "name": "FCO"
        },
        /**
        All nodes inherit from a "base" except "FCO".
        */
        "base": null,
        /**
        "meta" contains the rules for the stereotype node.
        Any node with "meta" information is "duck-typed" to
        be a stereotype and be part of the meta-model.
         */
        "meta": {
          /**
          "Name" is not a fundamental part of the model framework
           but is introduced as a rule on "FCO".
           */
            "attributes": {
                "name": {
                    "type": "string"
                }
            },
            /**
            The "children" element carries the containment rules
            for child elements. That is, the "parent"  attribute
            of the related node is governed by this.
            The actual child must be a child of one of the
            indicated "items".
            */
            "children": {
                "items": [
                    "7f4a49a5-9374-953b-c267-03e8837a8ba8"
                ],
                "maxItems": [-1], "minItems": [-1]
            }
        },
        /**
        The "parent" indicates containment and must be allowed
        by the "children" rule. (Which is obtained by following
        the "base" element.)
        */
        "parent": "03d36072-9e09-7866-cb4e-d0a36ff825f6",
        /**
        Association is realized with "pointers".
        A collection of "pointers" permits "duck-typing" of the node.
        A node with "pointers" forms a type of hyper-edge.
        The "FCO" has no pointers.
        */
        "pointers": {
        },
        /**
        The "registry" holds information used by the various visualizers.
        There is a namespace problem here if multiple visualizers
        are used.
        */
        "registry": {
          /**
          These items are used by the ModelEditor.
          */
            "DisplayFormat": "$name",
            "PortSVGIcon": "",
            "SVGIcon": "",
            "decorator": "",
            "isAbstract": false,
            "isPort": false,
            "position": {
                "x": 669,
                "y": 309
            },
            "validVisualizers": "ModelEditor METAAspect SetEditor Crosscut GraphViz"
        },
        /**
        A set is a named association between one object and
        an unordered set of other objects.
        It can be considered a collection of pointers to unique objects.
        */
        "sets": {}
    },

    "03d36072-9e09-7866-cb4e-d0a36ff825f6": {
      /**
      The other fundamental node is "ROOT".
      The "ROOT" node is the only node which is not an "FCO"
        "attributes": {
            "name": "ROOT"
        },
        "base": null,
        "meta": {
            "attributes": {
                "name": {
                    "type": "string"
                }
            },
            /**
            The "ROOT" node contains "FCO"s.
            But, as all other nodes are children of "FCO",
            "ROOT" can contain anything (except descendants
            of itself.)
            */
            "children": {
                "items": [
                    "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
                ],
                "maxItems": [-1], "minItems": [-1]
            }
        },
        "parent": null,
        "pointers": {},
        "registry": {
          /**
          The "METAAspect" visualizer introduces a "MetaSheets"
          namespace for visualizing the rules applied to the
          stereotypical nodes.
          */
            "MetaSheets": [
                {
                    "SetID": "MetaAspectSet_3509cb8b-94ed-2ce3-0db7-95eaf2a49a9b",
                    "order": 0,
                    "title": "Top"
                },
            ],
            "ProjectRegistry": {
                "FCO_ID": "/1"
            },
            "usedAddOns": "",
            "validDecorators": "CircleDecorator DefaultDecorator DocumentDecorator MetaDecorator ModelDecorator SVGDecorator",
            "validPlugins": "pull push",
            "validVisualizers": "ModelEditor METAAspect"
        },
        "sets": {
            "MetaAspectSet": {
                "020677fa-ef85-1a96-f105-5ae35fd3f394": {
                    "attributes": {},
                    "registry": {
                        "position": {
                            "x": 788,
                            "y": 693
                        }
                    }
                }
            }
        }
    },

    "01987d4c-d06e-d17b-ae00-6466a07f7a12": {
        "attributes": {
            "name": "Location Stereotypes",
            "endTimeEpochMilliSec": 0,
            "startTimeEpochMilliSec": 0,
            "concurrencyMode": "process"
        },
        "base": "0f808d8e-8f3a-1558-193d-e6d57694a531",
        "meta": {
            "mixins": [
                "aa2970a2-2df2-cd04-2bfb-a875cfa0478e"
            ],
            "pointers": {
               "j2": {
                   "items": [
                       "297ef813-2e8d-0e9c-8a52-5c877be1d47f"
                   ],
                   "maxItems": [-1], "minItems": [-1],
                   "max": 1, "min": 1
               }
            },
            "children": {
                "items": [
                    "7f4a49a5-9374-953b-c267-03e8837a8ba8"
                ],
                "maxItems": [-1], "minItems": [-1]
            },
            "aspects": {
                "instances": [
                    "71080d37-8a2b-58fe-0493-3d84dfbef222"
                ],
                "types": [
                    "0f7f33c5-62d4-d6f8-9afa-974a9947c140",
                    "41b7ae61-af1f-ff06-4620-160d8a30492d"
                  ]
            },
            "attributes": {
                "name": {
                    "type": "string"
                },
                "startTimeEpochMilliSec": {
                 "type": "integer"
               },
               "endTimeEpochMilliSec": {
                   "type": "integer"
               },
               "concurrencyMode": {
                   "type": "string",
                   "enum": [
                       "thread",
                       "process",
                       "none"
                   ]
               }
            },
        "parent": "b9e81ad8-449e-9e27-0cf5-44265a298b42",
        "pointers": {
        },
        "registry": {
            "lineEndArrow": "block-xwide-xlong",
            "lineStyle": "-",
            "position": {
                "x": 573,
                "y": 454
            }
        },
        "sets": {}
    },


}
