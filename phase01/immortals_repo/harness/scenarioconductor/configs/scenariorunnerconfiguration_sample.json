{
    // The identifier for the run
    "sessionIdentifier": "UNDEFINED",
    // Where things are deployed to
    "deploymentDirectory": "PRODUCTS/{sessionIdentifier}/das/deployment_environment/",
    "scenario": {
        // The identifier for the set of template files to use for this run
        "scenarioIdentifier": "sanity",
        // The maximum amount of time until non-responsive clients are deemed to have failed
        "durationMS": 30000,
        // Applications being deployed
        "deploymentApplications": [
            // The Server
            {
                "applicationIdentifier": "marti",
                "instanceIdentifier": "martiRouter_DAS",
                "deploymentPlatformEnvironment": "java_local",
                "buildRoot": "applications/server/Marti/",
                "executableFile": "applications/server/Marti/Marti-immortals.jar",
                "applicationDeploymentDirectory": "{deploymentDirectory}{instanceIdentifier}/",
                "configurationTemplateFilepath": "harness/scenarioconductor/configs/templates/{scenarioIdentifier}/marti-CoreConfig.xml",
                "configurationTargetFilepath": "{applicationDeploymentDirectory}CoreConfig.xml",
                "files": {},
                "filesForCleanup": [
                    "{deploymentDirectory}{instanceIdentifier}"
                ],
                "properties": {}
            },
            // A client
            {
                "applicationIdentifier": "ataklite",
                // The identifier for this instance of the client
                "instanceIdentifier": "ATAKLite-{sessionIdentifier}_DAS-000",
                "deploymentPlatformEnvironment": "android_emulator",
                // Where the application build root is
                "buildRoot": "PRODUCTS/{sessionIdentifier}/applications/client/ATAKLite-{sessionIdentifier}/",
                // The application apk file
                "executableFile": "PRODUCTS/{sessionIdentifier}/applications/client/ATAKLite-{sessionIdentifier}/ATAKLite-{sessionIdentifier}-debug.apk",
                // Where to deploy and/or stage the application
                "applicationDeploymentDirectory": "{deploymentDirectory}{instanceIdentifier}/",
                // The local location of the client configuration file
                "configurationTemplateFilepath": "harness/scenarioconductor/configs/templates/{scenarioIdentifier}/ATAKLite-Config.json",
                // The target destination of the client configuration file
                "configurationTargetFilepath": "/sdcard/ataklite/ATAKLite-Config.json",
                "packageIdentifier": "com.bbn.ataklite",
                "mainActivity": "com.bbn.ataklite.MainActivity",
                "permissions": [
                    "android.permission.ACCESS_FINE_LOCATION",
                    "android.permission.CAMERA",
                    "android.permission.WRITE_EXTERNAL_STORAGE",
                    "android.permission.READ_EXTERNAL_STORAGE"
                ],
                // Pairs of source/destination files to be copied to the client
                "files": {
                    "harness/scenarioconductor/configs/templates/{scenarioIdentifier}/sample_image.jpg": "/sdcard/ataklite/sample_image.jpg",
                    "harness/scenarioconductor/configs/location/LocationProviderBluetoothGpsSimulated.json": "/sdcard/ataklite/LocationProviderBluetoothGpsSimulated.json",
                    "harness/scenarioconductor/configs/location/LocationProviderManualSimulated.json": "/sdcard/ataklite/LocationProviderManualSimulated.json",
                    "harness/scenarioconductor/configs/location/LocationProviderSaasmSimulated.json": "/sdcard/ataklite/LocationProviderSaasmSimulated.json",
                    "harness/scenarioconductor/configs/location/LocationProviderUsbGpsSimulated.json": "/sdcard/ataklite/LocationProviderUsbGpsSimulated.json"
                },
                // The directory to remove when cleaning up the environment (in addition to apk removal)
                "filesForCleanup": [
                    "/sdcard/ataklite"
                ],
                // Properties to be modified in the target configurationTargetFilepath
                "properties": {
                    "callsign": "{instanceIdentifier}",
                    "latestSABroadcastIntervalMS": 1000,
                    "imageBroadcastIntervalMS": 2000
                }
            },
            // Another client
            {
                "applicationIdentifier": "ataklite",
                "instanceIdentifier": "ATAKLite-{sessionIdentifier}_DAS-001",
                "deploymentPlatformEnvironment": "android_emulator",
                "buildRoot": "PRODUCTS/{sessionIdentifier}/applications/client/ATAKLite-{sessionIdentifier}/",
                "executableFile": "PRODUCTS/{sessionIdentifier}/applications/client/ATAKLite-{sessionIdentifier}/ATAKLite-{sessionIdentifier}-debug.apk",
                "applicationDeploymentDirectory": "{deploymentDirectory}{instanceIdentifier}/",
                "configurationTemplateFilepath": "harness/scenarioconductor/configs/templates/{scenarioIdentifier}/ATAKLite-Config.json",
                "configurationTargetFilepath": "/sdcard/ataklite/ATAKLite-Config.json",
                "packageIdentifier": "com.bbn.ataklite",
                "mainActivity": "com.bbn.ataklite.MainActivity",
                "permissions": [
                    "android.permission.ACCESS_FINE_LOCATION",
                    "android.permission.CAMERA",
                    "android.permission.WRITE_EXTERNAL_STORAGE",
                    "android.permission.READ_EXTERNAL_STORAGE"
                ],
                "files": {
                    "harness/scenarioconductor/configs/templates/{scenarioIdentifier}/sample_image.jpg": "/sdcard/ataklite/sample_image.jpg",
                    "harness/scenarioconductor/configs/location/LocationProviderBluetoothGpsSimulated.json": "/sdcard/ataklite/LocationProviderBluetoothGpsSimulated.json",
                    "harness/scenarioconductor/configs/location/LocationProviderManualSimulated.json": "/sdcard/ataklite/LocationProviderManualSimulated.json",
                    "harness/scenarioconductor/configs/location/LocationProviderSaasmSimulated.json": "/sdcard/ataklite/LocationProviderSaasmSimulated.json",
                    "harness/scenarioconductor/configs/location/LocationProviderUsbGpsSimulated.json": "/sdcard/ataklite/LocationProviderUsbGpsSimulated.json"
                },
                "filesForCleanup": [
                    "/sdcard/ataklite"
                ],
                "properties": {
                    "callsign": "{instanceIdentifier}",
                    "latestSABroadcastIntervalMS": 1000,
                    "imageBroadcastIntervalMS": 2000
                }
            }
        ],
        "validatorIdentifiers": [
            "client-location-share",
            "client-location-produce",
            "client-image-share",
            "client-image-produce"
        ]
    },
    // Perform validation if possible
    "validate": true,
    // Display the emulator GUI. Strongly recommend on systems that are not headless so you don't end up with emulators
    //  running in the background without your knowledge
    "displayEmulatorGui": false,
    // Exactly what it says. However it times them so that conflicting startup points do not (seem to) cause issues
    "startEmulatorsSimultaneously": true,
    // If true, everything is torn down on an exception. If false, it is not (useful is run as a module from a script)
    "swallowAndShutdownOnException": true,
    // The minimum amount of time to run validation for. Useful if you want to monitor bandwidth usage
    "minDurationMS": 0,
    // Debug mode. Probably not necessary unless you are debugging behavior
    "debugMode": false,
    "lifecycle": {
        // Should an environment be set up, configured, or cleaned?
        "setupEnvironment": true,
        // Should the applications be installed?
        "setupApplications": true,
        // Should the scenario be executed?
        "executeScenario": true,
        // Should the environment be torn down at finish?
        "haltEnvironment": false
    },
    "setupEnvironmentLifecycle": {
        // If setupEnvironment, should the existing environment be destroyed first if it exists?
        "destroyExisting": false,
        // If setupEnvironment, should the existing environment be cleaned first if it exists?
        "cleanExisting": true
    }
}
